<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="/resources/spdi-openaccess-jats.xsl"?>
<!DOCTYPE response [
	
<!ENTITY % article SYSTEM "http://jats.nlm.nih.gov/archiving/1.2/JATS-archivearticle1.dtd">
<!ENTITY % book-part-wrapper SYSTEM "http://jats.nlm.nih.gov/extensions/bits/2.0/BITS-book2.dtd">
	]><response><apiMessage>This XML was provided by Springer Nature</apiMessage><query>doi:10.1007/s00163-016-0221-8</query><apiKey>87ba7cb21f89ce78154df796840621f4</apiKey><result><total>1</total><start>1</start><pageLength>2</pageLength><recordsDisplayed>1</recordsDisplayed></result><records><article dtd-version="1.2" article-type="research-article" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><front><journal-meta><journal-id journal-id-type="publisher-id">163</journal-id><journal-id journal-id-type="doi">10.1007/163.1435-6066</journal-id><journal-title-group><journal-title>Research in Engineering Design</journal-title><abbrev-journal-title abbrev-type="publisher">Res Eng Design</abbrev-journal-title></journal-title-group><issn pub-type="ppub">0934-9839</issn><issn pub-type="epub">1435-6066</issn><publisher><publisher-name>Springer London</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">s00163-016-0221-8</article-id><article-id pub-id-type="manuscript">221</article-id><article-id pub-id-type="doi">10.1007/s00163-016-0221-8</article-id><article-categories><subj-group subj-group-type="heading"><subject>Original Paper</subject></subj-group></article-categories><title-group><article-title xml:lang="en">Product architecture design of multi-modal products</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes" id="Au1"><name><surname>Liu</surname><given-names>Cong</given-names></name><address><email>cong.liu@ntnu.no</email></address><xref ref-type="aff" rid="Aff1">1</xref><xref ref-type="aff" rid="Aff2">2</xref><xref ref-type="corresp" rid="IDs0016301602218_cor1">a</xref></contrib><contrib contrib-type="author" id="Au2"><name><surname>Hildre</surname><given-names>Hans Petter</given-names></name><address><email>hh@hials.no</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author" id="Au3"><name><surname>Zhang</surname><given-names>Houxiang</given-names></name><address><email>hozh@hials.no</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author" id="Au4"><name><surname>Rølvåg</surname><given-names>Terje</given-names></name><address><email>terje.rolvag@ntnu.no</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.5947.f</institution-id><institution-id institution-id-type="ISNI">0000000115162393</institution-id><institution content-type="org-division">Faculty of Maritime Technology and Operations</institution><institution content-type="org-name">Norwegian University of Science and Technology</institution></institution-wrap><addr-line content-type="postbox">Postboks 1517</addr-line><addr-line content-type="postcode">6025</addr-line><addr-line content-type="city">Aalesund</addr-line><country country="NO">Norway</country></aff><aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.5947.f</institution-id><institution-id institution-id-type="ISNI">0000000115162393</institution-id><institution content-type="org-division">Department of Engineering Design and Materials</institution><institution content-type="org-name">Norwegian University of Science and Technology</institution></institution-wrap><addr-line content-type="postcode">7491</addr-line><addr-line content-type="city">Trondheim</addr-line><country country="NO">Norway</country></aff></contrib-group><author-notes><corresp id="IDs0016301602218_cor1"><label>a</label><email>cong.liu@ntnu.no</email></corresp></author-notes><pub-date date-type="pub" publication-format="electronic"><day>16</day><month>3</month><year>2016</year></pub-date><pub-date date-type="pub" publication-format="print"><month>10</month><year>2016</year></pub-date><volume>27</volume><issue seq="3">4</issue><fpage>331</fpage><lpage>346</lpage><history><date date-type="registration"><day>25</day><month>2</month><year>2016</year></date><date date-type="received"><day>8</day><month>7</month><year>2015</year></date><date date-type="rev-recd"><day>14</day><month>12</month><year>2015</year></date><date date-type="accepted"><day>24</day><month>2</month><year>2016</year></date><date date-type="online"><day>16</day><month>3</month><year>2016</year></date></history><permissions><copyright-statement content-type="compact">© The Author(s) 2016</copyright-statement><copyright-year>2016</copyright-year><copyright-holder>The Author(s)</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link xlink:href="http://creativecommons.org/licenses/by/4.0/" ext-link-type="uri">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made.</license-p></license></permissions><abstract xml:lang="en" id="Abs1"><title>Abstract</title><p id="Par1">Incorporating multiple modes enables a product to change between different configurations, such as hybrid electric vehicles and washing machines. This paper investigates how multiple modes are constructed in modular product architecture—especially, how multi-modal modules are designed and used to construct overall product modality. The authors argue that product modality becomes viable by undertaking two strategies: temporal clustering, which activates and organizes different groups of modules in different modes, and modality propagation, which relies on modality of the product’s subordinate modules. A solution that successfully incorporates modality enables the system to achieve functions with minimal system resources; however, it also introduces extra complexity to the design process. In the final section, the authors propose two techniques that promote multi-modal modules in design processes. This research work provokes the considerations of modality in product architecture. It claims modality is an important factor that leads to innovative design solutions. To emphasize the importance of modality, the authors present a case study of two pasta machines and compare the radical differences in their modular design solutions.</p></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Mode</kwd><kwd>Modality</kwd><kwd>Reconfigurable product</kwd><kwd>Product architecture</kwd><kwd>Modularity</kwd></kwd-group><custom-meta-group><custom-meta><meta-name>publisher-imprint-name</meta-name><meta-value>Springer</meta-value></custom-meta><custom-meta><meta-name>volume-issue-count</meta-name><meta-value>4</meta-value></custom-meta><custom-meta><meta-name>issue-article-count</meta-name><meta-value>7</meta-value></custom-meta><custom-meta><meta-name>issue-toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>issue-pricelist-year</meta-name><meta-value>2016</meta-value></custom-meta><custom-meta><meta-name>issue-copyright-holder</meta-name><meta-value>Springer-Verlag London</meta-value></custom-meta><custom-meta><meta-name>issue-copyright-year</meta-name><meta-value>2016</meta-value></custom-meta><custom-meta><meta-name>article-contains-esm</meta-name><meta-value>No</meta-value></custom-meta><custom-meta><meta-name>article-numbering-style</meta-name><meta-value>ContentOnly</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-year</meta-name><meta-value>2016</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-month</meta-name><meta-value>2</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-day</meta-name><meta-value>25</meta-value></custom-meta><custom-meta><meta-name>article-toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>volume-type</meta-name><meta-value>Regular</meta-value></custom-meta><custom-meta><meta-name>journal-product</meta-name><meta-value>ArchiveJournal</meta-value></custom-meta><custom-meta><meta-name>numbering-style</meta-name><meta-value>ContentOnly</meta-value></custom-meta><custom-meta><meta-name>article-grants-type</meta-name><meta-value>OpenChoice</meta-value></custom-meta><custom-meta><meta-name>metadata-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>abstract-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bodypdf-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bodyhtml-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bibliography-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>esm-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>online-first</meta-name><meta-value>false</meta-value></custom-meta><custom-meta><meta-name>pdf-file-reference</meta-name><meta-value>BodyRef/PDF/163_2016_Article_221.pdf</meta-value></custom-meta><custom-meta><meta-name>target-type</meta-name><meta-value>OnlinePDF</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-year</meta-name><meta-value>2016</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-month</meta-name><meta-value>9</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-day</meta-name><meta-value>21</meta-value></custom-meta><custom-meta><meta-name>issue-print-date-year</meta-name><meta-value>2016</meta-value></custom-meta><custom-meta><meta-name>issue-print-date-month</meta-name><meta-value>9</meta-value></custom-meta><custom-meta><meta-name>issue-print-date-day</meta-name><meta-value>21</meta-value></custom-meta><custom-meta><meta-name>issue-type</meta-name><meta-value>Regular</meta-value></custom-meta><custom-meta><meta-name>article-type</meta-name><meta-value>OriginalPaper</meta-value></custom-meta><custom-meta><meta-name>journal-subject-primary</meta-name><meta-value>Engineering</meta-value></custom-meta><custom-meta><meta-name>journal-subject-secondary</meta-name><meta-value>Engineering Design</meta-value></custom-meta><custom-meta><meta-name>journal-subject-secondary</meta-name><meta-value>Computer-Aided Engineering (CAD, CAE) and Design</meta-value></custom-meta><custom-meta><meta-name>journal-subject-collection</meta-name><meta-value>SC8</meta-value></custom-meta><custom-meta><meta-name>open-access</meta-name><meta-value>true</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Introduction</title><p id="Par2">Many modern products have multiple modes. Modes can mean different functions to the user, such as the washing and spinning modes of a washing machine. Modes sometimes also reflect users’ requirements, such as the sport and economic modes of a car’s transmission, and the outdoor, silent, and power-saving modes of a mobile phone. The significance of having multiple modes is that the users only have to deal with the choices of modes, instead of manually configuring the system. In order to offer this convenience, the designer needs to solve the problem of integrating several configurations into one multi-modal configuration.</p><p id="Par3">Modality is a product’s ability to operate in multiple modes.<xref ref-type="fn" rid="Fn1">1</xref> It is also a relative property that indicates how much the system can change its configuration. The changeable configuration causes different conversions of material, energy, and signal flows. However, the existent design theories and methodologies mainly apply to design products with fixed configurations. They lack effective methods for modeling and designing the changeable configurations exhibited by multi-modal products. In our previous study on conceptual design of multi-modal products (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>), we explored modality between the users’ needs and the product’s functional model (FM). This paper addresses the gap respecting modality by focusing on product architecture (PA) design. Both papers review and develop Pahl and Beitz’s (<xref ref-type="bibr" rid="CR22">2013</xref>) systematic design methodology, making it better suited to provide theoretical support for describing and elaborating changeable configurations.</p><p id="Par5">The foreground of this research work contains the presence of a resolved FM and its preliminary principle solution, which are already derived from the prior conceptual design process (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>). According to our previous paper, the resolved FM refers to the proposed <italic>reconfigurable functional model</italic> (RFM), which efficiently describes how the FM changes in different modes. The principle solution is preliminary because its physical phenomena, working structure, and layout must take modular design into consideration. At this stage, the multi-modal PA design commences. Its considerations will influence the rest of conceptual design and the entire embodiment design.</p><p id="Par6">This research work is positioned at the intersection between PA and modality. PA is the scheme by which functions are allocated to the physical building blocks. Modularity is regarded as the most important characteristic of a product’s architecture (Ulrich and Eppinger <xref ref-type="bibr" rid="CR30">2003</xref>). The existent modular design methodology figures an integral design as one in which multiple functions are integrated in one module. On this basis, modality allows the module to allocate these functions to different times. Therefore, the major difficulty of modality is that it makes functions and physical configurations changeable. In particular, it asks, how do designers design the multi-modal system with modules? Conversely, how do designers use the multi-modal modules to design a large system?</p><p id="Par7">To let the entire research work root in modularity, we assume all products consist of modules, despite some necessary trivial components. The modules mentioned in this paper all belong to function-based modularity, according to Otto and Wood’s categorization (<xref ref-type="bibr" rid="CR21">2001</xref>). Although their view of function-based modularity divides a product into a large number of modules, it will not violate other modular design methodologies that further integrate functional modules into modules designed for other purposes, such as customers’ needs, serviceability, manufacturability, and so on (Jiao et al. <xref ref-type="bibr" rid="CR13">2007</xref>). We adopt the term “subsystem” to mention the relative hierarchy between a currently focused system and its subordinate systems.</p><p id="Par8">The content of the paper is as follows. Section <xref rid="Sec2" ref-type="sec">2</xref> reviews the existing methodologies in reconfigurable product design and modular PA. Section <xref rid="Sec3" ref-type="sec">3</xref> presents a descriptive model of modality in PA. The descriptive model is then examined in a case study of two pasta machines in Sect. <xref rid="Sec10" ref-type="sec">4</xref>. Section <xref rid="Sec11" ref-type="sec">5</xref> presents the significances of modality with respect to system resource and design complexity. Finally, prescriptive models are given in the form of techniques for capturing and elaborating multi-modal modules (MMs).</p></sec><sec id="Sec2"><title>Background</title><p id="Par9">In our previous study on product modality (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>), we claimed multi-modal products as a subset of reconfigurable products. The definitions summarized by Ferguson et al. (<xref ref-type="bibr" rid="CR7">2007</xref>) assume that reconfigurable products may change their configurations during the whole product life cycle. In contrast, modality facilitates the changes only during the product operation stage. Modifying a configuration or recycling modules is not considered a switch between modes, but such manipulations are within the range of product reconfiguration.</p><p id="Par10">On the conceptual end of product design, the advantages of reconfigurable products, including multi-modal products, are summarized as optimal performance when unpredicted factors arise (Ferguson et al. <xref ref-type="bibr" rid="CR7">2007</xref>), such as changes in customers’ needs, requirements, and circumstances (Haldaman and Parkinson <xref ref-type="bibr" rid="CR10">2010</xref>). Among many case- and solution-oriented research works, modular design is assumed to be an indispensable measure to achieve reconfigurations (Olewnik et al. <xref ref-type="bibr" rid="CR20">2004</xref>; Siddiqi and de Weck <xref ref-type="bibr" rid="CR26">2008</xref>; Singh et al. <xref ref-type="bibr" rid="CR27">2009</xref>).</p><p id="Par11">Prior to PA design, the FM should enable reconfigurations. An RFM has been proposed for conceptual design of multi-modal products (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>). This method makes it possible to express reconfigurations of FMs by manipulating the selections and connections of sub-functions. In the next stage, PA is the scheme by which the function of a product is allocated to physical components (Ulrich <xref ref-type="bibr" rid="CR29">1995</xref>). PA design is about the decision as to whether to implement one or multiple functions on each module. Mikkola (<xref ref-type="bibr" rid="CR17">2006</xref>) has comprehensively summarized the trade-off between the resultant modular and integral architecture, covering issues of design criteria, redesign cost, production cost, innovation, and so on. Basically, modular design strives to achieve the minimum inter-module interactions among modules and maximum intra-module interactions in each module (Huang and Kusiak <xref ref-type="bibr" rid="CR12">1998</xref>; Gu and Sosale <xref ref-type="bibr" rid="CR9">1999</xref>). To achieve these two goals, modular design methods are divided into component- and function-based approaches.</p><p id="Par12">The component-based approach strives to enumerate all the potential integral design by examining the interactions between all the components. The premise of these approaches is that each of the functions has already been assigned to a specific component. In practice, design structure matrices (DSMs) are widely applied as a tool to quantify all the interactions (AlGeddawy and ElMaraghy <xref ref-type="bibr" rid="CR1">2013</xref>; Eppinger and Browning <xref ref-type="bibr" rid="CR6">2012</xref>; Park et al. <xref ref-type="bibr" rid="CR23">2008</xref>). The component-based approach is straightforward for practical solutions, but it often leads to high work load. More importantly, the component-based approach may hinder component sharing, because the secondary functions of a component are ignored when designers only look for interaction between components.</p><p id="Par13">The function-based approach undertakes a clustering process upon an FM and thus determines the functions that each module should embody. Stone et al. (<xref ref-type="bibr" rid="CR28">2000</xref>) emphasized the importance of parallel and serial flows in FMs and proposed three module heuristics that help to identify modules: dominant flow, branching flows, and conversion–transmission. Dahmus et al. (<xref ref-type="bibr" rid="CR4">2001</xref>) add one additional rule that considers product portfolio design. The function-based approach avoids iterations and promotes enclosing a series of functions in each module. However, the division of an FM may lack comprehensive considerations about the physical nature of components.</p><p id="Par14">At the intersection of PA and the use of a product over time, Yu et al. (<xref ref-type="bibr" rid="CR33">1999</xref>) suggested that the PA design should take each product’s use over time into account, since a product’s value is calculated in a time distribution. A prominent research work on function-based product integration is made by Kalyanasundaram and Lewis (<xref ref-type="bibr" rid="CR14">2014</xref>). It shares a very similar scope with our research. Their approach regards a reconfigurable product as an integration of two primary products, and thus, they search for potential function and structure sharing (which they call “component sharing” in their paper) by examining the interactions between functions and structures with a series of matrices. Their proposed design process implies both component- and function-based approaches.</p><p id="Par15">The multiple-to-one sharing scheme was initially remarked at the mapping between multiple functions to one component. Ulrich and Seering (<xref ref-type="bibr" rid="CR31">1990</xref>) named this phenomenon function sharing. Chakrabarti (<xref ref-type="bibr" rid="CR2">2001</xref>) suggested to correct the misnomer “function sharing” to “structure sharing”, and further categorized four sharing schemes between functions and structures, shown in Fig. <xref rid="Fig1" ref-type="fig">1</xref>. Among the four sharing schemes, the temporal sharing schemes exhibited by modality are presented with an “or” relationship between functions and structures. Thus, the multi-mode integration shares the same design strategy with our proposed functional multi-modal design (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>). Technological multi-modal design is more akin to structure redundancy, which promotes the “alternative fulfilment of the same function” (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>). The four sharing schemes provide a qualitative measurement of the integral design in elementary system scale. However, the mentioned structures are misaligned with the modules and components in modularity ontology. The lack of a boundary that clusters one or several structures for a certain module hinders its application to modular design.<fig id="Fig1"><label>Fig. 1</label><caption xml:lang="en"><p>Four sharing schemes categorized by Chakrabarti (<xref ref-type="bibr" rid="CR2">2001</xref>)</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig1_HTML.gif" id="MO1"/></fig></p><p id="Par16">In summary, the research background of this paper is that the existent design theory and methodology of PA lack sufficient considerations of reconfigurability. The design of reconfigurable products, although situated in the context of modularity, is not well connected to the design theory. To fill the gap in between, the function and structure sharing schemes categorized by Chakrabarti (<xref ref-type="bibr" rid="CR2">2001</xref>) and the categorization of functional or technological multi-modal design (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>) shed light on framing PA design of multi-modal products. The desired framework provides a strategic approach alongside the systematic approach by Kalyanasundaram and Lewis (<xref ref-type="bibr" rid="CR14">2014</xref>).</p></sec><sec id="Sec3"><title>Modality in product architecture</title><p id="Par17">Mode is a switchable configuration state made for the purpose of a specific function or technology (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>). A configuration state specifies how the material, energy, and signal flows are manipulated in a system. Figure <xref rid="Fig2" ref-type="fig">2</xref> shows the control panel of a washing machine. A mode can purposefully indicate washing outdoor wear. Intrinsically, its configuration state is the specific system setup that conducts laundry at 30 degrees Celsius for 40 min. Considering that the washing machine is designed for washing various textiles in different ways, the designer’s role is to interpret the existing purposes into multiple configuration states, each of which contains a unique technical description.<fig id="Fig2"><label>Fig. 2</label><caption xml:lang="en"><p>The control panel of a Bosch™ washing machine</p></caption><graphic specific-use="web" mime-subtype="JPEG" xlink:href="MediaObjects/163_2016_221_Fig2_HTML.jpg" id="MO2"/></fig></p><p id="Par18">The descriptions can be expressed in both functional and physical levels. Figure <xref rid="Fig3" ref-type="fig">3</xref> shows the configuration of a dual-mode solar light, which is designed for lighting gardens or streets. Its two modes are for the functions of lighting and charging. The configuration states are separately presented in the middle and right planes along the time line. Each mode contains a unique configuration state that can be described in both functional and physical levels. The selection between two modes is dependent on the light-sensitive sensor and control logic.<fig id="Fig3"><label>Fig. 3</label><caption xml:lang="en"><p>PA, on the left plane, is a consolidated and time-independent system description that allocates functions into modules</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig3_HTML.gif" id="MO3"/></fig></p><p id="Par19">According to widely acknowledged understanding, PA is the mapping from functional elements to physical elements (Ulrich and Seering <xref ref-type="bibr" rid="CR31">1990</xref>; Mikkola and Gassmann <xref ref-type="bibr" rid="CR18">2003</xref>). In the PA demonstrated in Fig. <xref rid="Fig3" ref-type="fig">3</xref>, it is easy to conceive that the solar panel embodies the function “convert” from light to electricity, while the bulb embodies the function “convert” from electricity to light. Both of the two modules exhibit fixed mapping between the functional and the physical levels regardless of modes. However, the mapping from the functions “store” and “provide” to the battery does not show a fixed correspondence. As this example suggests, modular PA of multi-modal products must take modality into consideration.</p><p id="Par20">In a holistic view, modularity and modality are regarded as two ways of dividing the same product with respect to <italic>space</italic> and <italic>time</italic>. In Fig. <xref rid="Fig3" ref-type="fig">3</xref>, modules, as the result of a spatial division, are shown in separate blocks in the physical level. Each module, viewed as a physical object segmented in space, includes all of the product’s configuration states at all times. Modes, created by a temporal division, are shown in compartments along the time axis. Each mode includes a configuration state of the whole system during a segment of time. However, the design process is always conducted on the left plane, because the designers need a consolidated and time-independent system description. Specifically, the different PA shown on the middle and right planes must be concentrated in a time-independent format. The descriptive model of modality must explain how the RFM is fulfilled by the physical configuration layout on the left plane.</p><sec id="Sec4"><title>Changeable mapping</title><p id="Par21">The premise of changeable mapping is that the involved functions and modules are activated in a sequential fashion, rather than a concurrently. In the solar light example, if modality were not applied, a concurrent operation would cause a bizarre solution involving all of the functions and modules in a simultaneous operation. Thus, the resultant operation of lighting during charging would not be acceptable (except for a traffic light that works day and night). In practice, designers prevent such a solution by selecting a subset of the entire system for each mode, shown shaded in Fig. <xref rid="Fig4" ref-type="fig">4</xref>. The changeable mapping is observed in two scales: <list list-type="order"><list-item><p id="Par22">In overall system scale, the correspondent clusters of functions and modules are bundled in modes, shown in the two beams in Fig. <xref rid="Fig4" ref-type="fig">4</xref>. The overlap between clusters indicates reuse<xref ref-type="fn" rid="Fn2">2</xref> of functions and modules.</p></list-item><list-item><p id="Par24">In subsystem scale, the changeable mapping is also observed at the correspondence between the battery and the functions “store” and “provide”, shown in the combined pattern.</p></list-item></list><fig id="Fig4"><label>Fig. 4</label><caption xml:lang="en"><p>Two sets of mapping in a solar light</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig4_HTML.gif" id="MO4"/></fig></p><p id="Par25">Modality in PA is enabled by two basic strategies: <italic>temporal clustering</italic> and <italic>modality propagation</italic>. The first achieves modality by allocating the FM of each mode to a specific subset of the entire product. This strategy has been implied in rich literature about reconfigurable products, in which modular design appeared to be the leverage of reconfigurability (Olewnik et al. <xref ref-type="bibr" rid="CR20">2004</xref>; Siddiqi and de Weck <xref ref-type="bibr" rid="CR26">2008</xref>; Singh et al. <xref ref-type="bibr" rid="CR27">2009</xref>). However, selecting different clusters of modules is not always sufficient to enable modality. An additional strategy is to propagate modality to the system’s subordinate modules, so that the subsystem modality contributes the overall modality. Nevertheless, the two basic strategies can be used in combination.</p><sec id="Sec5"><title>Temporal clustering</title><p id="Par26">Clustering all sub-functions into modules is the common goal of many modular design methods (Gershenson et al. <xref ref-type="bibr" rid="CR8">2004</xref>). Their resultant clusters indicate the sub-functions fulfilled by each module. Temporal clustering is a viewpoint over the entire functional and physical levels, rather than a design procedure. It shows which functions and modules are involved in each mode. The involvement of a function or a module is identified by whether the material, energy, or signal flow is present in it. In Fig. <xref rid="Fig5" ref-type="fig">5</xref>, the RFM and physical configuration layout are both clustered by two modes. Each mode indicates two corresponding clusters in both functional and physical levels.<fig id="Fig5"><label>Fig. 5</label><caption xml:lang="en"><p>The PA of a solar light</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig5_HTML.gif" id="MO5"/></fig></p></sec><sec id="Sec6"><title>Modality propagation</title><p id="Par27">The overlap between two clusters indicates the reused modules, such as the sensor and battery modules in Fig. <xref rid="Fig5" ref-type="fig">5</xref>. Multi-modal modules are a subset of the reused modules. They often play critical roles when a product’s modality relies on its subsystem modality. Thus, modality propagation is an indispensable channel to achieve modality in PA design.</p><p id="Par28">Umeda et al. (<xref ref-type="bibr" rid="CR32">1990</xref>) claims that function decomposition continues until the function matches a design in the catalog. In the context of modality, the “match” between functions and modules is evaluated with criteria of both functional requirements and modality. In the solar light example, the functions of the battery not only satisfy the functional requirements of storing and providing electricity, but also provide the two functions at different times. Only by satisfying both criteria can the battery module be selected. In case of not finding an appropriate module that accomplishes the two criteria, the designer needs to set up a subordinate design task to design it.</p></sec></sec><sec id="Sec7"><title>Multi-modal modules</title><p id="Par29">Multi-modal modules are the channel of modality propagation. Basically, modes are established to facilitate either multiple functions or multiple technologies (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>). In the context of modular PA, these two purposes result in functional multi-modal modules (FMMs) and technological multi-modal modules (TMMs).</p><sec id="Sec8"><title>Categorization of multi-modal modules</title><p id="Par30">The categorization Chakrabarti (<xref ref-type="bibr" rid="CR2">2001</xref>) proposes shows misalignment with modularity, because structures are not an objective reference in describing a module. According to Fig. <xref rid="Fig1" ref-type="fig">1</xref>, in cases of structure sharing, a structure is seen as a functional module that fulfills two functions. However, in cases of function sharing, the unique function is fulfilled by two structures, which would have been considered as one module from the viewpoint of modular design. Modularity always considers one-to-multiple mapping from a module to multiple functions. As a result, Chakrabarti’s categorization does not share the same starting point of a unique module emphasized in modularity.</p><p id="Par31">Figure <xref rid="Fig6" ref-type="fig">6</xref> presents a new categorization of sharing schemes in a three-dimensional space. Function is a verb-object description for manipulating material, signal, and energy flows (Hirtz et al. <xref ref-type="bibr" rid="CR11">2002</xref>). The function of a module defines <italic>what</italic> the module does; however, the detailed function specifications, in terms of size, weight, speed, pressure, voltages, and so on, are not included in a function. Technology is a viable solution to the function. It specifies <italic>how</italic> a function is achieved in a subsystem. Since there may exist more than one solution to a function, the selection of a technology is dependent on the function specifications. The division of function and technology is also because of the convention of the function modeling technique, in which the limited information contained in the verb-object description of functions neglects their specifications. Schultz et al. (<xref ref-type="bibr" rid="CR25">2010</xref>), Kroll (<xref ref-type="bibr" rid="CR15">2013</xref>) and Liu et al. (<xref ref-type="bibr" rid="CR16">2015</xref>) reference the negligence as a lack of quantification. Consequently, the neglected function specifications are detailed in technology in the form of design variables and parameters.<fig id="Fig6"><label>Fig. 6</label><caption xml:lang="en"><p>Different sharing schemes presented by different mapping between modes, functions, and modules</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig6_HTML.gif" id="MO6"/></fig></p><p id="Par32">A function multiplication results in a multi-functional module, which demonstrates one module shared by multiple functions. Similarly, a multi-technological module demonstrates one module that adopts multiple technologies for the same function. When modality is not applied, they both demonstrate a concurrent operation that involves the multiplied functions and technologies, shown on the function and technology axes in Fig. <xref rid="Fig6" ref-type="fig">6</xref>. Multi-functional modules can be regarded as implementations of structure sharing schemes. However, without the facilitation of modality, multi-technological modules are not common in design practice, because redundant and concurrent technologies undermine simplicity.</p><p id="Par33">An FMM, as the result of multiple verb-object descriptions, fulfills multiple functions at different times. Similarly, a TMM uses modality to satisfy different sets of function specifications. The significance of TMM is the robustness in dealing with varied specifications exerted from other modules. This kind of modules is epitomized by a wide range of programmable or reconfigurable devices, which can provide extra flexibility in satisfying the basic requirements.</p></sec><sec id="Sec9"><title>Involving MMs in PA</title><p id="Par34">In Fig. <xref rid="Fig6" ref-type="fig">6</xref>, FMMs and TMMs have shown differences in their interfaces, in terms of the number of functions. More importantly, the two categories of MMs also exhibit very different mapping from the functional level to the physical level.</p><p id="Par35">Figure <xref rid="Fig7" ref-type="fig">7</xref> demonstrates a generalized PA that adopts an FMM. The multiple functions of M2 are identified from the multiple-to-one mapping from F21 and F22 to M2. In the functional level, the functions are clustered in different modes; however, in the physical level, the module is overlapped by both modes. The identification of an FMM is summarized in two steps:<list list-type="order"><list-item><p id="Par36">The module (M2) demonstrates a multiple-to-one mapping from the functional to physical level.</p></list-item><list-item><p id="Par37">Its embodied functions (F21 and F22) are separately clustered in different modes (Modes 1 and 2).</p></list-item></list><fig id="Fig7"><label>Fig. 7</label><caption xml:lang="en"><p>Generalized PA of FMMs</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig7_HTML.gif" id="MO7"/></fig></p><p id="Par38">The left part of Fig. <xref rid="Fig8" ref-type="fig">8</xref> shows PA that includes a TMM. Different from FMMs, M1 exhibits a one-to-one mapping from F1 to itself. In addition, both M1 and its only function F1 are overlapped by two modes. These two observations demonstrate that M1 is reused for the same function by both modes. However, it is not possible to judge whether M1 is multi-modal unless the designer inspects F1’s interactions with F21 and F22 to determine its function specifications, as the right part of Fig. <xref rid="Fig8" ref-type="fig">8</xref> suggests. Generally, the identification of a TMM is summarized in two steps:<list list-type="order"><list-item><p id="Par39">The module (M1) and its function (F1) are overlapped by multiple modes (Modes 1 and 2).</p></list-item><list-item><p id="Par40">The module (M1) is assigned varied function specifications by the modes.</p></list-item></list><fig id="Fig8"><label>Fig. 8</label><caption xml:lang="en"><p>Generalized PA of TMMs</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig8_HTML.gif" id="MO8"/></fig></p><p id="Par41">The difference between the multiple technologies can be a significant shift between working principles, such as the fueled and electric drives for a hybrid electric vehicle, or minor changes in design variables, such as the varied temperature and time for a washing machine. The notion is that the technologies, as the solution to varied function specifications, must undergo reconfigurations. These reconfigurations may not necessarily be mentioned as modes extrinsically, as designers and users have different understandings about how much change is sufficient for a new mode. Nevertheless, the design solution of having a changeable configuration intrinsically resembles multiple modes in a general sense, since each configuration state is designed for a specific purpose.</p><p id="Par42">However, expressing the PA of a TMM without the right part of Fig. <xref rid="Fig8" ref-type="fig">8</xref> remains a difficulty. Fundamentally, this obstacle is rooted at the function-oriented perspective of PA design, shown by Fig. <xref rid="Fig9" ref-type="fig">9</xref>. A module’s functional requirements consist of a function and its specifications. The function is clearly exposed to the designer, so that PA can efficiently present and even facilitate searching for FMMs. In contrast, PA does not express the specifications clearly. Until now, there has been no acknowledged method to express the modality-related design variables during function modeling processes. Despite this difficulty, Fig. <xref rid="Fig8" ref-type="fig">8</xref> uses a switch symbol on the module M1, meaning some varied specifications between the two technologies.<fig id="Fig9"><label>Fig. 9</label><caption xml:lang="en"><p>The function-oriented perspective of PA design</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig9_HTML.gif" id="MO9"/></fig></p></sec></sec></sec><sec id="Sec10"><title>Two electric pasta machines: a case study</title><p id="Par43">The process of making pasta consists of two main procedures: to make dough by mixing flour and water and to form pasta by extruding the dough. A household pasta machine is required to fulfill the FM shown in Fig. <xref rid="Fig10" ref-type="fig">10</xref>, in which the procedures are undertaken in the mixing and extruding modes. The material flow of dough is regulated by a mechanism that prevents or allows the dough to proceed to the extruding function. In the figure, this mechanism is functionally symbolized by a switch.<fig id="Fig10"><label>Fig. 10</label><caption xml:lang="en"><p>The RFM of a pasta machine</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig10_HTML.gif" id="MO10"/></fig></p><p id="Par44">Figure <xref rid="Fig11" ref-type="fig">11</xref> shows the solutions of two off-the-shelf pasta machines, each of which has its major modules shown in a physical configuration layout on the right side. Both of the products share the same FM shown in Fig. <xref rid="Fig10" ref-type="fig">10</xref>; however, they have remarkable differences in their PA.<fig id="Fig11"><label>Fig. 11</label><caption xml:lang="en"><p>The different PA design of two pasta machines (Empire Sweden AB <xref ref-type="bibr" rid="CR5">2015</xref>, Philips Electronics <xref ref-type="bibr" rid="CR24">2015</xref>)</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig11_HTML.gif" id="MO11"/></fig></p><p id="Par45">The design of the C3™ pasta machine avoids MMs. The mixing and extruding functions are separately embodied by two modules. The dough is constrained in the mixer by the lock during mixing, and thereafter, the user needs to manually release the lock and let the dough fall into the extruder. The motor is reused by both modes; however, it does not provide different movements for different modes (neglecting the actual back-and-forth movement during the mixing process).</p><p id="Par46">The design of a Philips™ pasta machine exhibits more integral design in its combined mixer–extruder. Considering that the extruding process is only valid in one rotational direction, the idea is to apply different rotational directions to the mixing and extruding processes. Therefore, the mixer–extruder is created as an FMM. Moreover, the motor must be able to reverse the direction to facilitate two functions of mixing and extruding. Consequently, the motor’s varied specification in rotational direction identifies itself as a TMM. In Fig. <xref rid="Fig11" ref-type="fig">11</xref>, the mode selection is symbolized by the switch on the motor.</p><p id="Par47">Overviewing the PA of the two products, the C3™ pasta machine achieves its modality by pure temporal clustering without modality propagation. In contrast, the simplicity exhibited by the Philips™ pasta machine benefits from using MMs.</p></sec><sec id="Sec11"><title>Significances of modality in PA</title><p id="Par48">Each of the two pasta machines presented in Sect. <xref rid="Sec10" ref-type="sec">4</xref> resembles an integration of a separate mixing machine and an extruding machine. According to our perspective on PA, the Philips™ pasta machine resembles a highly integral design, which incorporates both overall modality and subsystem modality. Modality is leverage to allocate functions into one module with minimal system resources. However, it induces extra complexity in the design process.</p><sec id="Sec12"><title>System resource</title><p id="Par49">Chakrabarti and Singh (<xref ref-type="bibr" rid="CR3">2007</xref>) measure resource effectiveness by calculating the ratio between main functions and structures. Adopting this argument in modularity, the increase of functions on each module will benefit the product’s total resource effectiveness, which further results in light weight and compactness. Further, when modality is involved, this argument still appears to be valid, based on the comparison between the two pasta machines in Sect. <xref rid="Sec10" ref-type="sec">4</xref>.</p><p id="Par50">In addition, the minimal system resource also affects the specifications assigned to each module. Specifically, for multi-modal products, the minimal system resource is derived as a minimized envelope of function specifications through all the modes, because the requirements are distributed to different times during which the product is used differently. In other words, the function specifications are defined according to the worst-case scenario for each configuration (Haldaman and Parkinson <xref ref-type="bibr" rid="CR10">2010</xref>). In the pasta machine example, the motor needs to satisfy the relatively high torque required by the extruding function, instead of the sum of the mixing and extruding functions.</p></sec><sec id="Sec13"><title>Complexity</title><p id="Par51">Clarifying the function specifications is a complex process in designing a multi-modal product. This is because not only do the quantitative interactions between modules increase exponentially when more functions and technologies are integrated in one product, but also the reused modules interact differently in different modes.</p><p id="Par52">The complexity of a multi-modal product can be evaluated by examining its inter-module interactions in the DSM shown in Fig. <xref rid="Fig12" ref-type="fig">12</xref>. A generalized multi-modal product activates <inline-formula id="IEq1"><alternatives><mml:math id="IEq1_Math"><mml:mi>m</mml:mi></mml:math><tex-math id="IEq1_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$m$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq1.gif"/></alternatives></inline-formula> and <inline-formula id="IEq2"><alternatives><mml:math id="IEq2_Math"><mml:mi>n</mml:mi></mml:math><tex-math id="IEq2_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$n$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq2.gif"/></alternatives></inline-formula> modules in two modes, among which there are <inline-formula id="IEq3"><alternatives><mml:math id="IEq3_Math"><mml:mi>i</mml:mi></mml:math><tex-math id="IEq3_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq3.gif"/></alternatives></inline-formula> reused modules. As a result, the multi-modal product consists of <inline-formula id="IEq4"><alternatives><mml:math id="IEq4_Math"><mml:mrow><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:math><tex-math id="IEq4_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$m + n - i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq4.gif"/></alternatives></inline-formula> modules. The <inline-formula id="IEq5"><alternatives><mml:math id="IEq5_Math"><mml:mi>j</mml:mi></mml:math><tex-math id="IEq5_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$j$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq5.gif"/></alternatives></inline-formula> MMs are a subset of the <inline-formula id="IEq6"><alternatives><mml:math id="IEq6_Math"><mml:mi>i</mml:mi></mml:math><tex-math id="IEq6_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq6.gif"/></alternatives></inline-formula> reused modules. The generalized DSM is then divided in zones that indicate different degrees of inter-module interactions. Basically, the designer needs to settle down the weak interactions between the non-reused modules located in the <inline-formula id="IEq7"><alternatives><mml:math id="IEq7_Math"><mml:mrow><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>m</mml:mi><mml:mo>-</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:mfenced><mml:mo>×</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:mfenced></mml:mrow></mml:math><tex-math id="IEq7_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\left( {m - i} \right) \times \left( {n - i} \right)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq7.gif"/></alternatives></inline-formula> area on the corner. Furthermore, the <inline-formula id="IEq8"><alternatives><mml:math id="IEq8_Math"><mml:mrow><mml:mi>i</mml:mi><mml:mo>×</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>n</mml:mi><mml:mo>-</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:mfenced></mml:mrow></mml:math><tex-math id="IEq8_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i \times \left( {n - i} \right)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq8.gif"/></alternatives></inline-formula> and <inline-formula id="IEq9"><alternatives><mml:math id="IEq9_Math"><mml:mrow><mml:mi>i</mml:mi><mml:mo>×</mml:mo><mml:mfenced close=")" open="(" separators=""><mml:mrow><mml:mi>m</mml:mi><mml:mo>-</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:mfenced></mml:mrow></mml:math><tex-math id="IEq9_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i \times \left( {m - i} \right)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq9.gif"/></alternatives></inline-formula> areas indicate the medium interactions between the reused modules and the non-reused modules. This means that the reused modules must interact with different groups of non-reused modules. Next, the <inline-formula id="IEq10"><alternatives><mml:math id="IEq10_Math"><mml:mrow><mml:mi>i</mml:mi><mml:mo>×</mml:mo><mml:mi>i</mml:mi></mml:mrow></mml:math><tex-math id="IEq10_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i \times i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq10.gif"/></alternatives></inline-formula> area, especially in the <inline-formula id="IEq11"><alternatives><mml:math id="IEq11_Math"><mml:mrow><mml:mi>j</mml:mi><mml:mo>×</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:math><tex-math id="IEq11_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$j \times j$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="163_2016_221_Article_IEq11.gif"/></alternatives></inline-formula> area, contains strong interactions among the reused modules. This is because the interactions between reused modules are intensified by the extra considerations about modality, which may lead to a qualitative search for interactions in many aspects. The designer has to examine combinations of modes and prevent potential conflicts.<fig id="Fig12"><label>Fig. 12</label><caption xml:lang="en"><p>The DSM for a generalized multi-modal product</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig12_HTML.gif" id="MO12"/></fig></p><p id="Par53">Figure <xref rid="Fig13" ref-type="fig">13</xref> shows the five major modules of a Philips™ pasta machine. Each mode activates four of them, among which three modules are reused by both modes. As a subset of the reused modules, the motor and extruder are multi-modal. In Fig. <xref rid="Fig14" ref-type="fig">14</xref>, the interactions in the pasta machine are presented in a modified DSM, whose elaboration will be introduced in detail in Sect. <xref rid="Sec19" ref-type="sec">6.2</xref>. Being two non-reused modules separated in two modes, the water dispenser is decoupled from the die. Therefore, scarcely any modification is required on these two modules. As an interaction between a reused module and non-reused modules, the container needs minimal modification to accommodate the die and the water dispenser. In the central area, where the strong interactions among reused modules are labeled, the container needs to have a special form that best facilitates the mixing and extruding operations. In particular, between the motor and mixer–extruder, their interactions are highly coupled with their modality. In addition to calculating the sufficient torque that satisfies each mode of the mixer–extruder, it is also essential to evaluate whether there is conflict or unwanted effect when the mixer or extruder is rotated to the unintended direction.<fig id="Fig13"><label>Fig. 13</label><caption xml:lang="en"><p>The major modules of Philips™ pasta machine</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig13_HTML.gif" id="MO13"/></fig><fig id="Fig14"><label>Fig. 14</label><caption xml:lang="en"><p>The DSM of a Philips™ pasta machine</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig14_HTML.gif" id="MO14"/></fig></p></sec></sec><sec id="Sec14"><title>Designing multi-modal modules</title><p id="Par54">The previous sections have presented the descriptive model and the successful design solutions. To involve the modality thinking in design processes, a modality design methodology representing the prescriptive model would be ultimately sought. The central difficulty in designing multi-modal PA is to capture the MMs from an FM. In this section, two design techniques are proposed for FMM and TMM capture separately. The main idea is to motivate reconfigurations in modules on the basis of multiple functions and technologies.</p><p id="Par55">Figure <xref rid="Fig15" ref-type="fig">15</xref> positions the two techniques in the PA design process with the metaphor of a production line. On the basic level, the DSM-based methods, catalogs, and designer’s knowledge and experiences can support this process. The modular heuristics (Stone et al. <xref ref-type="bibr" rid="CR28">2000</xref>) and the function-based approach for product integration (Kalyanasundaram and Lewis <xref ref-type="bibr" rid="CR14">2014</xref>) can sufficiently achieve multiple functions, but they neglect consideration of modality. In this section, the FMM capture technique contains three revised heuristics that focus on reconfigurations for multiple functions. The TMM capture technique contains a four-step method that deals with function specifications caused by the reconfigurations.<fig id="Fig15"><label>Fig. 15</label><caption xml:lang="en"><p>The proposed techniques positioned in the PA design process</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig15_HTML.gif" id="MO15"/></fig></p><sec id="Sec15"><title>Functional multi-modal module capture</title><p id="Par56">The modular heuristics (Stone et al. <xref ref-type="bibr" rid="CR28">2000</xref>) identify three types of features that promote multiple-to-one mapping from functions to a module: dominant flow, branching flows, and conversion–transmission. Kalyanasundaram and Lewis (<xref ref-type="bibr" rid="CR14">2014</xref>) proposed a heuristic to capture multi-functional structure (mentioned as “function sharing”) from a <italic>similarity</italic> metric by Hirtz et al. (<xref ref-type="bibr" rid="CR11">2002</xref>). Although the abovementioned heuristics do not mention modality in fulfilling the multiple functions, they offered valuable hints in capturing the multi-functional opportunities. The modular heuristics advocate identifying serial and parallel flows, while the function similarity heuristic further decreases the search area for these opportunities.</p><p id="Par57">Below, the three heuristics are proposed to locate potential FMMs efficiently. The explanations of the three heuristics will start from a conventional FM. One reason for choosing the conventional FM is that it has wider application than the newly proposed RFMs. Another reason is that modality is not always identifiable from an FM. In some cases, modality is identified only when the designer finds that having multiple modes is a part of the working principle.</p><sec id="Sec16"><title>Flow segmentation</title><p id="Par58">The designer looks for opportunities to fulfill multiple <italic>serial</italic> functions along a flow with an FMM. This heuristic is especially applicable to systems whose operations are arranged according to specific procedures. As the left part of Fig. <xref rid="Fig16" ref-type="fig">16</xref> shows, the designer realizes a working principle that can embody Functions F1 and F2 in the MM M1. As a result, the <italic>continuous</italic> flow is <italic>segmented</italic> in sequential operations distributed in the two modes.<fig id="Fig16"><label>Fig. 16</label><caption xml:lang="en"><p>PA created by flow segmentation</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig16_HTML.gif" id="MO16"/></fig></p><p id="Par59">The mixer–extruder module on the Philips™ pasta machine resembles such implementation on a material flow, shown in the right part of Fig. <xref rid="Fig16" ref-type="fig">16</xref>. Considering that the two functions can be undertaken sequentially, the designer elaborates the RFM. By doing this, the continuous material flow is segmented in two sequential operations. In the next step, the working principle of using different rotational directions for the two operations can ideally allocate the two functions in a common module. As a result, the PA design of the mixer–extruder exemplifies segmenting a continuous material flow into two sequential operations fulfilled by an FMM.</p><p id="Par60">The initial FM of the mixing and extruding functions in Fig. <xref rid="Fig16" ref-type="fig">16</xref> is neutral with respect to implementing modality in their solution, since the FM can also indicate an imaginary production that accomplishes the two functions simultaneously. However, in some cases, the FM already suggests multiple modes, such as the solar light example. The designer can start from an RFM and look for opportunities of integrating multiple functions across modes.</p><p id="Par61">The flow segmentation heuristic introduced above shares the philosophy with the process and event modeling methodology by Nagel et al. (<xref ref-type="bibr" rid="CR19">2011</xref>). Their methodology also suggests decomposing a process into segmented events, each of which contains a unique FM. Therefore, Nagel et al.’s methodology is more applicable for designing changeable configurations in an overall system scale, whereas the flow segmentation heuristic targets functions and modules in an elementary system scale.</p></sec><sec id="Sec17"><title>Flow junction</title><p id="Par62">The designer looks for opportunities to fulfill multiple functions in <italic>parallel flows</italic> with an FMM. As the module M1 and its functions F11 and F12 show in the left part of Fig. <xref rid="Fig17" ref-type="fig">17</xref>, the MM provides a unique function to each of the <italic>parallel</italic> flows. The flow junction thus joins multiple flows to the same module. Umeda et al. (<xref ref-type="bibr" rid="CR32">1990</xref>) defines functions as “behaviors abstracted by humans through recognition of the behavior in order to utilize it”. This heuristic motivates the exploitation of secondary functions among the infinite behaviors of a physical component. Again, the functions must be allocated to different times.<fig id="Fig17"><label>Fig. 17</label><caption xml:lang="en"><p>PA created by flow junction</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig17_HTML.gif" id="MO17"/></fig></p><p id="Par63">The right part of Fig. <xref rid="Fig17" ref-type="fig">17</xref> exemplifies this heuristic with the PA of a single boiler espresso machine. The water boiler module either heats or vaporizes hot water for the branched flows. In the physical configuration layout, the boiler is situated on the junction of two flows.</p></sec><sec id="Sec18"><title>Flow reversion</title><p id="Par64">This heuristic suggests the search for one or a series of FMMs on a reversible flow. The left part of Fig. <xref rid="Fig18" ref-type="fig">18</xref> indicates that the flow from A to B is reversed. Therefore, the system can be divided into Mode 1 and Mode 2. The resultant FMM module allocates the opposite functions into two modes. In the example shown in the right part of Fig. <xref rid="Fig18" ref-type="fig">18</xref>, the motor/generator is created as an FMM (which can be arguably regarded as a TMM, if the identification of a function excludes the manipulated flow). The flow reversion also identifies the battery as an FMM.<fig id="Fig18"><label>Fig. 18</label><caption xml:lang="en"><p>PA created by flow reversion</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig18_HTML.gif" id="MO18"/></fig></p></sec></sec><sec id="Sec19"><title>Technological multi-modal module capture</title><p id="Par65">The input of the TMM capture technique is PA with captured FMMs. At this maturity, the designer can outline the functions of each module before and after mode transitions. However, the function specifications still need clarification. In particular, FMMs often exert varied function specifications to the other modules due to the modality. In cases in which a module needs to accommodate the variations actively, a TMM needs to be elaborated.</p><p id="Par66">A systematic investigation of all the varied function specifications relies on establishing a modality design structure matrix (MDSM). This kind of DSM is proposed to represent efficiently the modality of both products and modules. The idea is to divide each MM into separate items with respect to its modes. Hence, the interactions related to an MM are specified to each mode. In Fig. <xref rid="Fig19" ref-type="fig">19</xref>, the generalized technique, including the elaboration of an MDSM, is introduced in four steps. The generalized dual-mode product has five modules. As the preparation of the four steps, the reused modules M1, M2, and M3, which have relatively strong interactions, are placed together.<fig id="Fig19"><label>Fig. 19</label><caption xml:lang="en"><p>The generalized method for elaborating an MDSM</p></caption><graphic specific-use="web" mime-subtype="GIF" xlink:href="MediaObjects/163_2016_221_Fig19_HTML.gif" id="MO19"/></fig></p><p id="Par67">Step 1 suggests dividing the modes of M1 into separate rows and columns labeled with M1S1 and M1S2. In Step 2, the increased rows and columns urge a thorough review on the interactions between the FMM and the other modules. For example, M2 may have different interactions with M1S1 and M1S2. Similar comparisons should be undertaken with M3, M4, and M5. Since these comparisons may involve a broad range of practical issues, it is difficult to find a generalized metric to fill in the cells. Despite the vacant metric, the comparisons should lead the solution to two kinds of cases.<list list-type="bullet"><list-item><p id="Par68"><italic>Mitigated solution</italic> A mitigated solution enables a module to interact with an FMM without a reconfiguration. In the Philips™ pasta machine example, the interaction between the mixer–extruder and the container differs in its two modes: the mixing function requires a horizontal cylindrical container; the extruding function requires a vertical tapered container. The mitigated solution is to elaborate special shapes for both modules, so that the container itself does not need to change.</p></list-item><list-item><p id="Par69"><italic>TMM</italic> In cases of significantly varied specifications that cannot be mitigated, varied specifications will be applied to the module in different modes. Therefore, a TMM is captured in the MDSM. Back to the pasta machine example, the mixer–extruder requires two-directional rotations from the motor. To resolve the conflict in the rotational direction, the motor is captured as a TMM.</p></list-item></list></p><p id="Par70">Due to the capture of TMMs, the MDSM needs another round of division and review, shown in Step 3 and Step 4. Therefore, the two steps may be conducted in iterations if new TMMs are captured later.</p><p id="Par71">The captured TMMs require active changes in their configurations. In elaborating the configuration states for a TMM, we propose two degrees of reconfiguration:<list list-type="bullet"><list-item><p id="Par72"><italic>Set</italic>-<italic>point adjustment</italic> The TMM maintains the same principle solution but changes one or a few parameters, such as the direction and speed of a motor.</p></list-item><list-item><p id="Par73"><italic>Alternative principle</italic> When a principle cannot satisfy largely diverse function specifications, an additional principle needs to be implemented as a new technological mode. For instance, when a conventional combustion engine is required to improve its fuel efficiency at low speed, an alternative principle of using electric drive is added to the drive train. The integrated drive train becomes a TMM to fulfill the same function of providing kinetic energy.</p></list-item></list></p></sec></sec><sec id="Sec20" sec-type="conclusions"><title>Conclusion</title><p id="Par74">This paper draws attention to product modality in PA design. In addition to the explanation of how multiple modes influence the relationship between functions and modules, the major contribution is the investigation of modality in a system hierarchy. For this reason, the research work especially focuses on how modality is propagated in PA. In addition, the revised sharing schemes between functions, technologies, and modes are a great contribution to promote and evaluate integral design.</p><p id="Par75">The main challenge in designing multi-modal products is to discover opportunities for structure sharing. Nevertheless, this challenge is pervasive and chronic in most design problems, since simple and highly functional design solutions are always desirable. The models and methods proposed in this paper logically explain the successful solutions and help designers to locate potential successful solutions by means of capturing FMMs and TMMs. Thereafter, designers’ experience and intuitions play an important role in searching for innovative ideas.</p><p id="Par76">The modularity mentioned throughout this paper still lies on the conceptual side, whereas practical issues in modularity such as manufacturability, product portfolio, and product life cycle are not intersected. This paper together with our previous paper (Liu et al. <xref ref-type="bibr" rid="CR16">2015</xref>) provides theoretical support to describe and elaborate changeable configurations. From the viewpoint of building a systematic theory about modality, applying modality to existing design models and methodologies gives a unique view on product design.</p><p id="Par77">Despite the above achievements, a few issues mentioned in this paper need further investigation:<list list-type="bullet"><list-item><p id="Par78">The property of modality needs quantification. It is claimed that modality enables a system to achieve functions with minimal system resources by segmenting functions in modes and distributing the requirements by time. However, calculation of the minimized envelope of function specifications requires specific knowledge. We have not clarified a metric to guide the work.</p></list-item><list-item><p id="Par79">The proposed MDSM method shows considerable potential in finding successful solutions. How might designers borrow the existing DSM-based modular design methods to enhance modality design? This reveals a channel by which modality can better connect to the extensive studies in product modularity.</p></list-item><list-item><p id="Par80">The proposed two techniques are still hypothetical. Although they are derived from logical reasoning and the examples of the solar light and the pasta machine, their validation requires extensive empirical studies in future.</p></list-item></list></p></sec></body><back><ref-list id="Bib1"><title>References</title><ref-list><ref id="CR1"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>AlGeddawy</surname><given-names>T</given-names></name><name><surname>ElMaraghy</surname><given-names>H</given-names></name></person-group><article-title xml:lang="en">Optimum granularity level of modular product design architecture</article-title><source>CIRP Ann Manuf Technol</source><year>2013</year><volume>62</volume><issue>1</issue><fpage>151</fpage><lpage>154</lpage><pub-id pub-id-type="doi">10.1016/j.cirp.2013.03.118</pub-id></mixed-citation></ref><ref id="CR2"><mixed-citation publication-type="other">Chakrabarti A (2001) Sharing in design: categories, importance and issues (trans), pp 563–570</mixed-citation></ref><ref id="CR3"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chakrabarti</surname><given-names>A</given-names></name><name><surname>Singh</surname><given-names>V</given-names></name></person-group><article-title xml:lang="en">A method for structure sharing to enhance resource effectiveness</article-title><source>J Eng Des</source><year>2007</year><volume>18</volume><issue>1</issue><fpage>73</fpage><lpage>91</lpage><pub-id pub-id-type="doi">10.1080/09544820600643766</pub-id></mixed-citation></ref><ref id="CR4"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dahmus</surname><given-names>JB</given-names></name><name><surname>Gonzalez-Zugasti</surname><given-names>JP</given-names></name><name><surname>Otto</surname><given-names>KN</given-names></name></person-group><article-title xml:lang="en">Modular product architecture</article-title><source>Des Stud</source><year>2001</year><volume>22</volume><issue>5</issue><fpage>409</fpage><lpage>424</lpage><pub-id pub-id-type="doi">10.1016/S0142-694X(01)00004-7</pub-id></mixed-citation></ref><ref id="CR5"><mixed-citation publication-type="other">Empire Sweden AB (2015) Instructions C3 automatic pasta machine. <ext-link xlink:href="http://c3.se/products/automatic-pasta-machine/" ext-link-type="uri">http://c3.se/products/automatic-pasta-machine/</ext-link>. Accessed 13 Dec 2015</mixed-citation></ref><ref id="CR6"><mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Eppinger</surname><given-names>SD</given-names></name><name><surname>Browning</surname><given-names>TR</given-names></name></person-group><source>Design structure matrix methods and applications</source><year>2012</year><publisher-loc>Cambridge</publisher-loc><publisher-name>MIT Press</publisher-name></mixed-citation></ref><ref id="CR7"><mixed-citation publication-type="other">Ferguson S, Siddiqi A, Lewis K, de Weck OL (2007) Flexible and reconfigurable systems: nomenclature and review (trans: American Society of Mechanical Engineers), pp 249–263</mixed-citation></ref><ref id="CR8"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gershenson</surname><given-names>JK</given-names></name><name><surname>Prasad</surname><given-names>GJ</given-names></name><name><surname>Zhang</surname><given-names>Y</given-names></name></person-group><article-title xml:lang="en">Product modularity: measures and design methods</article-title><source>J Eng Des</source><year>2004</year><volume>15</volume><issue>1</issue><fpage>33</fpage><lpage>51</lpage><pub-id pub-id-type="doi">10.1080/0954482032000101731</pub-id></mixed-citation></ref><ref id="CR9"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gu</surname><given-names>P</given-names></name><name><surname>Sosale</surname><given-names>S</given-names></name></person-group><article-title xml:lang="en">Product modularization for life cycle engineering</article-title><source>Robot Comput Integr Manuf</source><year>1999</year><volume>15</volume><issue>5</issue><fpage>387</fpage><lpage>401</lpage><pub-id pub-id-type="doi">10.1016/S0736-5845(99)00049-6</pub-id></mixed-citation></ref><ref id="CR10"><mixed-citation publication-type="other">Haldaman J, Parkinson MB (2010) Reconfigurable products and their means of reconfiguration (trans: American Society of Mechanical Engineers), pp 219–228</mixed-citation></ref><ref id="CR11"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hirtz</surname><given-names>J</given-names></name><name><surname>Stone</surname><given-names>RB</given-names></name><name><surname>McAdams</surname><given-names>DA</given-names></name><name><surname>Szykman</surname><given-names>S</given-names></name><name><surname>Wood</surname><given-names>KL</given-names></name></person-group><article-title xml:lang="en">A functional basis for engineering design: reconciling and evolving previous efforts</article-title><source>Res Eng Des</source><year>2002</year><volume>13</volume><issue>2</issue><fpage>65</fpage><lpage>82</lpage></mixed-citation></ref><ref id="CR12"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Huang</surname><given-names>C-C</given-names></name><name><surname>Kusiak</surname><given-names>A</given-names></name></person-group><article-title xml:lang="en">Modularity in design of products and systems</article-title><source>IEEE Trans Syst Man Cybern A Syst Hum</source><year>1998</year><volume>28</volume><issue>1</issue><fpage>66</fpage><lpage>77</lpage><pub-id pub-id-type="doi">10.1109/3468.650323</pub-id></mixed-citation></ref><ref id="CR13"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jiao</surname><given-names>JR</given-names></name><name><surname>Simpson</surname><given-names>TW</given-names></name><name><surname>Siddique</surname><given-names>Z</given-names></name></person-group><article-title xml:lang="en">Product family design and platform-based product development: a state-of-the-art review</article-title><source>J Intell Manuf</source><year>2007</year><volume>18</volume><issue>1</issue><fpage>5</fpage><lpage>29</lpage><pub-id pub-id-type="doi">10.1007/s10845-007-0003-2</pub-id></mixed-citation></ref><ref id="CR14"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kalyanasundaram</surname><given-names>V</given-names></name><name><surname>Lewis</surname><given-names>K</given-names></name></person-group><article-title xml:lang="en">A function based approach for product integration</article-title><source>J Mech Des</source><year>2014</year><volume>136</volume><issue>4</issue><fpage>041002</fpage><pub-id pub-id-type="doi">10.1115/1.4026032</pub-id></mixed-citation></ref><ref id="CR15"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kroll</surname><given-names>E</given-names></name></person-group><article-title xml:lang="en">Design theory and conceptual design: contrasting functional decomposition and morphology with parameter analysis</article-title><source>Res Eng Des</source><year>2013</year><volume>24</volume><issue>2</issue><fpage>165</fpage><lpage>183</lpage><pub-id pub-id-type="doi">10.1007/s00163-012-0149-6</pub-id></mixed-citation></ref><ref id="CR16"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Liu</surname><given-names>C</given-names></name><name><surname>Hildre</surname><given-names>HP</given-names></name><name><surname>Zhang</surname><given-names>H</given-names></name><name><surname>Rølvåg</surname><given-names>T</given-names></name></person-group><article-title xml:lang="en">Conceptual design of multi-modal products</article-title><source>Res Eng Des</source><year>2015</year><volume>26</volume><issue>3</issue><fpage>219</fpage><lpage>234</lpage><pub-id pub-id-type="doi">10.1007/s00163-015-0193-0</pub-id></mixed-citation></ref><ref id="CR17"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mikkola</surname><given-names>JH</given-names></name></person-group><article-title xml:lang="en">Capturing the degree of modularity embedded in product architectures</article-title><source>J Prod Innov Manag</source><year>2006</year><volume>23</volume><issue>2</issue><fpage>128</fpage><lpage>146</lpage><pub-id pub-id-type="other" assigning-authority="American Mathematical Society">2234257</pub-id><pub-id pub-id-type="doi">10.1111/j.1540-5885.2006.00188.x</pub-id></mixed-citation></ref><ref id="CR18"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mikkola</surname><given-names>JH</given-names></name><name><surname>Gassmann</surname><given-names>O</given-names></name></person-group><article-title xml:lang="en">Managing modularity of product architectures: toward an integrated theory</article-title><source>IEEE Trans Eng Manag</source><year>2003</year><volume>50</volume><issue>2</issue><fpage>204</fpage><lpage>218</lpage><pub-id pub-id-type="doi">10.1109/TEM.2003.810826</pub-id></mixed-citation></ref><ref id="CR19"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nagel</surname><given-names>RL</given-names></name><name><surname>Hutcheson</surname><given-names>R</given-names></name><name><surname>McAdams</surname><given-names>DA</given-names></name><name><surname>Stone</surname><given-names>R</given-names></name></person-group><article-title xml:lang="en">Process and event modelling for conceptual design</article-title><source>J Eng Des</source><year>2011</year><volume>22</volume><issue>3</issue><fpage>145</fpage><lpage>164</lpage><pub-id pub-id-type="doi">10.1080/09544820903099575</pub-id></mixed-citation></ref><ref id="CR20"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Olewnik</surname><given-names>A</given-names></name><name><surname>Brauen</surname><given-names>T</given-names></name><name><surname>Ferguson</surname><given-names>S</given-names></name><name><surname>Lewis</surname><given-names>K</given-names></name></person-group><article-title xml:lang="en">A framework for flexible systems and its implementation in multiattribute decision making</article-title><source>J Mech Des</source><year>2004</year><volume>126</volume><issue>3</issue><fpage>412</fpage><lpage>419</lpage><pub-id pub-id-type="doi">10.1115/1.1701874</pub-id></mixed-citation></ref><ref id="CR21"><mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Otto</surname><given-names>K</given-names></name><name><surname>Wood</surname><given-names>K</given-names></name></person-group><source>Product design: techniques in reverse engineering and new product development</source><year>2001</year><publisher-loc>Upper Saddle River</publisher-loc><publisher-name>Prentice Hall</publisher-name></mixed-citation></ref><ref id="CR22"><mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Pahl</surname><given-names>G</given-names></name><name><surname>Beitz</surname><given-names>W</given-names></name></person-group><source>Engineering design: a systematic approach</source><year>2013</year><publisher-loc>Berlin</publisher-loc><publisher-name>Springer</publisher-name></mixed-citation></ref><ref id="CR23"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Park</surname><given-names>J</given-names></name><name><surname>Shin</surname><given-names>D</given-names></name><name><surname>Insun</surname><given-names>P</given-names></name><name><surname>Hyemi</surname><given-names>H</given-names></name></person-group><article-title xml:lang="en">A product platform concept development method</article-title><source>J Eng Des</source><year>2008</year><volume>19</volume><issue>6</issue><fpage>515</fpage><lpage>532</lpage><pub-id pub-id-type="doi">10.1080/09544820802043583</pub-id></mixed-citation></ref><ref id="CR24"><mixed-citation publication-type="other">Philips Electronics (2015) User manual Philips Avance Collection Pasta maker. <ext-link xlink:href="http://www.usa.philips.com/c-p/HR2357_05/avance-collection-pasta-maker-with-one-push-cleaning-tool/support" ext-link-type="uri">http://www.usa.philips.com/c-p/HR2357_05/avance-collection-pasta-maker-with-one-push-cleaning-tool/support</ext-link>. Accessed 13 Dec 2015</mixed-citation></ref><ref id="CR25"><mixed-citation publication-type="other">Schultz J, Sen C, Caldwell B, Mathieson J, Summers JD, Mocko GM (2010) Limitations to function structures: a case study in morphing airfoil design (trans: American Society of Mechanical Engineers), pp 405–417</mixed-citation></ref><ref id="CR26"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Siddiqi</surname><given-names>A</given-names></name><name><surname>de Weck</surname><given-names>OL</given-names></name></person-group><article-title xml:lang="en">Modeling methods and conceptual design principles for reconfigurable systems</article-title><source>J Mech Des</source><year>2008</year><volume>130</volume><issue>10</issue><fpage>101102</fpage><pub-id pub-id-type="doi">10.1115/1.2965598</pub-id></mixed-citation></ref><ref id="CR27"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Singh</surname><given-names>V</given-names></name><name><surname>Skiles</surname><given-names>SM</given-names></name><name><surname>Krager</surname><given-names>JE</given-names></name><name><surname>Wood</surname><given-names>KL</given-names></name><name><surname>Jensen</surname><given-names>D</given-names></name><name><surname>Sierakowski</surname><given-names>R</given-names></name></person-group><article-title xml:lang="en">Innovations in design through transformation: a fundamental study of transformation principles</article-title><source>J Mech Des</source><year>2009</year><volume>131</volume><issue>8</issue><fpage>081010</fpage><pub-id pub-id-type="doi">10.1115/1.3125205</pub-id></mixed-citation></ref><ref id="CR28"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stone</surname><given-names>RB</given-names></name><name><surname>Wood</surname><given-names>KL</given-names></name><name><surname>Crawford</surname><given-names>RH</given-names></name></person-group><article-title xml:lang="en">A heuristic method for identifying modules for product architectures</article-title><source>Des Stud</source><year>2000</year><volume>21</volume><issue>1</issue><fpage>5</fpage><lpage>31</lpage><pub-id pub-id-type="doi">10.1016/S0142-694X(99)00003-4</pub-id></mixed-citation></ref><ref id="CR29"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ulrich</surname><given-names>K</given-names></name></person-group><article-title xml:lang="en">The role of product architecture in the manufacturing firm</article-title><source>Res Policy</source><year>1995</year><volume>24</volume><issue>3</issue><fpage>419</fpage><lpage>440</lpage><pub-id pub-id-type="other" assigning-authority="American Mathematical Society">1324518</pub-id><pub-id pub-id-type="doi">10.1016/0048-7333(94)00775-3</pub-id></mixed-citation></ref><ref id="CR30"><mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Ulrich</surname><given-names>KT</given-names></name><name><surname>Eppinger</surname><given-names>SD</given-names></name></person-group><source>Product design and development</source><year>2003</year><publisher-loc>Noida</publisher-loc><publisher-name>Tata McGraw-Hill Education</publisher-name></mixed-citation></ref><ref id="CR31"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ulrich</surname><given-names>KT</given-names></name><name><surname>Seering</surname><given-names>WP</given-names></name></person-group><article-title xml:lang="en">Function sharing in mechanical design</article-title><source>Des Stud</source><year>1990</year><volume>11</volume><issue>4</issue><fpage>223</fpage><lpage>234</lpage><pub-id pub-id-type="doi">10.1016/0142-694X(90)90041-A</pub-id></mixed-citation></ref><ref id="CR32"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Umeda</surname><given-names>Y</given-names></name><name><surname>Takeda</surname><given-names>H</given-names></name><name><surname>Tomiyama</surname><given-names>T</given-names></name><name><surname>Yoshikawa</surname><given-names>H</given-names></name></person-group><article-title xml:lang="en">Function, behaviour, and structure</article-title><source>Applications of artificial intelligence in engineering V</source><year>1990</year><volume>1</volume><fpage>177</fpage><lpage>194</lpage></mixed-citation></ref><ref id="CR33"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yu</surname><given-names>JS</given-names></name><name><surname>Gonzalez-Zugasti</surname><given-names>JP</given-names></name><name><surname>Otto</surname><given-names>KN</given-names></name></person-group><article-title xml:lang="en">Product architecture definition based upon customer demands</article-title><source>J Mech Des</source><year>1999</year><volume>121</volume><issue>3</issue><fpage>329</fpage><lpage>335</lpage><pub-id pub-id-type="doi">10.1115/1.2829464</pub-id></mixed-citation></ref></ref-list></ref-list><fn-group><fn id="Fn1"><label>1</label><p id="Par4">This definition is different from the modality in human–machine interaction, in which a modality means a single communication channel between human and machine, such as speech, gesture, keyboard, mouse, and so on.</p></fn><fn id="Fn2"><label>2</label><p id="Par23">The reuse caused by modality is viewed during an individual product’s operation stage. It differentiates itself from the “reuse” of modules among family products and the “reuse” of components for recycling.</p></fn></fn-group></back></article></records><facets><facet name="subject"><facet-value count="1">Computer-Aided Engineering (CAD, CAE) and Design</facet-value><facet-value count="1">Engineering</facet-value><facet-value count="1">Engineering Design</facet-value></facet><facet name="keyword"><facet-value count="1">Modality</facet-value><facet-value count="1">Mode</facet-value><facet-value count="1">Modularity</facet-value><facet-value count="1">Product architecture</facet-value><facet-value count="1">Reconfigurable product</facet-value></facet><facet name="pub"><facet-value count="1">Research in Engineering Design</facet-value></facet><facet name="year"><facet-value count="1">2016</facet-value></facet><facet name="country"><facet-value count="1">Norway</facet-value></facet><facet name="type"><facet-value count="1">Journal</facet-value></facet></facets></response>
