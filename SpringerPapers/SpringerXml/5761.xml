<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="/resources/spdi-openaccess-jats.xsl"?>
<!DOCTYPE response [
	
<!ENTITY % article SYSTEM "http://jats.nlm.nih.gov/archiving/1.2/JATS-archivearticle1.dtd">
<!ENTITY % book-part-wrapper SYSTEM "http://jats.nlm.nih.gov/extensions/bits/2.0/BITS-book2.dtd">
	]><response><apiMessage>This XML was provided by Springer Nature</apiMessage><query>doi:10.1186/s42162-022-00231-6</query><apiKey>87ba7cb21f89ce78154df796840621f4</apiKey><result><total>1</total><start>1</start><pageLength>2</pageLength><recordsDisplayed>1</recordsDisplayed></result><records><article dtd-version="1.2" article-type="review-article" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><front><journal-meta><journal-id journal-id-type="publisher-id">42162</journal-id><journal-title-group><journal-title>Energy Informatics</journal-title><abbrev-journal-title abbrev-type="publisher">Energy Inform</abbrev-journal-title></journal-title-group><issn pub-type="epub">2520-8942</issn><publisher><publisher-name>Springer International Publishing</publisher-name><publisher-loc>Cham</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">s42162-022-00231-6</article-id><article-id pub-id-type="manuscript">231</article-id><article-id pub-id-type="doi">10.1186/s42162-022-00231-6</article-id><article-categories><subj-group subj-group-type="heading"><subject>Review</subject></subj-group></article-categories><title-group><article-title xml:lang="en">A comparison study of co-simulation frameworks for multi-energy systems: the scalability problem</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes" id="Au1"><name><surname>Barbierato</surname><given-names>Luca</given-names></name><address><email>luca.barbierato@polito.it</email></address><xref ref-type="aff" rid="Aff1">1</xref><xref ref-type="corresp" rid="IDs42162022002316_cor1">a</xref></contrib><contrib contrib-type="author" id="Au2"><name><surname>Rando Mazzarino</surname><given-names>Pietro</given-names></name><address><email>pietro.randomazzarino@polito.it</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author" id="Au3"><name><surname>Montarolo</surname><given-names>Marco</given-names></name><address><email>marco.montarolo@studenti.polito.it</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author" id="Au4"><name><surname>Macii</surname><given-names>Alberto</given-names></name><address><email>alberto.macii@polito.it</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author" id="Au5"><name><surname>Patti</surname><given-names>Edoardo</given-names></name><address><email>edoardo.patti@polito.it</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author" id="Au6"><name><surname>Bottaccioli</surname><given-names>Lorenzo</given-names></name><address><email>lorenzo.bottaccioli@polito.it</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.4800.c</institution-id><institution-id institution-id-type="ISNI">0000 0004 1937 0343</institution-id><institution content-type="org-division">Interuniversity Department of Regional and Urban Studies and Planning</institution><institution content-type="org-name">Politecnico di Torino</institution></institution-wrap><addr-line content-type="street">Corso Duca degli Abruzzi 24</addr-line><addr-line content-type="postcode">10129</addr-line><addr-line content-type="city">Turin</addr-line><country country="IT">Italy</country></aff><aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="GRID">grid.4800.c</institution-id><institution-id institution-id-type="ISNI">0000 0004 1937 0343</institution-id><institution content-type="org-division">Department of Control and Computer Engineeing</institution><institution content-type="org-name">Politecnico di Torino</institution></institution-wrap><addr-line content-type="street">Corso Duca degli Abruzzi 24</addr-line><addr-line content-type="postcode">10129</addr-line><addr-line content-type="city">Turin</addr-line><country country="IT">Italy</country></aff></contrib-group><author-notes><corresp id="IDs42162022002316_cor1"><label>a</label><email>luca.barbierato@polito.it</email></corresp></author-notes><pub-date date-type="pub" publication-format="electronic"><day>21</day><month>12</month><year>2022</year></pub-date><pub-date date-type="collection" publication-format="electronic"><month>12</month><year>2022</year></pub-date><volume>5</volume><issue seq="12">Suppl 4</issue><issue-title>Proceedings of the Energy Informatics.Academy Conference 2022 (EI.A 2022)</issue-title><issue-sponsor>Publication of this supplement was funded by SDU – Center for Energy Informatics, University of Southern Denmark. The articles have undergone the journal's standard peer review process for supplements. Supplement Editors did not handle peer review on any article that they co-authored. The Supplement Editors declare that they have no other competing interests.</issue-sponsor><elocation-id>53</elocation-id><history><date date-type="registration"><day>11</day><month>10</month><year>2022</year></date><date date-type="online"><day>21</day><month>12</month><year>2022</year></date></history><permissions><copyright-statement content-type="compact">© The Author(s) 2022</copyright-statement><copyright-year>2022</copyright-year><copyright-holder>The Author(s)</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link xlink:href="http://creativecommons.org/licenses/by/4.0/" ext-link-type="uri">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p></license></permissions><abstract xml:lang="en" id="Abs1"><title>Abstract</title><p id="Par1">The transition to a low-carbon society will completely change the structure of energy systems from a standalone hierarchical centralised vision to cooperative and distributed Multi-Energy Systems. The analysis of these complex systems requires the collaboration of researchers from different disciplines in the energy, ICT, social, economic, and political sectors. Combining such disparate disciplines into a single tool for modeling and analyzing such a complex environment as a Multi-Energy System requires tremendous effort. Researchers have overcome this effort by using co-simulation techniques that give the possibility of integrating existing domain-specific simulators in a single environment. Co-simulation frameworks, such as Mosaik and HELICS, have been developed to ease such integration. In this context, an additional challenge is the different temporal and spatial scales that are involved in the real world and that must be addressed during co-simulation. In particular, the huge number of heterogeneous actors populating the system makes it difficult to represent the system as a whole. In this paper, we propose a comparison of the scalability performance of two major co-simulation frameworks (i.e. HELICS and Mosaik) and a particular implementation of a well-known multi-agent systems library (i.e. AIOMAS). After describing a generic co-simulation framework infrastructure and its related challenges in managing a distributed co-simulation environment, the three selected frameworks are introduced and compared with each other to highlight their principal structure. Then, the scalability problem of co-simulation frameworks is introduced presenting four benchmark configurations to test their ability to scale in terms of a number of running instances. To carry out this comparison, a simplified multi-model energy scenario was used as a common testing environment. This work helps to understand which of the three frameworks and four configurations to select depending on the scenario to analyse. Experimental results show that a Multi-processing configuration of HELICS reaches the best performance in terms of KPIs defined to assess the scalability among the co-simulation frameworks.</p></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Co-simulation framework</kwd><kwd>Scalability</kwd><kwd>Mosaik</kwd><kwd>HELICS</kwd><kwd>AIOMAS</kwd></kwd-group><conference><conf-name>Energy Informatics.Academy Conference 2022 (EI.A 2022)</conf-name><conf-loc>Vejle, Denmark</conf-loc><conf-date>24-25 August 2022</conf-date></conference><custom-meta-group><custom-meta><meta-name>publisher-imprint-name</meta-name><meta-value>Springer</meta-value></custom-meta><custom-meta><meta-name>volume-issue-count</meta-name><meta-value>1</meta-value></custom-meta><custom-meta><meta-name>issue-article-count</meta-name><meta-value>28</meta-value></custom-meta><custom-meta><meta-name>issue-toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>issue-pricelist-year</meta-name><meta-value>2022</meta-value></custom-meta><custom-meta><meta-name>issue-copyright-holder</meta-name><meta-value>The Author(s)</meta-value></custom-meta><custom-meta><meta-name>issue-copyright-year</meta-name><meta-value>2022</meta-value></custom-meta><custom-meta><meta-name>article-contains-esm</meta-name><meta-value>No</meta-value></custom-meta><custom-meta><meta-name>article-numbering-style</meta-name><meta-value>Unnumbered</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-year</meta-name><meta-value>2022</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-month</meta-name><meta-value>10</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-day</meta-name><meta-value>11</meta-value></custom-meta><custom-meta><meta-name>article-toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>volume-type</meta-name><meta-value>Regular</meta-value></custom-meta><custom-meta><meta-name>journal-product</meta-name><meta-value>ArchiveJournal</meta-value></custom-meta><custom-meta><meta-name>numbering-style</meta-name><meta-value>Unnumbered</meta-value></custom-meta><custom-meta><meta-name>article-grants-type</meta-name><meta-value>OpenChoice</meta-value></custom-meta><custom-meta><meta-name>metadata-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>abstract-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bodypdf-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bodyhtml-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bibliography-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>esm-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>online-first</meta-name><meta-value>false</meta-value></custom-meta><custom-meta><meta-name>pdf-file-reference</meta-name><meta-value>BodyRef/PDF/42162_2022_Article_231.pdf</meta-value></custom-meta><custom-meta><meta-name>pdf-type</meta-name><meta-value>Typeset</meta-value></custom-meta><custom-meta><meta-name>target-type</meta-name><meta-value>OnlinePDF</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-year</meta-name><meta-value>2022</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-month</meta-name><meta-value>12</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-day</meta-name><meta-value>12</meta-value></custom-meta><custom-meta><meta-name>issue-type</meta-name><meta-value>Supplement</meta-value></custom-meta><custom-meta><meta-name>article-type</meta-name><meta-value>ReviewPaper</meta-value></custom-meta><custom-meta><meta-name>journal-subject-primary</meta-name><meta-value>Computer Science</meta-value></custom-meta><custom-meta><meta-name>journal-subject-secondary</meta-name><meta-value>Information Systems and Communication Service</meta-value></custom-meta><custom-meta><meta-name>journal-subject-collection</meta-name><meta-value>Computer Science</meta-value></custom-meta><custom-meta><meta-name>conf-event-url-1</meta-name><meta-value>https://www.energyinformatics.academy/eia-2022-conference</meta-value></custom-meta><custom-meta><meta-name>open-access</meta-name><meta-value>true</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Introduction</title><p id="Par18">According to the United Nations Habitat, cities consume about 78% of global energy demand and generate more than 60% of greenhouse gas emissions primarily through the consumption of fossil fuels for energy supply and transportation (United Nations <xref ref-type="bibr" rid="CR47">2022</xref>). To reach the ambitious goals of the Glasgow agreement (Authors <xref ref-type="bibr" rid="CR2">2021</xref>), a drastic reduction in carbon emission is needed. To achieve such a reduction, a transition from classic fossil fuels to Renewable Energy Sources (RES) as well as the adoption of integrated energy system components, such as micro co-generators, are required. This transition will completely change the structure of the energy systems from standalone hierarchical centralised energy systems to cooperative and distributed energy systems, the so-called Multi-Energy System (MES) vision. Such a transition can not be left to chance and the development of novel Information and Communication Technology (ICT) tools, platforms, and frameworks for driving this transition are attracting a strong research effort from the scientific community. In the last decades, researchers have given a great effort in the development of domain-specific simulation tools designed to simulate with high efficiency and accuracy the behavior of a particular energy system aspect (Ringkjøb et al. <xref ref-type="bibr" rid="CR35">2018</xref>). In MES context, the simulation of different energy systems will require a broader vision and, consequently, a larger number of domains from different systems involved. According to “Smart Grid Architectural Model” (SGAM) (Bruinenberg et al. <xref ref-type="bibr" rid="CR11">2012</xref>) and in particular to its extension “General-puprose Architectural Model for Multi Energy Systems” GAMES (Barbierato et al. <xref ref-type="bibr" rid="CR4">2020</xref>) in Fig. <xref rid="Fig1" ref-type="fig">1</xref>, domains represents the overall conversion chain of an energy carrier that are: (i) generation, (ii) transmission, (iii) distribution, (iv) Distributed Energy Resources (DER), and (v) customer premises. Moreover, the analysis of complex MES requires the collaboration of researchers from different disciplines applying different perspectives in the energy, ICT, social, economic, and political sectors. Therefore, researchers exploit co-simulation frameworks that must address (i) different domains for each individual energy system, (ii) different energy systems together (e.g. power grid, district heating, gas grid), and (iii) different perspectives of the overall MES (e.g. ICT, energy, economic and social) (Schloegl et al. <xref ref-type="bibr" rid="CR39">2015</xref>)<fig id="Fig1"><label>Fig. 1</label><caption xml:lang="en"><p>General-purpose architectural model for MES engineering application (GAMES)</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig1_HTML.png" id="MO1"/></fig></p><p id="Par19">Many works have focused on the co-simulation of smart grids by integrating simulators of power grids with ICT communication aspects, so-called Cyber-Physical Energy System (CPES) (Georg et al. <xref ref-type="bibr" rid="CR17">2013</xref>; Garau et al. <xref ref-type="bibr" rid="CR16">2018</xref>; Pan et al. <xref ref-type="bibr" rid="CR31">2016</xref>; Barbierato et al. <xref ref-type="bibr" rid="CR3">2020</xref>). Co-simulation has been widely applied also to integrate several models in order to represent and describe the planning of new RES deployment (Reinbold et al. <xref ref-type="bibr" rid="CR34">2019</xref>; Steinbrink et al. <xref ref-type="bibr" rid="CR45">2019</xref>; Bottaccioli et al. <xref ref-type="bibr" rid="CR8">2017</xref>; Schiera et al. <xref ref-type="bibr" rid="CR38">2019</xref>) or to study the effects of novel control strategies to exploit energy flexibility for demand response applications (Song et al. <xref ref-type="bibr" rid="CR43">2017</xref>; Bhattarai et al. <xref ref-type="bibr" rid="CR6">2016</xref>; Abgottspon et al. <xref ref-type="bibr" rid="CR1">2018</xref>; Mazzarino et al. <xref ref-type="bibr" rid="CR24">2021</xref>). To ease the coupling of simulators, researchers have started defining standards for co-simulation, such as Functional Mock-up Interface (FMI) (Blochwitz et al. <xref ref-type="bibr" rid="CR7">2011</xref>), and co-simulation frameworks, such as Mosaik (Schütte et al. <xref ref-type="bibr" rid="CR40">2011</xref>) and HELICS (Palmintier et al. <xref ref-type="bibr" rid="CR30">2017</xref>). In particular, Mosaik and HELICS are gaining much attention from the energy research community and were used by several research projects focused on MES. The coordination of domain-specific simulators through co-simulation frameworks can help the development of digital twin platforms for MES (Palensky et al. <xref ref-type="bibr" rid="CR29">2021</xref>) that can be used to plan and operate this transition. However, such platforms will require the ability of domain-specific simulation models and co-simulation frameworks to scale up as much as possible to best represent the complexity and interdependencies of very large real systems. For instance, scalability is essential when testing the impact on the power grid of an innovative heat pump technology on a realistic scenario of one million buildings with photovoltaic installations on the rooftops. The present work is indented to compare the effectiveness of the Mosaik and HELICS co-simulation frameworks and the AIOMAS Multi-Agent System (MAS) library (Scherfke <xref ref-type="bibr" rid="CR37">2014</xref>) in scaling up the number of entities in a co-simulation environment, evaluating different possible configurations of their usage for parallelizing a simple Python simulator. The choice of these technologies depends mainly on their dominant role in energy sectors among other solutions and their ease of use. In fact, Mosaik and HELICS are popular co-simulation frameworks in the literature for Smart grids (Mihal et al. <xref ref-type="bibr" rid="CR25">2022</xref>) and unlike the other solutions they are also thought to be extended to MES or general purpose applications [e.g. (Widl et al. <xref ref-type="bibr" rid="CR48">2022</xref>; Sergi and Pambour <xref ref-type="bibr" rid="CR42">2022</xref>)]. To the best of our knowledge, this is the first work that tries to benchmark these two co-simulation frameworks (i.e. HELICS and Mosaik) with respect to their scalability performance.</p><p id="Par20">Moreover, this study includes a particular implementation of AIOMAS as a viable alternative to build a co-simulation framework. The choice to include AIOMAS in this study follows the recent trends of coupling co-simulation and MAS concepts  (Jung et al. <xref ref-type="bibr" rid="CR21">2018</xref>; Paris et al. <xref ref-type="bibr" rid="CR32">2017</xref>; Motie et al. <xref ref-type="bibr" rid="CR26">2018</xref>; Camus et al. <xref ref-type="bibr" rid="CR12">2016</xref>). In particular, from our findings, AIOMAS is the only well-documented and easy-to-use Python library that enables the deployment of MAS with powerful capabilities regarding agent distribution and communication infrastructure. AIOMAS incorporates different abstraction layers that ensure a proper Time Regulation, Synchronization, and Data Exchange Management of the MAS setup. These additional layers are very powerful and allow the proposed parallelism between MAS and Co-simulation Framework application. Steinbrink et al. (<xref ref-type="bibr" rid="CR44">2018</xref>) present a comparison between Mosaik and implementation of the IEEE 1516 High-Level Architecture (HLA), which is similar to HELICS implementation. In particular, the objective was to provide researchers with guidelines to assess which of the two implementation suits their needs. They compared both the framework architectural concepts and the accuracy results from a Smart Grid co-simulation study over a representative power system scenario. The authors conclude that implementing benchmarks and deriving a comparative performance analysis of the co-simulation frameworks is worth investigating for future works. In fact, our study fulfills this gap focusing in particular on the scalability aspect of the three above-mentioned frameworks.</p><p id="Par21">The rest of the paper is organised as follows: “<xref rid="Sec2" ref-type="sec">Enabling technologies for co-simulation environments</xref>” section presents Mosaik and HELICS co-simulation frameworks and the AIOMAS implementation; “<xref rid="Sec6" ref-type="sec">Methodology for benchmarking design</xref>” section better discusses the problem of scalability, presenting the different co-simulation framework configurations, and the bench-marking metrics; “<xref rid="Sec8" ref-type="sec">Setup of co-simulation scenario</xref>” section presents the simulators involved in the MES scenario to the purpose of the scalability benchmarking; “<xref rid="Sec14" ref-type="sec">Experimental results</xref>” section instead presents the experimental results of the benchmark and a qualitative comparison of the analysed frameworks in implementing a co-simulation scenario; finally, “<xref rid="Sec20" ref-type="sec">Conclusion</xref>” section provides our concluding remarks.</p></sec><sec id="Sec2"><title>Enabling technologies for co-simulation environments</title><p id="Par22">The co-simulation approach is effective when dealing with multi-domain complex systems in which analytical assessment is no longer feasible considering their complexity. Co-simulation is often related to Cyber-Physical Systems (CPS) (Palensky et al. <xref ref-type="bibr" rid="CR28">2017</xref>) and, in particular, Cyber-Physical Energy Systems (CPES) (Zhang et al. <xref ref-type="bibr" rid="CR49">2020</xref>), of which the most prominent example can be found in the Smart Grid concept. General notions about co-simulation are thoroughly reported in Gomes et al. (<xref ref-type="bibr" rid="CR18">2018</xref>) and Schweiger et al. (<xref ref-type="bibr" rid="CR41">2019</xref>). In these literature definitions, co-simulation allows integrating together heterogeneous domain-specific Simulators creating a shared simulation environment. Therefore, this paradigm allows decomposing a complex system in a System-of-System (SoS) structure by applying system engineering. Each of the identified sub-systems deals with a well-defined problem while interacting with each other. From this perspective rises our parallelism with MAS. In literature, some integration of MAS simulators in Co-simulation frameworks can be found, but by abstracting a little more the concept of MAS it is possible to see a co-simulation framework as a system in which really complex and different agents (e.g. the simulators) interact among each other. Agents are thought of as software components that perform computations and virtually mimic the actions and interactions of real-world systems. Usually MAS agents are considered intelligent components, but abstracting from this definition the main characteristics are autonomy, responsiveness and proactivity (Coelho et al. <xref ref-type="bibr" rid="CR13">2017</xref>). These characteristics, despite the level of human-like intelligence, could be applied to the subsystems operating in complex macro-system environments, such as Smart Grids or MESs.</p><p id="Par23">Besides the different co-simulation frameworks such as Mosaik and HELICS, which have different functions and implementations, a shared general architecture can be highlighted.</p><p id="Par24">The main components required to build a co-simulation framework are depicted in Fig. <xref rid="Fig2" ref-type="fig">2</xref>a: (i) the <italic>Scenario</italic>, (ii) the <italic>Orchestrator</italic>, (iii) the <italic>Simulator</italic>, and (iv) the <italic>Model Instance</italic>. This figure offers a general overview of the interacting components in a co-simulation framework, while Fig. <xref rid="Fig2" ref-type="fig">2</xref>b–d represent the specific implementations of these components inside the three main framework analysed: Mosaik, HELICS and AIOMAS.<fig id="Fig2"><label>Fig. 2</label><caption xml:lang="en"><p>Component relational schema of a general co-simulation framework (<bold>a</bold>) and its declination for Mosaik (<bold>b</bold>), HELICS (<bold>c</bold>), and AIOMAS (<bold>d</bold>)</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig2_HTML.png" id="MO2"/></fig></p><p id="Par25">The <italic>Scenario</italic> is a representation of the simulated environment that contains the formal knowledge of the entire CPES. It is not an actual physical component of the co-simulation framework. In fact, it represents the configuration offered by the co-simulation framework that manages the startup of the Orchestrator, the initialization of the Simulators, and states the relationships that occur between Model Instances. The <italic>Orchestrator</italic> is the main component of a co-simulation framework and manages the exchange of data from the Simulators and their time regulation and synchronization. <italic>Simulators</italic> instead contain a specific Model Instance class and have different functionalities (e.g. solvers) to perform their domain-specific computations. Simulators instantiate their Models multiple times and govern the resulting collection by acting as a communication adapter with the Orchestrator. In fact, Simulators transmit inputs received by their peers via the Orchestrator and the Orchestrator commands to their Model Instance collection. In return, Simulators receive outputs from Model Instances that are sent to the Orchestrator. Finally, <italic>Model Instances</italic> are representations of multiple homogeneous physical entities. They contain a physical model that could belong to different mathematical types, ranging from pure algebraic equations to differential equations, as well as finite element methods or behavioural models (Palensky et al. <xref ref-type="bibr" rid="CR28">2017</xref>).</p><p id="Par26">In addition, the arrangement of the components addresses three main tasks, which are (i) the <italic>Initialization</italic>, (ii) the <italic>Time Regulation and Synchronization</italic>, and (iii) the <italic>Data Exchange Management</italic>. The <italic>Initialization</italic> task is performed by the Scenario that initiates the Simulators with the proper parameters setting (e.g. time step duration and start date) and communicates the number of Model Instances that compose their collection. The Initialization process finally sets up the co-simulation environment by establishing all the relationships and connections among Model Instances of all Simulators involved in the co-simulation environment. The <italic>Time Regulation and Synchronization</italic> task instead manages and regulates the time step progression of each individual Simulator. In fact, co-simulation can be classified according to its time regulation paradigms (Schweiger et al. <xref ref-type="bibr" rid="CR41">2019</xref>), which are: (i) Discrete Event (DE) or event-based regulation, and (ii) Continuous Time (CT) or time-stepped regulation. The DE paradigm proceeds in time by exploiting events that trigger an evolution of the dynamics of the co-simulated environment. Thus, Model Instances communicate via Simulators with each other using events that might change their internal state or trigger other events. Conversely, the CT paradigm determines the evolution of the time step with a constant time interval in which the Simulators evolve their internal states by exchanging inputs and forwarding outputs at the end of each time step. Some co-simulation frameworks are able to handle both paradigms, resulting in a hybrid regulation paradigm. This case requires a complex time regulation algorithm where the synchronization task becomes even more critical. Finally, the <italic>Data Exchange Management</italic> task handles the communication among Model Instances, Simulators, and the Orchestrator by implementing telecommunication protocols that are usually the most effective solution for this task. In data exchange management, the main issue is related to the communication latency that usually affects telecommunication protocols. More specifically, communication latency in co-simulation frameworks refers to the amount of time elapsed from the forwarding of the output variables of one Model Instance to the reception of the variable as input by another Model Instance. Large latency can compromise the overall co-simulation environment when dealing with strict time constraints of a particular Simulator that could internally trigger a time step overflow. In conclusion, the Initialization, Time Regulation and Synchronization, and Data Exchange Management represent the most important challenges in ensuring a reliable, accurate, and stable co-simulation framework.</p><p id="Par27">As previously mentioned the MAS concept could be studied along with co-simulation, indeed we have exploited AIOMAS as follows:</p><p id="Par28">(a) we have used AIOMAS as a modelling library for a MAS simulator that has been integrated into a co-simulation framework. In this case, the co-simulation framework (whichever it is) encapsulates a MAS simulator. We will refer to this concept as ’MAS as a simulator’. (b) We have also used AIOMAS as a tool to build up a co-simulation framework in which the integration of simulators is done through the agent concept. In particular, agents (understood as intelligent entities that communicate with each other and the environment) are designed as wrappers for real external simulators (e.g., building thermal simulators, photovoltaic panel simulator). In this way, the replication of simulators is done through the spreading and spawning of agents. We will refer to this case as ’MAS as co-simulation’. This type of architecture reflects the possibility of decoupling the agent envelope from the simulator, i.e. the intelligence (e.g., control algorithm, management system) and the physical model respectively. The agent could model explicitly any intelligent control and encapsulate an interchangeable physical simulator (which models the physical behaviour as it is) on which to test intelligent strategies. Indeed, several studies implement co-simulation alike environments exploiting MAS tools (Pipattanasomporn et al. <xref ref-type="bibr" rid="CR33">2009</xref>; Roche et al. <xref ref-type="bibr" rid="CR36">2010</xref>; Mazzarino et al. <xref ref-type="bibr" rid="CR24">2021</xref>; Nunna and Doolla <xref ref-type="bibr" rid="CR27">2012</xref>; Jung et al. <xref ref-type="bibr" rid="CR21">2018</xref>). The concept of Agents in MAS applications can easily comply with the definition of SoS covering the needs of a co-simulation framework and, in particular, its required components.</p><p id="Par29">The aim of this paper is the scalability analysis of Mosaik and HELICS, two of the most widely adopted co-simulation frameworks in literature. The analysis is performed by applying a comprehensive benchmark of the possible configurations that each framework could implement. In addition, a similar benchmark is introduced for the integration of the AIOMAS library, presenting both MAS as a simulator and MAS as a co-simulation framework [as in Mazzarino et al. (<xref ref-type="bibr" rid="CR24">2021</xref>)]. In the following sections, the details and peculiarities of these three frameworks are addressed.</p><sec id="Sec3"><title>Mosaik</title><p id="Par30">Mosaik is a Python co-simulation framework developed to couple existing Simulators in the Smart Grid field. Its general architecture does not preclude other domain applications. Mosaik provides different Application Program Interfaces (APIs) and components for the main functionalities of a co-simulation framework. Firstly, the <italic>Python Scenario API</italic> allows creating a Python script Scenario in which instantiates and establishes input/output relationships between Model Instances and Simulators. The High-level Simulators API instead provides an abstract class with communication, time regulation, and synchronization features already implemented. They are language agnostic, thus allowing the integration of different programming languages (i.e. Python, C++, and JAVA) and Simulator software (e.g. MATLAB). The Low-level API instead offers the possibility to establish a plain network socket for exchanging serialized JSON data to extend Mosaik Simulators integration capabilities. The implementation of this API requires a meta description of the Simulator that states its parameters and the exchanged variables.</p><p id="Par31">Figure <xref rid="Fig2" ref-type="fig">2</xref>b depicts the relational entities in Mosaik architecture. The Orchestrator role is fulfilled by two components: the <italic>SimManager</italic> and the <italic>Scheduler</italic>. These two components respectively share the tasks of Data Exchange Management and Time Regulation and Synchronization. The SimManager starts the Simulators that govern their Model Instance collection and, subsequently, handles their data exchange. Mosaik manages multiple Simulators that can create Model Instance collection by instantiating their Models. The Scheduler instead synchronizes the Simulators time regulation and could manage both CT and DE paradigms (only in Mosaik version 3.0 which has integrated the support to DE and allows specification of simulators type).</p></sec><sec id="Sec4"><title>HELICS</title><p id="Par32">Hierarchical Engine for Large-scale Infrastructure Co-Simulation (HELICS) is a co-simulation framework based on IEEE High-Level Architecture (HLA) standards (IEEE Standard for Modeling and Simulation <xref ref-type="bibr" rid="CR19">2010a</xref>, <xref ref-type="bibr" rid="CR20">b</xref>). It integrates Simulators from different programming languages (i.e. Python, C++, JAVA, Nim) and simulation software (e.g. MATLAB) in a scalable and distributed environment.</p><p id="Par33">The HELICS architecture and its relational entities are presented in Fig. <xref rid="Fig2" ref-type="fig">2</xref>c. The Scenario in this framework consists of a JSON configuration file in which all the necessary links and parameters for the instances are made explicit. HELICS introduces a different terminology with respect to Fig. <xref rid="Fig2" ref-type="fig">2</xref>a. It retains the concept of Simulators, which in this case, are generic executables that can instantiate a multitude of Federates. Federates represent specific entities defined in the Scenario that executes their respective physical models. HELICS architecture is distributed so each Federate can communicate with others through a publish/subscribe approach (Eugster et al. <xref ref-type="bibr" rid="CR15">2003</xref>) via Cores. Cores are components embedded in Simulators that allow their Federates to join Federations and enable communication with the HELICS architecture. The Data Exchange Management task among Federation is guaranteed by the <italic>Broker</italic> component that coordinates the exchange among different Federations. A Broker could also communicate with other Brokers, and consequently with other Federations, enabling the possibility of deploying a hierarchical architecture. Finally, the Orchestrator is managed by the <italic>Run-Time Infrastructure</italic> (RTI), a component inherited by HLA standard, to ensure a proper Time Regulation and Synchronization of the overall co-simulation environment in both CT and DE paradigms.</p></sec><sec id="Sec5"><title>AIOMAS</title><p id="Par34">AIOMAS is a Python library to implement MAS. It has been chosen to present parallelism between MAS and co-simulation frameworks. At an higher level of abstraction, AIOMAS provides four main classes: (i) the Container, (ii) the Agent , (iii) the Remote Procedure Call (RPC) along with the Clock and (iv) the Object Oriented Programming (OOP) Scenario.</p><p id="Par35">Figure <xref rid="Fig2" ref-type="fig">2</xref>d shows AIOMAS relational entities following the generic co-simulation infrastructure described above. The OOP Scenario component in this configuration does not have a specific implementation. In fact, its design and development are completely up to the end user who can decide to create a specific general Python script or distribute Agents linking inside their Python classes (i.e. OOP Scenario). The tasks required to establish the co-simulated environment are similar to the aforementioned frameworks and are: (i) the Container creation, (ii) the Agent collection generation, (iii) and the distributed orchestration infrastructure start-up (i.e. Clocks/RPC). Agents incorporate specific models of the physical entities they describe and execute their behaviour. Containers, on the other hand, host Agents and communicate with them via RPC servers that handle the Data Exchange Management task. In a Container, Agents implement RPC clients that manage remote communication, using the Container as a gateway to reach Agents that belong to other Containers. Each Container implements the task of Time Regulation and Synchronization through the implementation of a shared distributed Clock. The time evolution of the co-simulation environments could follow the CT or DE paradigms, depending on the user’s implementation choice. This peculiarity addresses one of the main challenges of co-simulation, which is the complex time regulation when it comes to hybrid simulation; with AIOMAS, it is possible to distribute the time regulation and customize it at the expense of more implementation effort.</p></sec></sec><sec id="Sec6"><title>Methodology for benchmarking design</title><p id="Par36">The most complicated and debated issue in co-simulation applications is scalability which is defined as the property of a co-simulation framework to handle an increasing amount of heterogeneous Simulators and their model instances, considering the composite relationships that interconnect them together to run a large-scale complex system, such as a Multi-Energy System (MES). From an Information and Communication Technology (ICT) perspective, scalability is measured typically with three indicators known as scalability dimensions: (i) size, (ii) geographical, and (iii) administrative scalability. Size scalability represents the issues in growing the dimension of the co-simulated system and what are the possible solutions to manage the high number of Simulators and Model Instances to run a huge complex Scenario and its orchestration. Geographical scalability, on the other hand, is the representation of the complexity of managing an increasing number of geographically distributed computational nodes (e.g., different laboratories) to implement a co-simulation Scenario. Finally, administrative scalability represents the difficulties in managing a co-simulation framework when dealing with increasing both previous scalability dimensions, thus the engineering effort required to avoid the complex setup of the co-simulation framework, the orchestrator, and the distribution of Simulators and their Model Instances among network nodes, and their interconnections.<fig id="Fig3"><label>Fig. 3</label><caption xml:lang="en"><p>Vertical and horizontal scaling</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig3_HTML.png" id="MO3"/></fig></p><p id="Par37">The two main scaling directions of a co-simulation framework are (i) vertical scaling and (ii) horizontal scaling, as illustrated in Fig. <xref rid="Fig3" ref-type="fig">3</xref>. Vertical scaling takes advantage of the parallel capabilities of a single node to distribute the co-simulated Scenario across multiple processes, each of which runs a certain Simulator. Depending on the Simulators, their Model Instances, and their relationships defined by the Scenario, vertical scaling could be applied with different methods and strategies. It is worth noting that this scaling direction commonly results in limited scaling of the size of the complex system. Conversely, horizontal scaling exploits the distribution of the co-simulation Scenario over multiple network nodes, joining them by means of telecommunication protocols. In this view, different Simulators are distributed over different network nodes that manage their Model Instances. Also, in this case, there are different solutions depending on the relationships between the Model Instances of each involved Simulator. This approach requires a distributed co-simulation Orchestrator that can act as a load balancer that distributes tasks and manages data exchange and synchronization of all working nodes. The above two directions of scalability are not mutually exclusive and, instead, are typically used in a jointed configuration to improve the scalability of a co-simulation framework. Merging Vertical and Horizontal scalability is an advantage when dealing with particular simulation software and/or hardware needed to simulate a specific component of a complex system. For instance, a Digital Real-Time Simulator (DRTS) is required in some specific MES Scenarios to perform an Electromagnetic Transient (EMT) analysis of a power grid (Barbierato et al. <xref ref-type="bibr" rid="CR5">2022</xref>). This particular hardware acts as a vertical scaling component of the jointed scaling vision to enable fast real-time simulation of the power grid model. Then, the DRTS will be interconnected with a distributed co-simulation environment running other MES models. This distributed configuration participates in the hybrid scaling vision of implementing horizontal scaling.</p><p id="Par38">For the purpose of evaluating the scalability of the co-simulation frameworks presented in “<xref rid="Sec2" ref-type="sec">Enabling technologies for co-simulation environments</xref>” section, a hybrid scaling approach has been chosen among the three possible options to assess what could be the impact of scaling up and scaling out a generic MES Scenario on a distributed cluster of nodes. The benchmark configurations in Fig. <xref rid="Fig4" ref-type="fig">4</xref> are described in the following.</p><p id="Par39">(a) The <italic>Classic Co-simulation configuration</italic> (see Fig. <xref rid="Fig4" ref-type="fig">4</xref>a) is the common configuration of co-simulation frameworks (i.e. Mosaik and HELICS) where Simulators are run by different cluster nodes handled by the Orchestrator master node that manages their data exchange and synchronization. Each Simulator node manages iteratively its <italic>M</italic> Model Instances in a single process. By implementing a distributed deployment of Simulator, this configuration will enhance the simulation capabilities with respect to standalone simulation. However, performances are expected to be low because each cluster node runs the assigned simulator and its instances in a single iterative process. It is worth noting the significant impact of the information exchange among Simulators and the Orchestrator.</p><p id="Par40">(b) The <italic>Multi-process Co-simulation configuration</italic> (see Fig. <xref rid="Fig4" ref-type="fig">4</xref>b) evolves the classic configuration by enabling a multi-process division of a Simulator node (e.g. Simulator <italic>A</italic>), replicating it in <italic>N</italic> Simulator processes (e.g. Simulator <inline-formula id="IEq1"><alternatives><mml:math id="IEq1_Math"><mml:mrow><mml:msub><mml:mi>A</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>A</mml:mi><mml:mi>N</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq1_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$A_1, ..., A_N$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_231_Article_IEq1.gif"/></alternatives></inline-formula>). Considering <italic>M</italic> Model Instances, each Simulator process manages <italic>M</italic>/<italic>N</italic> Model Instances. With respect to Classic Co-simulation configuration, it enables a multi-process execution of the assigned simulator and its instances for each cluster node. This configuration considerably raises the performance of each simulator time step execution. However, the setup of the multi-process execution may take longer and could be a drawback that reduces the configuration performances. The information exchange among Simulators and the Orchestrator instead is identical to the previous configuration.</p><p id="Par41">(c) The <italic>Multi-Agent System as Co-simulation configuration</italic> (see Fig. <xref rid="Fig4" ref-type="fig">4</xref>c) is the typical configuration of the AIOMAS framework in which agents are represented as simulators. When dealing with a small number of Agents, AIOMAS exploits the Main Container for each Agent class that is spread on one of the available cluster nodes. Each Main Container manages (i) the data exchange with its fellow and its Agents through the RPC protocol and (ii) the distributed synchronization through its internal Clock. Likewise Model Instances, Agents (Simulators) are replicated in a single process by applying a concurrent multi-threading. When dealing with a high number <italic>M</italic> of Agents, a Main Container (e.g. Main Container A) could delegate to <italic>N</italic> spawned Containers (e.g. Container <inline-formula id="IEq2"><alternatives><mml:math id="IEq2_Math"><mml:mrow><mml:msub><mml:mi>A</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>A</mml:mi><mml:mi>N</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq2_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$A_1, ..., A_N$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_231_Article_IEq2.gif"/></alternatives></inline-formula>) the Agent management, resulting in <italic>M</italic>/<italic>N</italic> Agents assigned to each child Container. This configuration avoids the required information exchange for Time Regulation, Synchronization, and Data Exchange Management of the Classic and Multi-process Configurations. In fact, the Time Synchronization and Regulation is distributed among the Main Container via the Clock/RPC. Moreover, each Agent directly communicates its output (i.e. events) with other Agents interested in receiving it. This approach enhances the performances with respect to having a centralized Data Exchange Management with an Orchestrator. The drawback of this configuration is related to the setup of the N spawned Containers when dealing with a high number of Agents.</p><p id="Par42">(d) The <italic>Classic Co-simulation configuration with encapsulated multi-process Multi-Agent Systems</italic> (see Fig. <xref rid="Fig4" ref-type="fig">4</xref>d) manages a hybrid configuration of the Classic Co-simulation configuration where each Simulator is a MAS simulator. They are built with AIOMAS Main Containers that spawn <italic>N</italic> child Container in different sub-processes. Each of the child Containers manages <italic>M</italic>/<italic>N</italic> Agents, enhancing the scalability of a Classic Co-simulation configuration by integrating MAS simulators that manage several physical entities exploiting multi-process and multi-threading AIOMAS capabilities. This configuration exploits the capabilities of spawning Containers of the Multi-Agent System as Co-simulation configuration without incurring typical drawbacks of the Multi-Process Co-simulation configuration, raising the performance of this configuration. However, this configuration could suffer from the typical information exchange drawback of the Classic Co-simulation configuration due to the central Data Exchange Management of the Orchestrator.<fig id="Fig4"><label>Fig. 4</label><caption xml:lang="en"><p>The proposed co-simulation benchmark configurations: (<bold>a</bold>) Classic Co-simulation, (<bold>b</bold>) Multi-process Co-simulation, (<bold>c</bold>) Multi-Agent System as Co-simulation framework, and (<bold>d</bold>) Classic Co-simulation configuration with encapsulated multi-process Multi-Agent System</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig4_HTML.png" id="MO4"/></fig></p><sec id="Sec7"><title>Benchmark key performance index (KPI)</title><p id="Par43"><fig id="Fig5"><label>Fig. 5</label><caption xml:lang="en"><p>Decomposition of the Total Execution Time in its main contribution: (i) the Scenario Setup, (ii) the Co-simulation, and (iii) the Termination Processes. The former Co-simulation Process could be decomposed into its main time interval units, the Time Steps</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig5_HTML.png" id="MO5"/></fig></p><p id="Par44">The KPI is defined over a time interval of the main contributions that compose the <italic>Total Execution Time</italic> of a co-simulated Scenario. These processes are depicted in Fig. <xref rid="Fig5" ref-type="fig">5</xref> and are: (i) the <italic>Scenario Setup Process</italic>, in which the co-simulation framework starts the Orchestrator, initializes Simulators with their Model Instances, and, finally, links all the Model Instances to deploy the co-simulated Scenario; (ii) the <italic>Co-simulation Process</italic> that is an iterative process in which the co-simulated Scenario evolves its state each Time Step (i.e. its fundamental unit); (iii) the <italic>Termination Process</italic> in which the co-simulation framework stops the Orchestrator, releases Model Instances and terminates Simulators execution. Each Time Step is a complex routine in which each Simulator retrieves the input dependencies for its Model Instance collection, iteratively executes each Model Instance calculation updating its state, and, finally, collects Model Instance collection outputs to forward them to other Simulators. Simulators operate in parallel as depicted in Fig. <xref rid="Fig5" ref-type="fig">5</xref> where the execution of the four Simulators is highlighted for the <italic>Time-Step 4</italic>. This parallel execution impacts the accuracy of the co-simulated solution with a finite time step latency related to Simulator input/output dependencies that causes negligible inaccuracies of the solution with respect to a standalone simulation (Steinbrink et al. <xref ref-type="bibr" rid="CR44">2018</xref>). Each Time Step duration could vary depending on the input/output Data Exchange Management, the communication latencies, and from the particular computational condition of each cluster node.</p><p id="Par45">Three main time-based KPIs have been employed to evaluate the scalability of each benchmark configuration and its Scenario implementation:<list list-type="bullet"><list-item><p id="Par46">the <italic>Setup Execution Time</italic> which is the time interval in which the co-simulation framework executes the Scenario operations;</p></list-item><list-item><p id="Par47">the <italic>Average Time Step Duration</italic><inline-formula id="IEq3"><alternatives><mml:math id="IEq3_Math"><mml:msub><mml:mi>μ</mml:mi><mml:mi>T</mml:mi></mml:msub></mml:math><tex-math id="IEq3_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mu _{T}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_231_Article_IEq3.gif"/></alternatives></inline-formula> that is estimated as the maximum of the means of the time duration <italic>T</italic> of the <italic>S</italic> co-simulative time steps of each Simulator <inline-formula id="IEq4"><alternatives><mml:math id="IEq4_Math"><mml:mrow><mml:mi>S</mml:mi><mml:mi>i</mml:mi><mml:msub><mml:mi>m</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq4_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$Sim_i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_231_Article_IEq4.gif"/></alternatives></inline-formula> involved in the co-simulation environment I; <disp-formula id="Equ1"><label>1</label><alternatives><mml:math display="block" id="Equ1_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:msub><mml:mi>μ</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:munder><mml:mo movablelimits="true">max</mml:mo><mml:mrow><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:munder><mml:msubsup><mml:mi>μ</mml:mi><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msubsup><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mi>w</mml:mi><mml:mi>h</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:msubsup><mml:mi>μ</mml:mi><mml:mrow><mml:mi>T</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msubsup><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msubsup><mml:mo>∑</mml:mo><mml:mrow><mml:mi>n</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>S</mml:mi></mml:msubsup><mml:msubsup><mml:mi>T</mml:mi><mml:mrow><mml:mi>n</mml:mi></mml:mrow><mml:mi>i</mml:mi></mml:msubsup></mml:mrow><mml:mi>S</mml:mi></mml:mfrac><mml:mo>,</mml:mo><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mspace width="0.166667em"/><mml:mi>I</mml:mi><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mi>S</mml:mi><mml:mi>i</mml:mi><mml:msub><mml:mi>m</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:mi>S</mml:mi><mml:mi>i</mml:mi><mml:msub><mml:mi>m</mml:mi><mml:mi>M</mml:mi></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ1_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \mu _{T} = \max _{i\in I}\mu _{T}^{i} \,\,\,\,\,where\,\,\,\,\, \mu _{T}^{i} = \frac{\sum _{n=1}^{S} T_{n}^{i}}{S},\,\,\,I = \{Sim_{1}, ..., Sim_{M}\} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_231_Article_Equ1.gif"/></alternatives></disp-formula></p></list-item><list-item><p id="Par48">the <italic>Total Execution Time</italic> that includes all the contributions of the Scenario Setup, the Co-simulation, and the Termination Processes.</p></list-item></list>The main objective of this paper is to understand which of the proposed benchmark setups performs better in terms of simulation time when it comes to increase the size of the simulated environment. The chosen KPIs are general and reflect the main simulation times, so they are useful for making comparisons on the scalability of different frameworks.</p></sec></sec><sec id="Sec8"><title>Setup of co-simulation scenario</title><p id="Par49">In order to test the benchmark presented in “<xref rid="Sec6" ref-type="sec">Methodology for benchmarking design</xref>” section, a common realistic scenario has been prepared. The chosen simulators and related physical models are heterogeneous ranging from very simple to more complex. Only the simplest interactions and data exchanges have been included (same time loop, feedback exchanges, or control actions have been excluded) in order to keep the simulation workflow as simple and linear as possible. The motivation behind this choice is to be able to fully relate simulation time performances to the increase of running instances, ignoring any other possible slowing down aspect.</p><p id="Par50">A high-level representation of the multi-model energetic scenario is presented in Fig. <xref rid="Fig6" ref-type="fig">6</xref>, while Fig. <xref rid="Fig7" ref-type="fig">7</xref> depicts the declination of the benchmark setup to the specific case study. The energetic Scenario includes four typical actors of a networked urban environment. The four Simulators (or Containers in the AIOMAS perspective) are: (i) the Meteo Simulator, (ii) the PV Simulator, (iii) the Building Simulator, and (iv) the Power Grid Simulator. Furthermore, still looking at Fig. <xref rid="Fig6" ref-type="fig">6</xref> the simple input/output interactions between Simulators are presented. Specifically, both the PV and the Building Simulators take weather data from the Meteo Simulator as inputs to perform their calculations. Their outputs are sent to the Power Grid Simulator which uses them to calculate the power flow of the power grid. The time resolution of the simulators is configurable and could differ from one simulator to another. All of these simulators have really short wall-clock times for executing a single step thus the simulation time-step could range from seconds to hours. Nevertheless, the time resolution choice must take into consideration the physical significance and constraints of the involved model, so for the Building simulators, the chosen simulation time-step was 1 h. In contrast, mainly to show the possibility of mismatched time resolution, photovoltaic simulators update their state every 15 min. Each Simulator is presented in the following sections.<fig id="Fig6"><label>Fig. 6</label><caption xml:lang="en"><p>Simulator of the analyzed physical MES Scenario</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig6_HTML.png" id="MO7"/></fig></p><sec id="Sec9"><title>The meteo simulator</title><p id="Par51">The Meteo Simulator is a stateless Simulator and acts as a weather file reader (.epw format), obtaining measurements about the weather (i.e. temperature, solar irradiance, and humidity) for each simulation time step. It forwards these outputs to both PV and Building Simulators.</p></sec><sec id="Sec10"><title>The PV simulator</title><p id="Par52">The PV Simulator is a stateless Simulator that uses the <italic>estimate PV energy</italic> service of the model in Bottaccioli et al. (<xref ref-type="bibr" rid="CR9">2017</xref>). It estimates the hourly energy production of PV solar panels for each simulation time step. The given model receives weather conditions and information about the surface area of each panel and uses them to perform its calculations. It also estimates the cell temperature using the so-called <italic>NOCT</italic> method (Brihmat and Mekhtoub <xref ref-type="bibr" rid="CR10">2014</xref>) when wind speed is not available as input and, on the other hand, it uses the <italic>Mattei</italic> method (Mattei et al. <xref ref-type="bibr" rid="CR23">2006</xref>) when wind speed is available. The output of this simulator is the generating power for the given time step, which is forwarded to the Power Grid Simulator.</p></sec><sec id="Sec11"><title>The building simulator</title><p id="Par53">The building simulator is a stateful Simulator that exploits the model presented in Mazzarino et al. (<xref ref-type="bibr" rid="CR24">2021</xref>) to simulate a building equipped with a heat pump system. Within the model, the thermal behaviour of the envelope is treated with a Resistance-Capacitance model (Massano et al. <xref ref-type="bibr" rid="CR22">2019</xref>) and a fine-grained model of the heat pump with all subsystems (e.g., emission, distribution, and generation) is provided. The model calculates the hourly heating demand of the building considering also the heat contributions generated from human occupancy and appliances through archetypes patterns. The heat load is then converted to the heat pump power request. To conclude, the former model has four main functionalities that calculate: (i) the real-time heat pump power demand, (ii) the heat pump power demand forecasting, (iii) the heat pump energy flexibility, and (iv) the actuation commands of the heat pump control strategy. The proposed Scenario only uses the heat pump’s real-time power demand as output for the Power Grid Simulator. The Building Simulator is stateful because it keeps track of the previous indoor air temperature condition when calculating the heat pump demand for a new time step. The inputs for this simulator are the weather information sent by the Meteo Simulator, while the output is the heat-pump demand load for the given time step, which is forwarded to the Power Grid Simulator.</p></sec><sec id="Sec12"><title>The power grid simulator</title><p id="Par54">The power grid simulator is a stateless Simulator that emulates a power grid model with different connected loads. The power grid is based on the model presented in Estebsari et al. (<xref ref-type="bibr" rid="CR14">2021</xref>) and takes advantage of the Python electrical system analysis tool pandapower (Thurner et al. <xref ref-type="bibr" rid="CR46">2018</xref>). This model contains a representation of the network topology and its main components (e.g. buses, lines, transformers) along with their nominal parameters. It is easily configurable and allows the integration of loads, generators, and storage. This Simulator collects the hourly data coming from the PV Simulator and the Building Simulator (i.e. the PV power generation and the Building power load) to solve the power flow analysis of the grid network. In this simulation, it is actually used as a discrete event simulator that is triggered by the reception of both building and PV data.</p></sec><sec id="Sec13"><title>Benchmark configuration</title><p id="Par55">The benchmark design will consider the general Scenario depicted above. The scalability problem is addressed by rising up the <italic>M</italic> number of Model Instances (i.e. Agents for AIOMAS framework) of the PV and Building Simulators. The benchmark will run on an Internet distributed computing system, which is composed by a cluster of 4 nodes with a master node serving as Orchestrator when needed. The implementations of the Scenario for each configuration and its cluster deployment are described in Fig. <xref rid="Fig7" ref-type="fig">7</xref> and are:<fig id="Fig7"><label>Fig. 7</label><caption xml:lang="en"><p>Different implementations of the co-simulation framework benchmark configurations: (<bold>a</bold>) Classic Co-simulation, (<bold>b</bold>) Multi-process co-simulation, (<bold>c</bold>) MAS as co-simulation, and (<bold>d</bold>) Classic Co-simulation with encapsulated MAS</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig7_HTML.png" id="MO8"/></fig></p><p id="Par56">(a) The <italic>Classic Co-simulation implementation</italic> (see Fig. <xref rid="Fig7" ref-type="fig">7</xref>a) that uses the master node as Orchestrator and the four cluster nodes, one for each of the above-mentioned Simulators. Two cluster nodes manage respectively the Meteo Simulator and the Power Grid Simulator, each one handling its single Model Instance. The remaining nodes manage respectively the PV Simulator and the Building Simulator. Finally, each Simulator iteratively runs <italic>M</italic> Model Instances in its process;</p><p id="Par57">(b) The <italic>Multi-process Co-simulation implementation</italic> (see Fig. <xref rid="Fig7" ref-type="fig">7</xref>b) that uses the same implementation of the previous case (a). However, the cluster nodes, assigned to PV and Building Simulators, replicate on <italic>N</italic> processes each individual Simulator, equally distributing in each process the <italic>M</italic> Model Instances. For instance, each of the PV Simulator processes <inline-formula id="IEq5"><alternatives><mml:math id="IEq5_Math"><mml:mrow><mml:msub><mml:mi>A</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>A</mml:mi><mml:mi>N</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq5_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$A_1, ..., A_N$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_231_Article_IEq5.gif"/></alternatives></inline-formula> manages <italic>M</italic>/<italic>N</italic> Model Instances;</p><p id="Par58">(c) The <italic>Multi-Agent System as co-simulation implementation</italic> (see Fig. <xref rid="Fig7" ref-type="fig">7</xref>c) that uses the four cluster nodes without the master node. Two cluster nodes implement a simple Container structure that handles respectively the Meteo Agent and the Power Grid Agent. The other two cluster nodes manage respectively the Main PV Container and Main Building Container, each one handling <italic>M</italic> Agents. Each Main Container spawns <italic>N</italic> child Containers that handle <italic>M</italic>/<italic>N</italic> Agents. For instance, the Main PV Container spawns child Containers <inline-formula id="IEq6"><alternatives><mml:math id="IEq6_Math"><mml:mrow><mml:msub><mml:mi>A</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>.</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>A</mml:mi><mml:mi>N</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq6_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$A_1, ..., A_N$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_231_Article_IEq6.gif"/></alternatives></inline-formula> each one managing <italic>M</italic>/<italic>N</italic> equally distributed Agents;</p><p id="Par59">(d) The <italic>Classic Co-simulation implementation with encapsulated Multi-Process Multi-Agent Systems</italic> (see Fig. <xref rid="Fig7" ref-type="fig">7</xref>d) that uses the same implementation of the Classic Co-simulation case. However, the PV and Building Simulators processes on the two cluster nodes encapsulate the Main Container class that manages the spawning of <italic>N</italic> child Containers in different sub-processes. Each of the child Container manages <italic>M</italic>/<italic>N</italic> Agents like in the Classic Multi-Agent System implementation of Main PV/Building Containers;</p><p id="Par60">Finally, the analysis was conducted on seven different co-simulation configurations. For each configuration, the <italic>M</italic> number of Model Instances (PVs and buildings) was scaled from 1, 100, 10k, 100k, to 1M with the exception of configurations involving Mosaik. In fact, Mosaik has a design limitation on the maximum size of data exchanged that did not allow scaling beyond 10k of Model Instances. It is correct to point out that this limitation could be overcome by applying some modifications to the inner SimPy (python library) methods used in the Mosaik source code. However, since these modifications are not user-friendly and are not included in Mosaik’s API implementation, this framework was used as is, with this scaling limitation. The proposed configurations are: (i) two configurations of the Classic Co-simulation (Fig. <xref rid="Fig7" ref-type="fig">7</xref>a) for HELICS and Mosaik; (ii) two configurations of the Multi-process Co-simulation (Figure <xref rid="Fig7" ref-type="fig">7</xref>b) for HELICS multi-process and Mosaik multi-process; (iii) one configuration of MAS as a Co-simulation framework (Fig. <xref rid="Fig7" ref-type="fig">7</xref>c) for AIOMAS; (iv) two configurations of the Classic Co-simulation with encapsulated MAS (Fig. <xref rid="Fig7" ref-type="fig">7</xref>d) for HELICS-AIOMAS and Mosaik-AIOMAS. To conclude and easily interpret the analysis of experimental results, in the next section, a summary of all the tested configurations is presented in Table <xref rid="Tab1" ref-type="table">1</xref>.<table-wrap id="Tab1"><label>Table 1</label><caption xml:lang="en"><p>Summary of the tested configurations</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><p>Tested configurations</p></th><th align="left"><p>description</p></th></tr></thead><tbody><tr><td align="left"><p>Mosaik</p></td><td align="left"><p>Classic Mosaik</p></td></tr><tr><td align="left"><p>HELICS</p></td><td align="left"><p>Classic HELICS</p></td></tr><tr><td align="left"><p>AIOMAS</p></td><td align="left"><p>Co-simulation framework implemented through AIOMAS library</p></td></tr><tr><td align="left"><p>Mosaik multi-process</p></td><td align="left"><p>Mosaik implementation parallelized through multiprocessing</p></td></tr><tr><td align="left"><p>HELICS multi-process</p></td><td align="left"><p>HELICS implementation parallelized through multiprocessing</p></td></tr><tr><td align="left"><p>Mosaik-AIOMAS</p></td><td align="left"><p>Mosaik co-simulation with encapsulated MAS simulator (AIOMAS)</p></td></tr><tr><td align="left"><p>HELICS-AIOMAS</p></td><td align="left"><p>HELICS co-simulation with encapsulated MAS simulator (AIOMAS)</p></td></tr></tbody></table></table-wrap></p></sec></sec><sec id="Sec14"><title>Experimental results</title><p id="Par61">The co-simulation benchmark has been deployed in a Virtual Machines environment based upon OpenStack cluster with the specification illustrated in Table <xref rid="Tab2" ref-type="table">2</xref>.<table-wrap id="Tab2"><label>Table 2</label><caption xml:lang="en"><p>Summary of the computational nodes used in the simulations</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><p>Node name</p></th><th align="left"><p>Core</p></th><th align="left"><p>RAM</p></th><th align="left"><p>Storage</p></th><th align="left"><p>OS</p></th><th align="left"><p>Role</p></th></tr></thead><tbody><tr><td align="left"><p>Cloud Master</p></td><td align="left"><p>16</p></td><td align="left"><p>64 Gb</p></td><td align="left"><p>128 Gb</p></td><td align="left"><p>Ubuntu server 20.04.2 LTS</p></td><td align="left"><p>Orchestrator (when needed)</p></td></tr><tr><td align="left"><p>Cloud 1</p></td><td align="left"><p>32</p></td><td align="left"><p>128 Gb</p></td><td align="left"><p>256 Gb</p></td><td align="left"><p>Ubuntu server 20.04.2 LTS</p></td><td align="left"><p>Building Simulators</p></td></tr><tr><td align="left"><p>Cloud 2</p></td><td align="left"><p>32</p></td><td align="left"><p>128 Gb</p></td><td align="left"><p>256 Gb</p></td><td align="left"><p>Ubuntu server 20.04.2 LTS</p></td><td align="left"><p>PV Simulators</p></td></tr><tr><td align="left"><p>Cloud 3</p></td><td align="left"><p>32</p></td><td align="left"><p>128 Gb</p></td><td align="left"><p>256 Gb</p></td><td align="left"><p>Ubuntu server 20.04.2 LTS</p></td><td align="left"><p>Meteo Simulator</p></td></tr><tr><td align="left"><p>Cloud 4</p></td><td align="left"><p>32</p></td><td align="left"><p>128 Gb</p></td><td align="left"><p>256 Gb</p></td><td align="left"><p>Ubuntu server 20.04.2 LTS</p></td><td align="left"><p>Power Grid Simulator</p></td></tr></tbody></table></table-wrap></p><p id="Par62">To test the scalability of the different implementations presented in Fig. <xref rid="Fig7" ref-type="fig">7</xref>, the Multi-model energetic Scenario has been used as a baseline for the seven proposed configurations in “<xref rid="Sec13" ref-type="sec">Benchmark configuration</xref>” section. The co-simulated environment has been run for seven winter days with configurable time resolutions for each simulator (1 h for buildings and power grid, 15 min for PVs and meteo). Model Instances of Building and PV Simulators were scaled up. In the next sections, the time-based KPIs mentioned in “<xref rid="Sec7" ref-type="sec">Benchmark key performance index (KPI)</xref>” section are presented to evaluate the comparison among the different co-simulation framework configurations.</p><sec id="Sec15"><title>Setup execution time</title><p id="Par63">The setup execution time considers the time duration of the Scenario configuration operations. In a nutshell, these operations are related to the Initialization task of a general co-simulation framework. In Fig. <xref rid="Fig8" ref-type="fig">8</xref>, the setup execution time performances of the different configurations are presented. Classic Mosaik keeps the setup time nearly constant around 7s but it cannot handle more than 10k instances due to its design limitations. This result highlights that Classic Mosaik is a really well-designed and efficient framework when dealing with limited-size co-simulation environments. Mosaik multi-process instead presents the most time-consuming initialization phase among the benchmarked frameworks. In fact, Mosaik multi-process experiences a big setup time duration difference when rising from 1 instance (i.e. 1 process) to 100 instances (i.e. multiple processes), going from around 6s to 62s. Then, the trend flattens out because the same number of parallel processes have been launched. In this graph HELICS, HELICS multi-process, and HELICS-AIOMAS do not differ much in performance, but an interesting aspect of multi-process HELICS is that it slightly reduces its computation time when going from 100 to 10k model instances, saturating the available cores. Classic HELICS suffers a drastic increase in the setup time from around 7s to 66s only when the instance number passes from 100k to 1M. The best performing configuration is HELICS multi-process framework which is stable at around 5s from 1 to 100k instances. It is worth noting that this framework drastically reduces the time increase of classic HELICS when going from 100k to 1M instances by distributing the computational power for any Simulator over multiple cores, resulting in a setup time of 19s. For the Mosaik-AIOMAS framework, results are similar to the Mosaik multi-process framework with the main difference that the major time increment occurs when going from 10s for 100 instances to 61s for 10k instances. This is due to the threshold used to decide when AIOMAS starts the creation of the multi-process containers. In our case, this threshold is above 100 Model instances. This behaviour does not occur when coupling HELICS and AIOMAS because launching multi-processes and container creation is handled by HELICS with less computational overhead, following the same HELICS multi-process trend.<fig id="Fig8"><label>Fig. 8</label><caption xml:lang="en"><p>Setup time duration of the different co-simulation frameworks and their configurations</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig8_HTML.png" id="MO9"/></fig></p></sec><sec id="Sec16"><title>Average time step duration</title><p id="Par64">The average time step duration reports the execution time of a complete time step that is estimated as the maximum among the mean time step duration of every single Simulator. Figure <xref rid="Fig9" ref-type="fig">9</xref> reports this KPI for all the benchmarked co-simulation frameworks. The average time step duration differences among the co-simulation frameworks are really small up to 10k instances, except for Mosaik-AIOMAS and AIOMAS due to the overhead introduced by the message exchange between Agents. Indeed, Mosaik-AIOMAS takes 0.78s at 10k instances and AIOMAS takes 0.76s, while all the others take around 0.1s. As already mentioned, a comparison with Mosaik is only possible below 10k Model Instances. Up to this point, the benefits of a multi-processing approach are not significant compared to the respective classic solutions. The limitations of both classic and the AIOMAS frameworks are clearly visible when dealing with more than 10k Model Instances. In fact, classic HELICS takes about 16 times longer than its multi-process version with 1M Model Instances. Instead, solutions incorporating AIOMAS even though they perform better than pure HELICS are outperformed by HELICS multi-process. Overall, the configuration with multi-process HELICS performs the best, particularly with paramount performance on the largest scaling Scenario.<fig id="Fig9"><label>Fig. 9</label><caption xml:lang="en"><p>Average time step duration of the different co-simulation frameworks and their configurations</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig9_HTML.png" id="MO10"/></fig></p></sec><sec id="Sec17"><title>Total execution time</title><p id="Par65">Total execution time represents the time duration of the entire co-simulation process from Initialization to the end of all the tasks. Figure <xref rid="Fig10" ref-type="fig">10</xref> presents trend similarities with the average time step duration KPI in Fig. <xref rid="Fig9" ref-type="fig">9</xref>.<fig id="Fig10"><label>Fig. 10</label><caption xml:lang="en"><p>Total execution time of the proposed Scenario for the different co-simulation frameworks and their configurations</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig10_HTML.png" id="MO11"/></fig></p><p id="Par66">In fact, this KPI is a composition of the setup execution time and the sum of the duration of the time steps required to fulfil the co-simulation of the Scenario. When dealing with short simulations, the effect of the setup execution time on the total execution time is larger. Instead, with longer simulations, this effect could be negligible. The KPI trends of the total execution time in Fig. <xref rid="Fig10" ref-type="fig">10</xref> consolidate the performance considerations made in “<xref rid="Sec16" ref-type="sec">Average time step duration</xref>” section, showing the HELICS multi-process as the best performing framework.</p><p id="Par67">Figure <xref rid="Fig11" ref-type="fig">11</xref> is an enlarged representation of Fig. <xref rid="Fig10" ref-type="fig">10</xref>, that focuses on the first 10k Model Instances so as to fairly compare the execution times of all proposed solutions. By analyzing this graph, it can be seen that Mosaik and Mosaik-AIOMAS diverge about 80s while Mosaik multi-process by about 50s from the best performing solutions. This is due to the higher setup execution time of these configurations and greater variability of the average time step execution.<fig id="Fig11"><label>Fig. 11</label><caption xml:lang="en"><p>Zoom on the first 10,000 instances for the Total execution time</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_231_Fig11_HTML.png" id="MO12"/></fig></p></sec><sec id="Sec18"><title>Qualitative comparison</title><p id="Par68">Table <xref rid="Tab3" ref-type="table">3</xref> presents a qualitative comparison among the benchmarked co-simulation solutions. This comparison is done considering the only multi-process versions of HELICS and Mosaik frameworks because their classic versions, as well as the hybrid configurations (HELICS-AIOMAS and Mosaik-AIOMAS), do not bring any KPI improvements. In addition, also AIOMAS is included in this comparison, it is not a co-simulation framework but, as in our case, it could be used as a viable alternative to build one from scratch. The qualitative comparison among the benchmarked co-simulation solutions presented in Table <xref rid="Tab3" ref-type="table">3</xref> points out different characteristics of the frameworks that can help in choosing the right solution depending on the Scenario under analysis. Concerning the Scenario component (see Scenario in Table <xref rid="Tab3" ref-type="table">3</xref>), a first consideration could be made on how the configuration is performed and what effort is required to fulfill the Scenario implementation. Mosaik needs a Python script in which the end user must start the Simulators, instantiate their Models and link them through connectors. This process requires low effort since it is well documented and standardized. HELICS instead uses a JSON file to set up all the required configurations and, thus, has a really low implementation complexity. However, this process could suffer from errors in deploying the correct connection among Model Instances. Finally, AIOMAS requires more effort in the initialization due to the absence of predefined Scenario standards. Linking and instantiating the Models can occur within the Agent definitions or in separate scripts, and is completely up to the end user design. This results in a more complex but freer implementation process.<table-wrap id="Tab3"><label>Table 3</label><caption xml:lang="en"><p>Qualitative comparison among Mosaik, HELICS, and AIOMAS</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" colspan="2"><p>Co-simulation frameworks</p></th><th align="left"><p>Mosaik</p></th><th align="left"><p>HELICS</p></th><th align="left"><p>AIOMAS</p></th></tr></thead><tbody><tr><td align="left" rowspan="2"><p>Scenario</p></td><td align="center"><p>Configuration</p></td><td align="center"><p>Programmatic (scripting)</p></td><td align="center"><p>JSON</p></td><td align="left"><p>Programmatic (Agent-based/ scripting)</p></td></tr><tr><td align="center"><p>Complexity</p></td><td align="center"><p>Low</p></td><td align="center"><p>Low</p></td><td align="left"><p>High</p></td></tr><tr><td align="left" rowspan="4"><p>Orchestrator</p></td><td align="center"><p>Synchronization</p></td><td align="center"><p>Scheduler (SimPy)</p></td><td align="center"><p>Scheduler (RTI)</p></td><td align="left"><p>Custom (Distributed clocks)</p></td></tr><tr><td align="center"><p>Communication paradigm</p></td><td align="center"><p>Request/ Response</p></td><td align="center"><p>Publish/ Subscribe</p></td><td align="left"><p>Request/ Response</p></td></tr><tr><td align="center"><p>Data Exchange</p></td><td align="center"><p>TCP</p></td><td align="center"><p>ZeroMQ</p></td><td align="left"><p>TCP/RPC</p></td></tr><tr><td align="center"><p>Tipology</p></td><td align="center"><p>Time-stepped/ Event-based</p></td><td align="center"><p>Time-stepped/ Event-based</p></td><td align="left"><p>Time-stepped/ Event-based</p></td></tr><tr><td align="left" rowspan="2"><p>Simulator Integration</p></td><td align="center"><p>Programming languages / Simulator Software</p></td><td align="center"><p>Python MATLAB Java C++</p></td><td align="center"><p>Python MATLAB Java C++ Nim</p></td><td align="left"><p>Python</p></td></tr><tr><td align="center"><p>Integration Complexity</p></td><td align="center"><p>Low</p></td><td align="center"><p>Low</p></td><td align="left"><p>High</p></td></tr><tr><td align="left" rowspan="3"><p>Scalability</p></td><td align="center"><p>Horizontal</p></td><td align="center"><p>Distributed</p></td><td align="center"><p>Distributed</p></td><td align="left"><p>Distributed</p></td></tr><tr><td align="center"><p>Vertical</p></td><td align="center"><p>Multi-process (Manual)</p></td><td align="center"><p>Multi-process (Automatic)</p></td><td align="left"><p>Concurrent Multi-threading (Automatic) Multi-processing (Manual)</p></td></tr><tr><td align="center"><p>Performance</p></td><td align="center"><p>Low</p></td><td align="center"><p>High</p></td><td align="left"><p>Medium</p></td></tr></tbody></table></table-wrap></p><p id="Par69">Simulation management, which is the primary responsibility of the Orchestrator, has different characteristics among the three frameworks (see Orchestrator in Table <xref rid="Tab3" ref-type="table">3</xref>); specifically with respect to communications and synchronization. Mosaik handles synchronization via its Scheduler, limiting or making cumbersome custom intra-step operations. Vice versa, HELICS offers an RTI to manage the time regulation and synchronization, allowing greater freedom of development than the Mosaik Scheduler. In contrast, AIOMAS does not offer a synchronization orchestrator, thus time regulation must be autonomously implemented by exploiting distributed external clocks and designing the wrapping agents properly. This means that the end user must take into account this task in a programmatic way encapsulating time management into Agents or creating an external agent as an orchestrator. The communication approach is based on Request/Response for both Mosaik and AIOMAS that exploit respectively TCP and RPC over TCP for communication purposes. HELICS instead uses a Publish/Subscribe approach that could enhance the performance but can lead to wasting resources in data polling requests. To conclude, the three frameworks implement both event-based and time-based simulation paradigms.</p><p id="Par70">Another important aspect is Simulator Integration (see Simulator Integration in Table <xref rid="Tab3" ref-type="table">3</xref>). While HELICS and Mosaik allow the integration of a wide range of Simulators based on different programming languages and simulation software, AIOMAS has no particular API for integrating other programming languages than Python and, if necessary, this must be implemented ad-hoc by the end user. Therefore, the integration of the Simulators in Mosaik and HELICS results in a low-effort task. AIOMAS instead is more complex.</p><p id="Par71">Looking at Scalability (see Scalability in Table <xref rid="Tab3" ref-type="table">3</xref>), the three frameworks can deploy Simulators or Containers horizontally by distributing them on different cluster nodes for their management. However, they differ in the possible implementation of vertical scaling. For instance, Mosaik allows multi-processing but its implementation has to be done manually. HELICS multi-processing instead is handled automatically by the co-simulation framework. AIOMAS provides an automatic concurrent multi-threading of Containers. Conversely, AIOMAS multi-processing requires a manual implementation. Finally, the above features and proposed results allow for a comparison of the overall scalability performance. Mosaik performed the worst scalability mainly due to the intrinsic limitation that does not allow to scale up beyond 10k Model Instances. AIOMAS performed medium scalability limited by the overhead increment when dealing with a rise of Agents. HELICS returned the best scalability, showing that its multi-process management of Simulators is capable of reaching 1M instances with paramount performances.</p></sec><sec id="Sec19"><title>Discussion on experimental results</title><p id="Par72">The experimental results presented in previous Sections allows to determine the proper selection among the presented co-simulation frameworks and configurations depending on the MES scenario dimension:</p><p id="Par73">(a) Mosaik with a Classic configuration offers easy implementation of a MES scenario and is a well-documented framework. It works well with small to medium scenarios but has limited scalability when going over large scenarios. Furthermore, when dealing with complex relationships and data exchange among simulators it is not as efficient as other solutions.</p><p id="Par74">(b) HELICS with a Classic configuration also offers extensive documentation and an easy implementation, a little less intuitive with respect to Mosaik. It easily scales over a million instances, being an optimal choice for small to large scenarios. Thanks to its publish/subscribe paradigm (Eugster et al. <xref ref-type="bibr" rid="CR15">2003</xref>), complex interactions among simulators are easier to implement.</p><p id="Par75">(c) AIOMAS can be used to implement a co-simulation framework, but, being a Generic Python library for MAS, the implementation is up to the user. Thus, the documentation of AIOMAS is not oriented to this kind of usage resulting in a lack of support. Depending on these reasons it must require much more effort and could not be suitable for inexperienced programmers. On the other side, it gives a lot of freedom when designing interactions among agents or complex data exchange workflows. It is suitable for highly customized scenarios such as event-based Simulators that behave in a sequential workflow. It can scale from small to large scenarios but with significantly lower performances with respect to HELICS due to the high overhead of the Agent Data Exchange Management.</p><p id="Par76">(d) Mosaik with a Multi-processing configuration is thought to speed up the Mosaik Classic configuration. The implementation requires some manual workarounds that are not embedded into the Mosaik framework as it is. It can only manage small/medium scenarios because it suffers from the same limitations of the classic version, but it brings some benefits in terms of timing performance. Then choosing this configuration will depend on a personal trade-off between implementation efforts and slightly better timing performances. As a last consideration it could be useful when dealing with simulators running on different machines.</p><p id="Par77">(e) HELICS with a Multi-processing configuration is the best performing solution in terms of scalability. It can support above the million Model Instances with stunning timing performances. Thus it is suitable for very large scenarios, or very complex systems populated by lots of modelled components to be. The multi-processing configuration is well described and embedded in the HELICS documentation. From the point of view of Simulators interactions have the same qualities of classic HELICS.</p><p id="Par78">(f) Mosaik with encapsulated AIOMAS configuration integrates the MAS simulator inside the Mosaik framework. The implementation of this configuration is not straightforward but some examples in Mosaik documentation are present. By looking at the timing performance when scaling up it does not bring any benefits with respect to the Mosaik or AIOMAS classic solutions, and it suffers from the same model instance limit of Mosaik. Thus, it is suitable for small/medium scenarios. In addition, it allows encapsulation of a MAS ecosystem inside a co-simulation framework. This can be useful when dealing with complex systems having a high number of interactions that we want to contain inside the MAS environment.</p><p id="Par79">(g) HELICS with encapsulated AIOMAS configuration integrates the MAS simulator inside the HELICS framework. No documentation for this configuration is present, making its implementation require more effort. In a very large scenario, it performs slightly better than HELICS with Classic configuration but it cannot be compared with the performances of multi-processing HELICS. The last consideration is that the reasoning on interactions above mentioned for Mosaik-AIOMAS still holds for this configuration, making HELICS-AIOMAS the best choice among the solutions with encapsulated AIOMAS.</p><p id="Par80">In conclusion, up to 100 Model Instances for each Simulator, Mosaik with a Multi-processing configuration, HELICS with a Classic configuration, and HELICS with encapsulated AIOMAS configuration are the best performing solutions. The choice could be dictated by the needs of the analysis: Mosaik has a very simple implementation, but places some constraints on interactions between simulators, HELICS offers more freedom on interactions, and AIOMAS offers much more freedom, but with a greater implementation effort. By increasing the number of instances, especially from 10 k, the best solution in terms of time performance and with the same features is the HELICS with a Multi-processing configuration.</p></sec></sec><sec id="Sec20" sec-type="conclusions"><title>Conclusion</title><p id="Par81">This paper compared the scalability performance of two popular co-simulation frameworks and a MAS library used to build a co-simulation framework. Mosaik, HELICS, and AIOMAS were tested on a simple multi-model energy scenario in order to understand their ability to increase the number of co-simulation instances. The increase in model instances, which might be excessive for the given scenario, was used as a way to understand the response of these solutions when dealing with larger scenarios, from the perspective of simulating entire cities or regions. The co-simulation scenario consisted of a weather simulator, a photovoltaic simulator, a building heating/cooling simulator, and a power grid simulator. The complexity of the models involved was heterogeneous, but the interactions between them were kept simple. The reason for this choice was to be able to easily increase the number of model instances for the PV and Building simulators and to focus the study on the increasing size of the problem. The results show that Mosaik has a limitation in the number of connected entities that stopped at 10k model instances of PV and buildings. On the other hand, HELICS demonstrated the ability to scale up to 1M model instances. AIOMAS demonstrated the same ability to scale as HELICS with respect to the number of instances. However, HELICS outperforms AIOMAS in terms of simulation time if the simulators are run in multiprocess. To draw some conclusions, it is possible to say that Mosaik is a very useful framework when dealing with small/medium size environments, offering good quality results and ease of implementation. AIOMAS allows implementing co-simulation for very large scenarios, but it does not scale perfectly because of its exponential increase in overhead. Finally, HELICS outperforms all other solutions in terms of scalability while retaining all the advantages of a well-structured framework like Mosaik. HELICS, in particular when implemented in its multi-processing configuration, gives the best scalability performance allowing to be suitable for any scenario size, furthermore, it is easy to be implemented and allows more freedom on the interactions design due to its publish subscribe paradigm, on the overall this configuration proved to be the most flexible and performing above all the tested ones. This work is intended to test and compare the co-simulation frameworks in different configurations on their basic ability to scale up a generic MES scenario. So, the time-based KPIs are still related to the kind of MES scenario and simulators involved. Thus, a future works will be the standardization of benchmarking standards for co-simulation framework taking into consideration the different kinds of simulators characteristics (e.g. DE vs. CT, real-time vs. non real-time). Moreover, the development of co-simulation scenarios in cluster computing systems by integrating simulators and co-simulation frameworks in containers, such as Dockers managed by a Kubernetes orchestrator, is part of our future work to study the scalability of large co-simulation setups.</p></sec></body><back><ack><title>Acknowledgements</title><sec><p>Not applicable.</p></sec><sec id="FPar1"><title>About this supplement</title><p id="Par82">This article has been published as part of <italic>Energy Informatics Volume 5 Supplement 4, 2022: Proceedings of the Energy Informatics. Academy Conference 2022 (EI.A 2022).</italic> The full contents of the supplement are available online at <ext-link xlink:href="https://energyinformatics.springeropen.com/articles/supplements/volume-5-supplement-4" ext-link-type="uri">https://energyinformatics.springeropen.com/articles/supplements/volume-5-supplement-4</ext-link>.</p></sec></ack><sec sec-type="author-contribution"><title>Author contributions</title><p>LB: Methodology, Supervision, Writing; PRM: Simulation models, Writing; MM: Software development; EP: Methodology, Supervision, writing; LB: Conceptualization, Supervision, Methodology, Writing. All authors read and approved the final manuscript.</p></sec><sec><title>Funding</title><p>This paper is funded by the authors. Affiliation: Politecnico di Torino.</p></sec><sec sec-type="data-availability"><title>Availability of data and materials</title><p>Not applicable.</p></sec><sec sec-type="ethics-statement"><title>Declarations</title><sec id="FPar2"><title>Ethics approval and consent to participate</title><p id="Par83">Not applicable.</p></sec><sec id="FPar3"><title>Consent for publication</title><p id="Par84">Not applicable.</p></sec><sec id="FPar4" sec-type="COI-statement"><title>Competing interests</title><p id="Par85">The authors declare that they have no competing interests.</p></sec></sec><ref-list id="Bib1"><title>References</title><ref-list><ref id="CR1"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Abgottspon</surname><given-names>H</given-names></name><name><surname>Schumann</surname><given-names>R</given-names></name><name><surname>Epiney</surname><given-names>L</given-names></name><name><surname>Werlen</surname><given-names>K</given-names></name></person-group><article-title xml:lang="en">Scaling: managing a large number of distributed battery energy storage systems</article-title><source>Energy Inf</source><year>2018</year><volume>1</volume><issue>1</issue><fpage>55</fpage><lpage>71</lpage></mixed-citation></ref><ref id="CR2"><mixed-citation publication-type="other">Authors U (2021) Glasgow Climate Pact. Accessed 26 Jun 2022. Available from: <ext-link xlink:href="https://unfccc.int/documents/310475" ext-link-type="uri">https://unfccc.int/documents/310475</ext-link></mixed-citation></ref><ref id="CR3"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barbierato</surname><given-names>L</given-names></name><name><surname>Estebsari</surname><given-names>A</given-names></name><name><surname>Bottaccioli</surname><given-names>L</given-names></name><name><surname>Macii</surname><given-names>E</given-names></name><name><surname>Patti</surname><given-names>E</given-names></name></person-group><article-title xml:lang="en">A distributed multimodel cosimulation platform to assess general purpose services in smart grids</article-title><source>IEEE Trans Ind Appl</source><year>2020</year><volume>56</volume><issue>5</issue><fpage>5613</fpage><lpage>5624</lpage><pub-id pub-id-type="doi">10.1109/TIA.2020.3010481</pub-id></mixed-citation></ref><ref id="CR4"><mixed-citation publication-type="other">Barbierato L, Schiera DS, Patti E, Macii E, Pons E, Bompard EF, et al (2020) GAMES: a general-purpose architectural model for multi-energy system engineering applications. In: 2020 IEEE 44th Annual Computers, Software, and Applications Conference (COMPSAC); p. 1405–1410</mixed-citation></ref><ref id="CR5"><mixed-citation publication-type="other">Barbierato L, Pons E, Mazza A, Bompard E, Subramaniam Rajkumar V, Palensky P et al (2022) Stability and accuracy analysis of a distributed digital real-time co-simulation infrastructure. IEEE Transactions on Industry Applications. p. 1–1</mixed-citation></ref><ref id="CR6"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bhattarai</surname><given-names>BP</given-names></name><name><surname>Lévesque</surname><given-names>M</given-names></name><name><surname>Bak-Jensen</surname><given-names>B</given-names></name><name><surname>Pillai</surname><given-names>JR</given-names></name><name><surname>Maier</surname><given-names>M</given-names></name><name><surname>Tipper</surname><given-names>D</given-names></name><etal/></person-group><article-title xml:lang="en">Design and cosimulation of hierarchical architecture for demand response control and coordination</article-title><source>IEEE Trans Industr Inf</source><year>2016</year><volume>13</volume><issue>4</issue><fpage>1806</fpage><lpage>1816</lpage><pub-id pub-id-type="doi">10.1109/TII.2016.2634582</pub-id></mixed-citation></ref><ref id="CR7"><mixed-citation publication-type="other">Blochwitz T, Otter M, Arnold M, Bausch C, Clauß C, Elmqvist H, et al (2011) The functional mockup interface for tool independent exchange of simulation models. In: Proceedings of the 8th international Modelica conference. Linköping University Press; p. 105–114</mixed-citation></ref><ref id="CR8"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bottaccioli</surname><given-names>L</given-names></name><name><surname>Estebsari</surname><given-names>A</given-names></name><name><surname>Pons</surname><given-names>E</given-names></name><name><surname>Bompard</surname><given-names>E</given-names></name><name><surname>Macii</surname><given-names>E</given-names></name><name><surname>Patti</surname><given-names>E</given-names></name><etal/></person-group><article-title xml:lang="en">A flexible distributed infrastructure for real-time co-simulations in smart grids</article-title><source>IEEE Trans Industr Inf</source><year>2017</year><volume>13</volume><issue>6</issue><fpage>3265</fpage><lpage>3274</lpage><pub-id pub-id-type="doi">10.1109/TII.2017.2702206</pub-id></mixed-citation></ref><ref id="CR9"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bottaccioli</surname><given-names>L</given-names></name><name><surname>Patti</surname><given-names>E</given-names></name><name><surname>Macii</surname><given-names>E</given-names></name><name><surname>Acquaviva</surname><given-names>A</given-names></name></person-group><article-title xml:lang="en">GIS-based software infrastructure to model PV generation in fine-grained spatio-temporal domain</article-title><source>IEEE Syst J</source><year>2017</year><volume>12</volume><issue>3</issue><fpage>2832</fpage><lpage>2841</lpage><pub-id pub-id-type="doi">10.1109/JSYST.2017.2726350</pub-id></mixed-citation></ref><ref id="CR10"><mixed-citation publication-type="other">Brihmat F, Mekhtoub S (2014) PV cell temperature/PV power output relationships homer methodology calculation. In: Conférence Internationale des Energies Renouvelables” CIER’13”/International Journal of Scientific Research &amp; Engineering Technology. vol.&amp;nbsp;1. International Publisher &amp;C. O. p. 0–0</mixed-citation></ref><ref id="CR11"><mixed-citation publication-type="other">Bruinenberg J, Colton L, Darmois E, Dorn J, Doyle J, Elloumi O et al (2012) CEN CENELEC ETSI Smart Grid Coordination Group on Smart Grid Reference Architecture. CEN CENELEC ETSI Technical Report. p. 98–107</mixed-citation></ref><ref id="CR12"><mixed-citation publication-type="other">Camus B, Paris T, Vaubourg J, Presse Y, Bourjot C, Ciarletta L et al (2016) MECSYCO: a Multi-agent DEVS Wrapping Platform for the Co-simulation of Complex Systems. Accessed 26 Jun 2022</mixed-citation></ref><ref id="CR13"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Coelho</surname><given-names>VN</given-names></name><name><surname>Cohen</surname><given-names>MW</given-names></name><name><surname>Coelho</surname><given-names>IM</given-names></name><name><surname>Liu</surname><given-names>N</given-names></name><name><surname>Guimarães</surname><given-names>FG</given-names></name></person-group><article-title xml:lang="en">Multi-agent systems applied for energy systems integration: state-of-the-art applications and trends in microgrids</article-title><source>Appl Energy</source><year>2017</year><volume>187</volume><fpage>820</fpage><lpage>832</lpage><pub-id pub-id-type="doi">10.1016/j.apenergy.2016.10.056</pub-id></mixed-citation></ref><ref id="CR14"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Estebsari</surname><given-names>A</given-names></name><name><surname>Mazzarino</surname><given-names>PR</given-names></name><name><surname>Bottaccioli</surname><given-names>L</given-names></name><name><surname>Patti</surname><given-names>E</given-names></name></person-group><article-title xml:lang="en">IoT-enabled real-time management of smart grids with demand response aggregators</article-title><source>IEEE Trans Ind Appl</source><year>2021</year><volume>58</volume><issue>1</issue><fpage>102</fpage><lpage>112</lpage><pub-id pub-id-type="doi">10.1109/TIA.2021.3121651</pub-id></mixed-citation></ref><ref id="CR15"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eugster</surname><given-names>PT</given-names></name><name><surname>Felber</surname><given-names>PA</given-names></name><name><surname>Guerraoui</surname><given-names>R</given-names></name><name><surname>Kermarrec</surname><given-names>AM</given-names></name></person-group><article-title xml:lang="en">The many faces of publish/subscribe</article-title><source>ACM Comput Surveys (CSUR)</source><year>2003</year><volume>35</volume><issue>2</issue><fpage>114</fpage><lpage>131</lpage><pub-id pub-id-type="doi">10.1145/857076.857078</pub-id></mixed-citation></ref><ref id="CR16"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garau</surname><given-names>M</given-names></name><name><surname>Ghiani</surname><given-names>E</given-names></name><name><surname>Celli</surname><given-names>G</given-names></name><name><surname>Pilo</surname><given-names>F</given-names></name><name><surname>Corti</surname><given-names>S</given-names></name></person-group><article-title xml:lang="en">Co-simulation of smart distribution network fault management and reconfiguration with lte communication</article-title><source>Energies</source><year>2018</year><volume>11</volume><issue>6</issue><fpage>1332</fpage><pub-id pub-id-type="doi">10.3390/en11061332</pub-id></mixed-citation></ref><ref id="CR17"><mixed-citation publication-type="other">Georg H, Müller SC, Dorsch N, Rehtanz C, Wietfeld C (2013) INSPIRE: integrated co-simulation of power and ICT systems for real-time evaluation. In: 2013 IEEE International Conference on Smart Grid Communications (SmartGridComm); p. 576–581</mixed-citation></ref><ref id="CR18"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gomes</surname><given-names>C</given-names></name><name><surname>Thule</surname><given-names>C</given-names></name><name><surname>Broman</surname><given-names>D</given-names></name><name><surname>Larsen</surname><given-names>PG</given-names></name><name><surname>Vangheluwe</surname><given-names>H</given-names></name></person-group><article-title xml:lang="en">Co-simulation: a survey</article-title><source>ACM Comput Surveys (CSUR)</source><year>2018</year><volume>51</volume><issue>3</issue><fpage>1</fpage><lpage>33</lpage><pub-id pub-id-type="doi">10.1145/3179993</pub-id></mixed-citation></ref><ref id="CR19"><mixed-citation publication-type="other">IEEE Standard for Modeling and Simulation (M amp;S) High Level Architecture (HLA)—Object Model Template (OMT) Specification. IEEE Std 15162-2010 (Revision of IEEE Std 15162-2000). 2010;p. 1–110</mixed-citation></ref><ref id="CR20"><mixed-citation publication-type="other">IEEE Standard for Modeling and Simulation (M amp;S) High Level Architecture (HLA)—Object Model Template (OMT) Specification—Redline. IEEE Std 15162-2010 (Revision of IEEE Std 15162-2000) - Redline. (2010);p. 1–112</mixed-citation></ref><ref id="CR21"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jung</surname><given-names>T</given-names></name><name><surname>Shah</surname><given-names>P</given-names></name><name><surname>Weyrich</surname><given-names>M</given-names></name></person-group><article-title xml:lang="en">Dynamic co-simulation of internet-of-things-components using a multi-agent-system</article-title><source>Procedia CIRP</source><year>2018</year><volume>72</volume><fpage>874</fpage><lpage>879</lpage><pub-id pub-id-type="doi">10.1016/j.procir.2018.03.084</pub-id></mixed-citation></ref><ref id="CR22"><mixed-citation publication-type="other">Massano M, Macii E, Patti E, Acquaviva A, Bottaccioli L (2019) A grey-box model based on unscented Kalman filter to estimate thermal dynamics in buildings. In: 2019 IEEE International Conference on Environment and Electrical Engineering and 2019 IEEE Industrial and Commercial Power Systems Europe (EEEIC/I &amp;CPS Europe). IEEE. p. 1–6</mixed-citation></ref><ref id="CR23"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mattei</surname><given-names>M</given-names></name><name><surname>Notton</surname><given-names>G</given-names></name><name><surname>Cristofari</surname><given-names>C</given-names></name><name><surname>Muselli</surname><given-names>M</given-names></name><name><surname>Poggi</surname><given-names>P</given-names></name></person-group><article-title xml:lang="en">Calculation of the polycrystalline PV module temperature using a simple method of energy balance</article-title><source>Renewable Energy</source><year>2006</year><volume>31</volume><issue>4</issue><fpage>553</fpage><lpage>567</lpage><pub-id pub-id-type="doi">10.1016/j.renene.2005.03.010</pub-id></mixed-citation></ref><ref id="CR24"><mixed-citation publication-type="other">Mazzarino PR, De Vizia C, Macii E, Patti E, Bottaccioli L (2021) An agent-based framework for smart grid balancing exploiting thermal flexibility of residential buildings. In: 2021 IEEE International Conference on Environment and Electrical Engineering and 2021 IEEE Industrial and Commercial Power Systems Europe (EEEIC / I CPS Europe); p. 1–6</mixed-citation></ref><ref id="CR25"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mihal</surname><given-names>P</given-names></name><name><surname>Schvarcbacher</surname><given-names>M</given-names></name><name><surname>Rossi</surname><given-names>B</given-names></name><name><surname>Pitner</surname><given-names>T</given-names></name></person-group><article-title xml:lang="en">Smart grids co-simulations: survey &amp; research directions</article-title><source>Sustain Comput Inf Syst</source><year>2022</year><volume>35</volume></mixed-citation></ref><ref id="CR26"><mixed-citation publication-type="other">Motie Y, Belghache E, Nketsa A, Georgé JP (2018) Interoperability based dynamic data mediation using adaptive multi-agent systems for co-simulation. In: 2018 International Conference on High Performance Computing &amp; Simulation (HPCS). IEEE. p. 235–241</mixed-citation></ref><ref id="CR27"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nunna</surname><given-names>HK</given-names></name><name><surname>Doolla</surname><given-names>S</given-names></name></person-group><article-title xml:lang="en">Multiagent-based distributed-energy-resource management for intelligent microgrids</article-title><source>IEEE Trans Industr Electron</source><year>2012</year><volume>60</volume><issue>4</issue><fpage>1678</fpage><lpage>1687</lpage><pub-id pub-id-type="doi">10.1109/TIE.2012.2193857</pub-id></mixed-citation></ref><ref id="CR28"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Palensky</surname><given-names>P</given-names></name><name><surname>Van Der Meer</surname><given-names>AA</given-names></name><name><surname>Lopez</surname><given-names>CD</given-names></name><name><surname>Joseph</surname><given-names>A</given-names></name><name><surname>Pan</surname><given-names>K</given-names></name></person-group><article-title xml:lang="en">Cosimulation of intelligent power systems: fundamentals, software architecture, numerics, and coupling</article-title><source>IEEE Ind Electron Mag</source><year>2017</year><volume>11</volume><issue>1</issue><fpage>34</fpage><lpage>50</lpage><pub-id pub-id-type="doi">10.1109/MIE.2016.2639825</pub-id></mixed-citation></ref><ref id="CR29"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Palensky</surname><given-names>P</given-names></name><name><surname>Cvetkovic</surname><given-names>M</given-names></name><name><surname>Gusain</surname><given-names>D</given-names></name><name><surname>Joseph</surname><given-names>A</given-names></name></person-group><article-title xml:lang="en">Digital twins and their use in future power systems</article-title><source>Digital Twin</source><year>2021</year><volume>1</volume><issue>4</issue><fpage>4</fpage><pub-id pub-id-type="doi">10.12688/digitaltwin.17435.1</pub-id></mixed-citation></ref><ref id="CR30"><mixed-citation publication-type="other">Palmintier B, Krishnamurthy D, Top P, Smith S, Daily J, Fuller J (2017) Design of the HELICS high-performance transmission-distribution-communication-market co-simulation framework. In: 2017 Workshop on Modeling and Simulation of Cyber-Physical Energy Systems (MSCPES); p. 1–6</mixed-citation></ref><ref id="CR31"><mixed-citation publication-type="other">Pan Z, Xu Q, Chen C, Guan X (2016) NS3-MATLAB co-simulator for cyber-physical systems in smart grid. In: 2016 35th Chinese control conference (CCC). IEEE 2016:9831–9836</mixed-citation></ref><ref id="CR32"><mixed-citation publication-type="other">Paris T, Ciarletta L, Chevrier V (2017) Designing co-simulation with multi-agent tools: a case study with NetLogo. In: Multi-Agent Systems and Agreement Technologies. Springer. p. 253–267</mixed-citation></ref><ref id="CR33"><mixed-citation publication-type="other">Pipattanasomporn M, Feroze H, Rahman S (2009) Multi-agent systems in a distributed smart grid: design and implementation. In: 2009 IEEE/PES Power Systems Conference and Exposition. IEEE. 1–8</mixed-citation></ref><ref id="CR34"><mixed-citation publication-type="other">Reinbold V, Protopapadaki C, Tavella JP, Saelens D (2019) Assessing scalability of a low-voltage distribution grid co-simulation through functional mock-up interface. J Build Perform Simul. p. 1–13</mixed-citation></ref><ref id="CR35"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ringkjøb</surname><given-names>HK</given-names></name><name><surname>Haugan</surname><given-names>PM</given-names></name><name><surname>Solbrekke</surname><given-names>IM</given-names></name></person-group><article-title xml:lang="en">A review of modelling tools for energy and electricity systems with large shares of variable renewables</article-title><source>Renew Sustain Energy Rev</source><year>2018</year><volume>96</volume><fpage>440</fpage><lpage>459</lpage><pub-id pub-id-type="doi">10.1016/j.rser.2018.08.002</pub-id></mixed-citation></ref><ref id="CR36"><mixed-citation publication-type="other">Roche R, Blunier B, Miraoui A, Hilaire V, Koukam A (2010) Multi-agent systems for grid energy management: a short review. In: IECON 2010-36th Annual Conference on IEEE Industrial Electronics Society. IEEE. p. 3341–3346</mixed-citation></ref><ref id="CR37"><mixed-citation publication-type="other">Scherfke S (2014) aiomas Documentation. Accessed 26 Jun 2022</mixed-citation></ref><ref id="CR38"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schiera</surname><given-names>DS</given-names></name><name><surname>Minuto</surname><given-names>FD</given-names></name><name><surname>Bottaccioli</surname><given-names>L</given-names></name><name><surname>Borchiellini</surname><given-names>R</given-names></name><name><surname>Lanzini</surname><given-names>A</given-names></name></person-group><article-title xml:lang="en">Analysis of rooftop photovoltaics diffusion in energy community buildings by a novel Gis-and agent-based modeling co-simulation platform</article-title><source>IEEE Access</source><year>2019</year><volume>7</volume><fpage>93404</fpage><lpage>93432</lpage><pub-id pub-id-type="doi">10.1109/ACCESS.2019.2927446</pub-id></mixed-citation></ref><ref id="CR39"><mixed-citation publication-type="other">Schloegl F, Rohjans S, Lehnhoff S, Velasquez J, Steinbrink C, Palensky P (2015) Towards a classification scheme for co-simulation approaches in energy systems. In: 2015 International symposium on smart electric distribution systems and technologies (EDST). IEEE. 516–521</mixed-citation></ref><ref id="CR40"><mixed-citation publication-type="other">Schütte S, Scherfke S, Tröschel M (2011) Mosaik: a framework for modular simulation of active components in smart grids. In: 2011 IEEE First International Workshop on Smart Grid Modeling and Simulation (SGMS). IEEE. 55–60</mixed-citation></ref><ref id="CR41"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schweiger</surname><given-names>G</given-names></name><name><surname>Gomes</surname><given-names>C</given-names></name><name><surname>Engel</surname><given-names>G</given-names></name><name><surname>Hafner</surname><given-names>I</given-names></name><name><surname>Schoeggl</surname><given-names>J</given-names></name><name><surname>Posch</surname><given-names>A</given-names></name><etal/></person-group><article-title xml:lang="en">An empirical survey on co-simulation: promising standards, challenges and research needs</article-title><source>Simul Model Pract Theory</source><year>2019</year><volume>95</volume><fpage>148</fpage><lpage>163</lpage><pub-id pub-id-type="doi">10.1016/j.simpat.2019.05.001</pub-id></mixed-citation></ref><ref id="CR42"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sergi</surname><given-names>B</given-names></name><name><surname>Pambour</surname><given-names>K</given-names></name></person-group><article-title xml:lang="en">An evaluation of co-simulation for modeling coupled natural gas and electricity networks</article-title><source>Energies</source><year>2022</year><volume>15</volume><issue>14</issue><fpage>5277</fpage><pub-id pub-id-type="doi">10.3390/en15145277</pub-id></mixed-citation></ref><ref id="CR43"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Song</surname><given-names>J</given-names></name><name><surname>Jiang</surname><given-names>S</given-names></name><name><surname>Zhang</surname><given-names>P</given-names></name><name><surname>Zhou</surname><given-names>J</given-names></name></person-group><article-title xml:lang="en">Real-time digital co-simulation method of smart grid for integrating large-scale demand response resources</article-title><source>CIRED-Open Access Proc J</source><year>2017</year><volume>2017</volume><issue>1</issue><fpage>1949</fpage><lpage>1953</lpage><pub-id pub-id-type="doi">10.1049/oap-cired.2017.1000</pub-id></mixed-citation></ref><ref id="CR44"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Steinbrink</surname><given-names>C</given-names></name><name><surname>van der Meer</surname><given-names>AA</given-names></name><name><surname>Cvetkovic</surname><given-names>M</given-names></name><name><surname>Babazadeh</surname><given-names>D</given-names></name><name><surname>Rohjans</surname><given-names>S</given-names></name><name><surname>Palensky</surname><given-names>P</given-names></name><etal/></person-group><article-title xml:lang="en">Smart grid co-simulation with MOSAIK and HLA: a comparison study</article-title><source>Comput Sci-Res Dev</source><year>2018</year><volume>33</volume><issue>1</issue><fpage>135</fpage><lpage>143</lpage><pub-id pub-id-type="doi">10.1007/s00450-017-0379-y</pub-id></mixed-citation></ref><ref id="CR45"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Steinbrink</surname><given-names>C</given-names></name><name><surname>Blank-Babazadeh</surname><given-names>M</given-names></name><name><surname>El-Ama</surname><given-names>A</given-names></name><name><surname>Holly</surname><given-names>S</given-names></name><name><surname>Lüers</surname><given-names>B</given-names></name><name><surname>Nebel-Wenner</surname><given-names>M</given-names></name><etal/></person-group><article-title xml:lang="en">CPES testing with Mosaik: co-simulation planning, execution and analysis</article-title><source>Appl Sci</source><year>2019</year><volume>9</volume><issue>5</issue><fpage>923</fpage><pub-id pub-id-type="doi">10.3390/app9050923</pub-id></mixed-citation></ref><ref id="CR46"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Thurner</surname><given-names>L</given-names></name><name><surname>Scheidler</surname><given-names>A</given-names></name><name><surname>Schäfer</surname><given-names>F</given-names></name><name><surname>Menke</surname><given-names>J</given-names></name><name><surname>Dollichon</surname><given-names>J</given-names></name><name><surname>Meier</surname><given-names>F</given-names></name><etal/></person-group><article-title xml:lang="en">pandapower—an open-source python tool for convenient modeling, analysis, and optimization of electric power systems</article-title><source>IEEE Trans Power Syst</source><year>2018</year><volume>33</volume><issue>6</issue><fpage>6510</fpage><lpage>6521</lpage><pub-id pub-id-type="doi">10.1109/TPWRS.2018.2829021</pub-id></mixed-citation></ref><ref id="CR47"><mixed-citation publication-type="other">United Nations (2022) Energy, UN-Habitat. Accessed 26 Jun 2022. Available from: <ext-link xlink:href="https://unhabitat.org/urban-themes/energy/" ext-link-type="uri">https://unhabitat.org/urban-themes/energy/</ext-link></mixed-citation></ref><ref id="CR48"><mixed-citation publication-type="other">Widl E, Wild C, Heussen K, Rikos E, Hoang TT (2022) Comparison of two approaches for modeling the thermal domain of multi-energy networks. In: 2022 Open Source Modelling and Simulation of Energy Systems (OSMSES). IEEE. 1–6</mixed-citation></ref><ref id="CR49"><mixed-citation publication-type="other">Zhang J, Daily J, Mast RA, Palmintier B, Krishnamurthy D, Elgindy T et al (2020) Development of HELICS-based high-performance cyber-physical co-simulation framework for distributed energy resources applications. In: 2020 IEEE International Conference on Communications, Control, and Computing Technologies for Smart Grids (SmartGridComm). p. 1–5</mixed-citation></ref></ref-list></ref-list><glossary><title>Abbreviations</title><def-list><def-item><term>DE</term><def><p id="Par2">Discrete event</p></def></def-item><def-item><term>DER</term><def><p id="Par3">Distributed energy resources</p></def></def-item><def-item><term>DRTS</term><def><p id="Par4">Digital real-time simulator</p></def></def-item><def-item><term>EMT</term><def><p id="Par5">Electromagnetic transient</p></def></def-item><def-item><term>FMI</term><def><p id="Par6">Functional mock-up interface</p></def></def-item><def-item><term>HLA</term><def><p id="Par7">High-level architecture</p></def></def-item><def-item><term>ICT</term><def><p id="Par8">Information communication &amp; technology</p></def></def-item><def-item><term>KPI</term><def><p id="Par9">Key performance indicator</p></def></def-item><def-item><term>MAS</term><def><p id="Par10">Multi-agent system</p></def></def-item><def-item><term>MES</term><def><p id="Par11">Multi-energy system</p></def></def-item><def-item><term>OOP</term><def><p id="Par12">Object oriented programming</p></def></def-item><def-item><term>PV</term><def><p id="Par13">Photovoltaic</p></def></def-item><def-item><term>RES</term><def><p id="Par14">Renewable energy source</p></def></def-item><def-item><term>RPC</term><def><p id="Par15">Remote procedure call</p></def></def-item><def-item><term>RTI</term><def><p id="Par16">Run-time infrastructure</p></def></def-item><def-item><term>SoS</term><def><p id="Par17">System of systems</p></def></def-item></def-list></glossary><notes notes-type="Misc"><title>Publisher’s Note</title><p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></notes></back></article></records><facets><facet name="subject"><facet-value count="1">Computer Science</facet-value><facet-value count="1">Information Systems and Communication Service</facet-value></facet><facet name="keyword"><facet-value count="1">AIOMAS</facet-value><facet-value count="1">Co-simulation framework</facet-value><facet-value count="1">HELICS</facet-value><facet-value count="1">Mosaik</facet-value><facet-value count="1">Scalability</facet-value></facet><facet name="pub"><facet-value count="1">Energy Informatics</facet-value></facet><facet name="year"><facet-value count="1">2022</facet-value></facet><facet name="country"><facet-value count="1">Italy</facet-value></facet><facet name="type"><facet-value count="1">Journal</facet-value></facet></facets></response>
