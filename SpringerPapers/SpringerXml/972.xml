<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="/resources/spdi-openaccess-jats.xsl"?>
<!DOCTYPE response [
	
<!ENTITY % article SYSTEM "http://jats.nlm.nih.gov/archiving/1.2/JATS-archivearticle1.dtd">
<!ENTITY % book-part-wrapper SYSTEM "http://jats.nlm.nih.gov/extensions/bits/2.0/BITS-book2.dtd">
	]><response><apiMessage>This XML was provided by Springer Nature</apiMessage><query>doi:10.1186/s42162-022-00200-z</query><apiKey>87ba7cb21f89ce78154df796840621f4</apiKey><result><total>1</total><start>1</start><pageLength>2</pageLength><recordsDisplayed>1</recordsDisplayed></result><records><article dtd-version="1.2" article-type="research-article" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><front><journal-meta><journal-id journal-id-type="publisher-id">42162</journal-id><journal-title-group><journal-title>Energy Informatics</journal-title><abbrev-journal-title abbrev-type="publisher">Energy Inform</abbrev-journal-title></journal-title-group><issn pub-type="epub">2520-8942</issn><publisher><publisher-name>Springer International Publishing</publisher-name><publisher-loc>Cham</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">s42162-022-00200-z</article-id><article-id pub-id-type="manuscript">200</article-id><article-id pub-id-type="doi">10.1186/s42162-022-00200-z</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research</subject></subj-group></article-categories><title-group><article-title xml:lang="en">Solar farm cable layout optimization as a graph problem</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes" id="Au1"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0002-2835-392X</contrib-id><name><surname>Gritzbach</surname><given-names>Sascha</given-names></name><address><email>sascha.gritzbach@kit.edu</email></address><xref ref-type="aff" rid="Aff1">1</xref><xref ref-type="corresp" rid="IDs4216202200200z_cor1">a</xref></contrib><contrib contrib-type="author" id="Au2"><name><surname>Stampa</surname><given-names>Dominik</given-names></name><address><email>ucetb@student.kit.edu</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author" id="Au3"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1411-6330</contrib-id><name><surname>Wolf</surname><given-names>Matthias</given-names></name><address><email>matthias.wolf@kit.edu</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="GRID">grid.7892.4</institution-id><institution-id institution-id-type="ISNI">0000 0001 0075 5874</institution-id><institution content-type="org-name">Karlsruhe Institute of Technology</institution></institution-wrap><addr-line content-type="city">Karlsruhe</addr-line><country country="DE">Germany</country></aff></contrib-group><author-notes><corresp id="IDs4216202200200z_cor1"><label>a</label><email>sascha.gritzbach@kit.edu</email></corresp></author-notes><pub-date date-type="pub" publication-format="electronic"><day>7</day><month>9</month><year>2022</year></pub-date><pub-date date-type="collection" publication-format="electronic"><month>9</month><year>2022</year></pub-date><volume>5</volume><issue seq="5">Suppl 1</issue><issue-title>Proceedings of the 11th DACH+ Conference on Energy Informatics</issue-title><issue-sponsor>Publication of this supplement was funded by the German Federal Ministry for Economic Affairs and Energy. The articles have undergone a double blind peer review process. The Supplement Editors declare that they have no competing interests.</issue-sponsor><elocation-id>25</elocation-id><history><date date-type="registration"><day>8</day><month>7</month><year>2022</year></date><date date-type="online"><day>7</day><month>9</month><year>2022</year></date></history><permissions><copyright-statement content-type="compact">© The Author(s) 2022</copyright-statement><copyright-year>2022</copyright-year><copyright-holder>The Author(s)</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p><bold>Open Access</bold>This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article's Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit <ext-link xlink:href="http://creativecommons.org/licenses/by/4.0/" ext-link-type="uri">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p></license></permissions><abstract xml:lang="en" id="Abs1"><title>Abstract</title><p id="Par1">We introduce the Solar Farm Cable Layout Problem (SoFaCLaP), a novel graph-theoretic optimization problem. SoFaCLaP formalizes the task of finding a cost-optimal cable layout in a solar farm where PV string positions are already determined but the positions of other components such as transformers can be picked from a set of candidate positions. The problem statement incorporates a network flow model in which the flow value of a connection represents the number of strings that are (indirectly) connected to a transformer via this connection. A mixed-integer linear program (MILP) formulation is proposed that uses binary variables to indicate which of several available cable types is chosen for each connection. We propose a framework to randomly generate benchmark instances to evaluate any algorithmic approach to SoFaCLaP. In particular, we generate a set of instances based on real-world solar farm characteristics. With an extensive evaluation of the MILP formulation on those instances we establish mixed-integer linear programming as a baseline for future algorithmic approaches to finding solar farm cable layouts.
</p></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Solar farm</kwd><kwd>Cable layout</kwd><kwd>Mixed-integer linear program</kwd><kwd>Benchmark generation</kwd><kwd>Graph</kwd></kwd-group><conference><conf-name>The 11th DACH+ Conference on Energy Informatics 2022</conf-name><conf-loc>Freiburg, Germany</conf-loc><conf-date>15-16 September 2022</conf-date></conference><custom-meta-group><custom-meta><meta-name>publisher-imprint-name</meta-name><meta-value>Springer</meta-value></custom-meta><custom-meta><meta-name>volume-issue-count</meta-name><meta-value>1</meta-value></custom-meta><custom-meta><meta-name>issue-article-count</meta-name><meta-value>19</meta-value></custom-meta><custom-meta><meta-name>issue-toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>issue-pricelist-year</meta-name><meta-value>2022</meta-value></custom-meta><custom-meta><meta-name>issue-copyright-holder</meta-name><meta-value>The Author(s)</meta-value></custom-meta><custom-meta><meta-name>issue-copyright-year</meta-name><meta-value>2022</meta-value></custom-meta><custom-meta><meta-name>article-contains-esm</meta-name><meta-value>No</meta-value></custom-meta><custom-meta><meta-name>article-numbering-style</meta-name><meta-value>Unnumbered</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-year</meta-name><meta-value>2022</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-month</meta-name><meta-value>7</meta-value></custom-meta><custom-meta><meta-name>article-registration-date-day</meta-name><meta-value>8</meta-value></custom-meta><custom-meta><meta-name>article-toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>toc-levels</meta-name><meta-value>0</meta-value></custom-meta><custom-meta><meta-name>volume-type</meta-name><meta-value>Regular</meta-value></custom-meta><custom-meta><meta-name>journal-product</meta-name><meta-value>ArchiveJournal</meta-value></custom-meta><custom-meta><meta-name>numbering-style</meta-name><meta-value>Unnumbered</meta-value></custom-meta><custom-meta><meta-name>article-grants-type</meta-name><meta-value>OpenChoice</meta-value></custom-meta><custom-meta><meta-name>metadata-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>abstract-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bodypdf-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bodyhtml-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>bibliography-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>esm-grant</meta-name><meta-value>OpenAccess</meta-value></custom-meta><custom-meta><meta-name>online-first</meta-name><meta-value>false</meta-value></custom-meta><custom-meta><meta-name>pdf-file-reference</meta-name><meta-value>BodyRef/PDF/42162_2022_Article_200.pdf</meta-value></custom-meta><custom-meta><meta-name>pdf-type</meta-name><meta-value>Typeset</meta-value></custom-meta><custom-meta><meta-name>target-type</meta-name><meta-value>OnlinePDF</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-year</meta-name><meta-value>2022</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-month</meta-name><meta-value>9</meta-value></custom-meta><custom-meta><meta-name>issue-online-date-day</meta-name><meta-value>7</meta-value></custom-meta><custom-meta><meta-name>issue-type</meta-name><meta-value>Supplement</meta-value></custom-meta><custom-meta><meta-name>article-type</meta-name><meta-value>OriginalPaper</meta-value></custom-meta><custom-meta><meta-name>journal-subject-primary</meta-name><meta-value>Computer Science</meta-value></custom-meta><custom-meta><meta-name>journal-subject-secondary</meta-name><meta-value>Information Systems and Communication Service</meta-value></custom-meta><custom-meta><meta-name>journal-subject-collection</meta-name><meta-value>Computer Science</meta-value></custom-meta><custom-meta><meta-name>conf-event-url-1</meta-name><meta-value>https://energy-informatics2022.org/</meta-value></custom-meta><custom-meta><meta-name>open-access</meta-name><meta-value>true</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Introduction</title><p id="Par2">The previous decade has seen a boom in the commission of renewable energy power plants, in particular for solar farms. The global installed capacity in photovoltaic (PV) systems has seen a 16-fold increase to over 707 GW between 2010 and 2020 (IRENA <xref ref-type="bibr" rid="CR14">2021</xref>). During the same time, the weighted-average cost per newly installed mega-watt has decreased by approximately 93%, mainly—but not solely—due to a decrease in cost of PV modules (IRENA <xref ref-type="bibr" rid="CR14">2021</xref>). In 2019, 116.9 GW of new PV capacity were added world-wide, out of which 75.3 GW were installed in utility-scale solar farms (SolarPower Europe <xref ref-type="bibr" rid="CR26">2020</xref>).</p><p id="Par3">For the convenience of the reader, we give a general description of the main components of a utility-scale solar farm. For further details, we refer to ABB Ltd (<xref ref-type="bibr" rid="CR1">2019</xref>), Mertens (<xref ref-type="bibr" rid="CR21">2019</xref>), which also served as references for the following elaboration. The most visible parts of a solar farm are the solar cells. In those, sunlight is converted to tiny amounts of electric current. The cells are connected forming a PV module. These modules, in turn, are connected in series to form a string which is mounted on a rack. For the remainder of this work, we will consider the PV strings as the smallest building block, since we are mainly interested in optimizing the cable layout. The strings supply electricity in form of Direct Current (DC), which is converted to Alternating Current (AC) in inverters. Strings can have their own inverters (<italic>string inverters</italic>, connected to one or at most to a few strings) or a larger number of strings is connected to only a few <italic>central inverters</italic>. We focus on central inverters but everything in this work can also be adapted to string inverters. In general, inverters have more functions than only conversion. They are used for monitoring and safety purposes and generally also incorporate control elements such as maximum power point trackers, by which the DC voltage in the connected components is adjusted according to environmental conditions to maximize electrical power harvest. Solar farms typically operate at low-voltage levels (the DC side is usually aimed at a maximum voltage of 1 kV or 1.5 kV), so that step-up transformers are needed to feed the generated power into the grid. Since inverters have only a finite number of input circuits, additional devices are installed between strings and inverters. These devices have different names, depending on the monitoring and safety equipment installed in them and on the components they connect. <italic>Y-connectors</italic> are the most simple device. They normally connect just two strings with no additional equipment [except maybe for fuses (Every <xref ref-type="bibr" rid="CR8">2022</xref>)]. <italic>Combiner boxes</italic> connect a larger number of strings (or Y-connectors) and have additional safety and monitoring equipment. <italic>Recombiner boxes</italic> have the same equipment as combiner boxes but connect combiner boxes instead of strings. Which kind of components, in particular between strings and inverters, are used ultimately depends on a decision by the solar farm planners. In any case, the components need to be connected by cables. For electrical reasons the cable layout should be balanced to some extent, e. g. to avoid reverse current. In particular, the layered structure should be respected, for example, connecting a recombiner box (to which multiple strings are connected) and a single string to an inverter should be avoided.</p><p id="Par4">With all those restrictions in mind, solar farms appear to be mostly constructed on flat ground following one (of maybe several) pre-specified templates. However, there are exceptions: The Monte Mele photovoltaic plant is situated on the slope of a hill on Sicily, Italy, and has irregular distances between its strings (Alpiq Holding AG <xref ref-type="bibr" rid="CR2">2022</xref>). For a solar farm of the size of the Monte Mele plant with its capacity of 718 kW, drawing a cable layout by hand might be feasible. For larger solar farms [the world’s currently largest stands at 2245 MW (Sanjay <xref ref-type="bibr" rid="CR23">2022</xref>)], algorithmic approaches computing near-to-cost-optimal cable layouts might be the way to go.</p></sec><sec id="Sec2"><title>Related work</title><p id="Par5">Various aspects of solar farms have been a target for optimization in the literature. Solar cells can be manifactured from different so-called photovoltaic absorber materials that influence the performance of a cell, for a review see (Kirchartz and Rau <xref ref-type="bibr" rid="CR15">2018</xref>). The efficiency of transformers can be influenced by using appropriate control methods (Liu et al. <xref ref-type="bibr" rid="CR17">2019</xref>) and realized in a prototype. Shifting the focus to the overall electrical system of a solar farm and its operation, a variety of maximum power point tracking techniques can be employed to maximize the power output of the farm (Bollipo et al. <xref ref-type="bibr" rid="CR4">2020</xref>). Concerning the early stages of the planning process, a fuzzy Analytic Hierarchy Process has been proposed to find an optimal site for a solar farm (Tavana et al. <xref ref-type="bibr" rid="CR27">2017</xref>).</p><p id="Par6">A more holistic view on solar farm design is employed at Siemens Energy: In a multi-criteria decision support system a set of pre-computed designs for a given site can be compared and investigated by planners visually and with respect to different “key performance indicators” (Bischoff et al. <xref ref-type="bibr" rid="CR3">2014</xref>). The designs are computed using several (unspecified) heuristics in a three-stage process involving three subproblems: placing service ways, placing strings in the area between ways, and inverter placement. Given the positions of strings and inverters, a cable layout is computed in “single-objective manner, [minimizing] cable cross sections such that specified losses are not exceeded” (Bischoff et al. <xref ref-type="bibr" rid="CR3">2014</xref>, p.337). The exact optimization problem is not stated.</p><p id="Par7">Using a different setting, a formalization of the optimization problem of finding a cost-minimal cable layout is given in Luo et al. (<xref ref-type="bibr" rid="CR20">2021</xref>). Computing cable layouts and the placement of combiner boxes assigned to a single inverter is modelled as a generalized capacitated minimum spanning tree problem and solved by a branch-and-price-and-cut algorithm. In this setting, strings are placed on a grid and edge lengths are given by the <inline-formula id="IEq1"><alternatives><mml:math id="IEq1_Math"><mml:msub><mml:mi>ℓ</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><tex-math id="IEq1_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\ell _1$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq1.gif"/></alternatives></inline-formula> metric. A capacitated spanning tree connecting strings and the inverter yields a cable layout in which a combiner box is placed at each child string of the inverter such that the capacity of the combiner box is not exceeded. The costs arise from a linear-cost flow on edges between any two strings and from a step-cost function between combiner boxes and inverter. The latter models the installation costs of the combiner boxes.</p><p id="Par8">This paper generalizes the task of determining an optimal cable layout and optimal positions of combiner boxes in a solar farm. It is assumed that the positions of the strings are already determined and that candidate positions for all other components, e. g. (re-)combiner boxes or transformers, of a solar farm are given. The goal is to find an optimal subset of the candidate positions that allows all strings to be connected to a transformer such that the total cabling costs are minimized—in Luo et al. (<xref ref-type="bibr" rid="CR20">2021</xref>) only candidate positions of combiner boxes are considered and they are co-located with strings. As for the cabling, a set of available cable types is given (each with a thermal capacity and a cost per unit of length). For any two components that can be connected according to the aforementioned layered structure one of the cable types should be chosen such that the cable has sufficient capacity and is as cheap as possible. This gives rise to a step-cost function for each connection, not only between combiner boxes and inverters. Such cost functions have been used in papers on optimizing the cable layout of a wind farm (Dutta and Overbye <xref ref-type="bibr" rid="CR7">2011</xref>, Lehmann et al. <xref ref-type="bibr" rid="CR16">2017</xref>), in which a network flow model with a step-cost function is used). The main difference between our solar farm model and the wind farm models lies in the way in which vertices can be connected. Our model has a layered structure which allows connections only between adjacent layers. In wind farms, there are only two types of vertices (turbines and substations) and turbines are connected to each other.</p></sec><sec id="Sec3"><title>Contribution</title><p id="Par9">On our endeavour to generalize the task of determining an optimal layout of a solar farm, we introduce a graph problem called the <sc>Solar Farm Cable Layout Problem</sc> (SoFaCLaP, <xref rid="Sec4" ref-type="sec">Problem formulation</xref>). The problem statement uses a network flow model to identify the point-to-point connections (<italic>edges</italic>) that are used for the cable layout and to identify how many strings use each connection. The flow on each connection is used to identify which cable type is used for the respective connection. SoFaCLaP bears resemblance to the Steiner Arborescence Problem (Ljubić <xref ref-type="bibr" rid="CR18">2021</xref>) and to the Multi-level Facility Location Problem (Ortiz-Astorquiza et al. <xref ref-type="bibr" rid="CR22">2018</xref>).</p><p id="Par10">We propose a mixed-integer linear program (MILP) formulation (<xref rid="Sec7" ref-type="sec">A mixed-integer linear program</xref>) to provide a first solution method for SoFaCLaP. This formulation uses real variables for the flow values and binary variables to indicate which cable type is used for which edge. An extensive evaluation of the performance of the optimizer Gurobi on the MILP formulation is carried out (<xref rid="Sec12" ref-type="sec">Results: optimality and (in-)feasibility</xref>, <xref rid="Sec13" ref-type="sec">Results: running time</xref>, and <xref rid="Sec14" ref-type="sec">Results: solution quality</xref>) to establish  mixed-integer linear programming as a baseline for performance evaluations of future approaches to solving SoFaCLaP. For the evaluation of the MILP formulation we propose a framework to randomly generate synthetic benchmark instances (<xref rid="Sec9" ref-type="sec">Framework for benchmark generation</xref>). We employ this framework using parameters based on real-world solar farms (<xref rid="Sec10" ref-type="sec">Generating benchmark instances</xref>). The benchmark instances used in the evaluation are publicly available.</p><p id="Par11">The problem statement and the MILP formulation can be adapted to cover further aspects of solar farm layouting (cf. <xref rid="Sec5" ref-type="sec">Variants of the problem</xref> and <xref rid="Sec6" ref-type="sec">SoFaCLaP from a practical perspective</xref>). The process for generating benchmark instances can incorporate such aspects. It can also be customized to address further requirements of solar farm planners and to use different characteristics of various electrical devices.</p><p id="Par12">To summarize, this paper has four main purposes: to introduce SoFaCLaP as a graph optimization problem, to establish an MILP formulation as a standalone solution method that can also be used as a baseline for future algorithms, to introduce a framework for generating synthetic input instances, and to provide an example set of instances based on real-world characteristics.</p></sec><sec id="Sec4"><title>Problem formulation</title><sec><p id="Par13">The Solar Farm Cable Layout Problem (SoFaCLaP) is a minimum-cost flow problem on a directed layered graph <inline-formula id="IEq2"><alternatives><mml:math id="IEq2_Math"><mml:mrow><mml:mi>G</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><tex-math id="IEq2_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$G = (V,E)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq2.gif"/></alternatives></inline-formula>. The vertex set consists of the strings <inline-formula id="IEq3"><alternatives><mml:math id="IEq3_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub></mml:math><tex-math id="IEq3_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{S}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq3.gif"/></alternatives></inline-formula> that need to be connected, as well as of the potential Y-connectors <inline-formula id="IEq4"><alternatives><mml:math id="IEq4_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>Y</mml:mi></mml:msub></mml:math><tex-math id="IEq4_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{Y}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq4.gif"/></alternatives></inline-formula>, combiner boxes <inline-formula id="IEq5"><alternatives><mml:math id="IEq5_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>C</mml:mi></mml:msub></mml:math><tex-math id="IEq5_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{C}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq5.gif"/></alternatives></inline-formula>, recombiner boxes <inline-formula id="IEq6"><alternatives><mml:math id="IEq6_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>R</mml:mi></mml:msub></mml:math><tex-math id="IEq6_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{R}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq6.gif"/></alternatives></inline-formula>, inverters <inline-formula id="IEq7"><alternatives><mml:math id="IEq7_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub></mml:math><tex-math id="IEq7_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{I}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq7.gif"/></alternatives></inline-formula>, and transformers <inline-formula id="IEq8"><alternatives><mml:math id="IEq8_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub></mml:math><tex-math id="IEq8_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{T}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq8.gif"/></alternatives></inline-formula>. Edges have a length <inline-formula id="IEq9"><alternatives><mml:math id="IEq9_Math"><mml:mrow><mml:mi mathvariant="normal">len</mml:mi><mml:mo>:</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:mi mathvariant="double-struck">R</mml:mi></mml:mrow></mml:math><tex-math id="IEq9_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {len} :E \rightarrow \mathbb {R}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq9.gif"/></alternatives></inline-formula> and only exist between one layer and the next, i.e.,<disp-formula id="Equ1"><label>1</label><alternatives><mml:math display="block" id="Equ1_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mi>V</mml:mi></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>Y</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>C</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>R</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mtext>,</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ1_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} V&amp;= V_{S} \cup V_{Y} \cup V_{C} \cup V_{R} \cup V_{I} \cup V_{T} \text {,} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ1.gif"/></alternatives></disp-formula><disp-formula id="Equ2"><label>2</label><alternatives><mml:math display="block" id="Equ2_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mi>E</mml:mi></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>⊆</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mo>×</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>Y</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>Y</mml:mi></mml:msub><mml:mo>×</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>C</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>C</mml:mi></mml:msub><mml:mo>×</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>R</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>R</mml:mi></mml:msub><mml:mo>×</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mo>×</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mtext>.</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ2_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} E&amp;\subseteq V_{S} \times V_{Y} \cup V_{Y} \times V_{C} \cup V_{C} \times V_{R} \cup V_{R} \times V_{I} \cup V_{I} \times V_{T} \text {.} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ2.gif"/></alternatives></disp-formula>For easier reference, the layers are enumerated from <inline-formula id="IEq10"><alternatives><mml:math id="IEq10_Math"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq10_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_1 = V_{S}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq10.gif"/></alternatives></inline-formula> to <inline-formula id="IEq11"><alternatives><mml:math id="IEq11_Math"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mn>6</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq11_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_6 = V_{T}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq11.gif"/></alternatives></inline-formula>. Vertices from layers <inline-formula id="IEq12"><alternatives><mml:math id="IEq12_Math"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mn>6</mml:mn></mml:msub></mml:mrow></mml:math><tex-math id="IEq12_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_2, \ldots , V_6$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq12.gif"/></alternatives></inline-formula> have an upper capacity <inline-formula id="IEq13"><alternatives><mml:math id="IEq13_Math"><mml:mrow><mml:msub><mml:mi mathvariant="normal">u</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:mrow></mml:math><tex-math id="IEq13_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {u} _i \in \mathbb {N}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq13.gif"/></alternatives></inline-formula> for <inline-formula id="IEq14"><alternatives><mml:math id="IEq14_Math"><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mn>6</mml:mn></mml:mrow></mml:math><tex-math id="IEq14_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i=2, \ldots , 6$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq14.gif"/></alternatives></inline-formula> on the amount of strings that can be routed via these vertices. Inverters also have a lower capacity <inline-formula id="IEq15"><alternatives><mml:math id="IEq15_Math"><mml:msub><mml:mi>ℓ</mml:mi><mml:mn>5</mml:mn></mml:msub></mml:math><tex-math id="IEq15_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {\ell } _5$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq15.gif"/></alternatives></inline-formula>. We may refer to the capacity bounds of a layer by a vertex of that layer, e. g. <inline-formula id="IEq16"><alternatives><mml:math id="IEq16_Math"><mml:mrow><mml:msub><mml:mi mathvariant="normal">u</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi mathvariant="normal">u</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq16_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {u} _2 = \mathrm {u} (v)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq16.gif"/></alternatives></inline-formula> for any <inline-formula id="IEq17"><alternatives><mml:math id="IEq17_Math"><mml:mrow><mml:mi>v</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:mrow></mml:math><tex-math id="IEq17_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$v \in V _2$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq17.gif"/></alternatives></inline-formula>. The left-hand side of Fig. <xref rid="Fig1" ref-type="fig">1</xref> shows an example of layered graph with capacities as given by a SoFaCLaP instance.<fig id="Fig1"><label>Fig. 1</label><caption xml:lang="en"><p>An example instance of SoFaCLaP showing the layered graph and the capacities of all layers <italic>(left)</italic> and—assuming that there is a cable type with sufficient capacity—a feasible cable layout <italic>(right)</italic>. The flow values on the edges are omitted in this visualization. They are, however, uniquely determined, since the cable layout is cycle-free, and can be computed by counting the strings in the respective subtrees of the layout</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_200_Fig1_HTML.png" id="MO3"/></fig></p></sec><sec><p id="Par14">The inverters split the instance into an AC-side with the transformers and a DC-side with the strings. Denote the edges on the AC-side by<inline-formula id="IEq18"><alternatives><mml:math id="IEq18_Math"><mml:mrow><mml:msub><mml:mi>E</mml:mi><mml:mi mathvariant="normal">AC</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>∈</mml:mo><mml:mi>E</mml:mi><mml:mo>:</mml:mo><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq18_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$E _{\mathrm {AC}} = \{(i,j) \in E :i \in V_{I}, j \in V_{T} \}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq18.gif"/></alternatives></inline-formula> and by <inline-formula id="IEq19"><alternatives><mml:math id="IEq19_Math"><mml:mrow><mml:msub><mml:mi>E</mml:mi><mml:mi mathvariant="normal">DC</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mi>E</mml:mi><mml:mo lspace="0.15em" rspace="0.15em" stretchy="false">\</mml:mo><mml:msub><mml:mi>E</mml:mi><mml:mi mathvariant="normal">AC</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq19_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$E _{\mathrm {DC}} = E \setminus E _{\mathrm {AC}}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq19.gif"/></alternatives></inline-formula> the edges on the DC-side. For either side, there is a set of possible cable types <inline-formula id="IEq20"><alternatives><mml:math id="IEq20_Math"><mml:msub><mml:mi>K</mml:mi><mml:mi mathvariant="normal">AC</mml:mi></mml:msub></mml:math><tex-math id="IEq20_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$K _{\mathrm {AC}}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq20.gif"/></alternatives></inline-formula> and <inline-formula id="IEq21"><alternatives><mml:math id="IEq21_Math"><mml:msub><mml:mi>K</mml:mi><mml:mi mathvariant="normal">DC</mml:mi></mml:msub></mml:math><tex-math id="IEq21_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$K _{\mathrm {DC}}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq21.gif"/></alternatives></inline-formula>. Each cable type <inline-formula id="IEq22"><alternatives><mml:math id="IEq22_Math"><mml:mi>k</mml:mi></mml:math><tex-math id="IEq22_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq22.gif"/></alternatives></inline-formula> has a thermal capacity <inline-formula id="IEq23"><alternatives><mml:math id="IEq23_Math"><mml:mrow><mml:mi mathvariant="normal">cap</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><tex-math id="IEq23_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {cap} (k)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq23.gif"/></alternatives></inline-formula> and a cost per unit of length <inline-formula id="IEq24"><alternatives><mml:math id="IEq24_Math"><mml:mrow><mml:mi>c</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><tex-math id="IEq24_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$c (k)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq24.gif"/></alternatives></inline-formula>. For easier notation, the subscripts AC and DC are omitted. The cable types include a dummy cable type of capacity and cost 0.</p></sec><sec><p id="Par15">The goal of SoFaCLaP is to find a minimum-cost flow on <italic>G</italic>, i. e. a function <inline-formula id="IEq25"><alternatives><mml:math id="IEq25_Math"><mml:mrow><mml:mi>f</mml:mi><mml:mo>:</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">→</mml:mo><mml:msub><mml:mi mathvariant="double-struck">R</mml:mi><mml:mrow><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:math><tex-math id="IEq25_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$f :E \rightarrow \mathbb {R}_{\ge 0}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq25.gif"/></alternatives></inline-formula> of minimal cost. The flow must transport one unit of flow from each string to a transformer, conserve the flow at intermediate vertices, respect the vertex capacities, and have at most one outgoing edge from each vertex with positive flow. The latter enforces a cycle-free cable layout. The right-hand side of Fig. <xref rid="Fig1" ref-type="fig">1</xref> shows an example layout. The cost of a flow on an edge is given by <inline-formula id="IEq26"><alternatives><mml:math id="IEq26_Math"><mml:mrow><mml:mi>c</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msup><mml:mi>k</mml:mi><mml:mo>⋆</mml:mo></mml:msup><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>·</mml:mo><mml:mi mathvariant="normal">len</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>e</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq26_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$c (k ^\star ) \cdot \mathrm {len}(e)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq26.gif"/></alternatives></inline-formula> where <inline-formula id="IEq27"><alternatives><mml:math id="IEq27_Math"><mml:msup><mml:mi>k</mml:mi><mml:mo>⋆</mml:mo></mml:msup></mml:math><tex-math id="IEq27_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k ^\star$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq27.gif"/></alternatives></inline-formula> is the cheapest cable type with sufficient capacity to carry the flow. The total cost of a flow is the sum of costs over all edges. A flow that exceeds the maximum cable capacity on one or more edges is not considered a feasible solution.</p></sec><sec><p id="Par16">SoFaCLaP is a computationally difficult problem.</p></sec><sec id="FPar1"><title>Theorem 1</title><p id="Par17">It is strongly NP-complete to decide if an instance of the <sc>Solar Farm Cable Layout Problem</sc> has a feasible solution.</p></sec><sec><p id="Par18"><bold><italic>Proof</italic></bold> A candidate for a feasible solution to SoFaCLaP can be provided by specifying the flow values on the edges. To verify feasibility, it must be checked that flow conservation holds and that all vertex and cable capacities are respected. This is possible in polynomial time. Thus, membership in NP is shown. Note that it is not necessary to compute the costs, which could involve computations with real numbers.</p></sec><sec><p id="Par19">The hardness proof uses a reduction from the strongly NP-hard problem <sc>3-Partition </sc>(Garey and Johnson <xref ref-type="bibr" rid="CR10">1979</xref>, SP15): Let <inline-formula id="IEq28"><alternatives><mml:math id="IEq28_Math"><mml:mrow><mml:mi>m</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo>∈</mml:mo><mml:mi mathvariant="double-struck">N</mml:mi></mml:mrow></mml:math><tex-math id="IEq28_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$m, T \in \mathbb {N}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq28.gif"/></alternatives></inline-formula> and let <inline-formula id="IEq29"><alternatives><mml:math id="IEq29_Math"><mml:mrow><mml:mi>S</mml:mi><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>s</mml:mi><mml:mrow><mml:mn>3</mml:mn><mml:mi>m</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:math><tex-math id="IEq29_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S :=\{s_1, \ldots , s_{3m}\}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq29.gif"/></alternatives></inline-formula> be a multiset of natural numbers such that <inline-formula id="IEq30"><alternatives><mml:math id="IEq30_Math"><mml:mrow><mml:mi>T</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>4</mml:mn><mml:mo>&lt;</mml:mo><mml:mi>s</mml:mi><mml:mo>&lt;</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math><tex-math id="IEq30_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${T}/{4}&lt; s &lt; {T}/{2}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq30.gif"/></alternatives></inline-formula> for all <inline-formula id="IEq31"><alternatives><mml:math id="IEq31_Math"><mml:mrow><mml:mi>s</mml:mi><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:math><tex-math id="IEq31_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$s \in S$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq31.gif"/></alternatives></inline-formula> and <inline-formula id="IEq32"><alternatives><mml:math id="IEq32_Math"><mml:mrow><mml:msub><mml:mo>∑</mml:mo><mml:mrow><mml:mi>s</mml:mi><mml:mo>∈</mml:mo><mml:mi>S</mml:mi></mml:mrow></mml:msub><mml:mi>s</mml:mi><mml:mo>=</mml:mo><mml:mi>m</mml:mi><mml:mi>T</mml:mi></mml:mrow></mml:math><tex-math id="IEq32_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sum _{s \in S} s = mT$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq32.gif"/></alternatives></inline-formula>. Can <italic>S</italic> be partitioned into triplets <inline-formula id="IEq33"><alternatives><mml:math id="IEq33_Math"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>m</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq33_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$S_1, \ldots , S_m$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq33.gif"/></alternatives></inline-formula> such that <inline-formula id="IEq34"><alternatives><mml:math id="IEq34_Math"><mml:mrow><mml:msub><mml:mo>∑</mml:mo><mml:mrow><mml:mi>s</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mi>s</mml:mi><mml:mo>=</mml:mo><mml:mi>T</mml:mi></mml:mrow></mml:math><tex-math id="IEq34_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sum _{s \in S_i} s = T$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq34.gif"/></alternatives></inline-formula> for all <inline-formula id="IEq35"><alternatives><mml:math id="IEq35_Math"><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>m</mml:mi></mml:mrow></mml:math><tex-math id="IEq35_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i = 1, \ldots , m$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq35.gif"/></alternatives></inline-formula>?</p></sec><sec><p id="Par20">In the reduction, the Y-connectors represent the elements of the multiset and the combiner boxes the triplets. The edges between strings and Y-connectors force an outflow from the Y-connector equal to the respective element of the multiset. So given an instance of <sc>3-Partition</sc>, we construct an instance of SoFaCLaP with 3<italic>m</italic> Y-connectors <inline-formula id="IEq36"><alternatives><mml:math id="IEq36_Math"><mml:mrow><mml:msub><mml:mi>y</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mrow><mml:mn>3</mml:mn><mml:mi>m</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:math><tex-math id="IEq36_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$y_1, \ldots , y_{3m}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq36.gif"/></alternatives></inline-formula>, each with capacity <inline-formula id="IEq37"><alternatives><mml:math id="IEq37_Math"><mml:mrow><mml:mi>T</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math><tex-math id="IEq37_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${T}/{2}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq37.gif"/></alternatives></inline-formula>, and <italic>mT</italic> strings such that the <inline-formula id="IEq38"><alternatives><mml:math id="IEq38_Math"><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><tex-math id="IEq38_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$s_i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq38.gif"/></alternatives></inline-formula> strings have an edge only to <inline-formula id="IEq39"><alternatives><mml:math id="IEq39_Math"><mml:msub><mml:mi>y</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><tex-math id="IEq39_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$y_i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq39.gif"/></alternatives></inline-formula> for all <inline-formula id="IEq40"><alternatives><mml:math id="IEq40_Math"><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mi>m</mml:mi></mml:mrow></mml:math><tex-math id="IEq40_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$i = 1, \ldots , 3m$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq40.gif"/></alternatives></inline-formula>. The instance has <italic>m</italic> combiner boxes <inline-formula id="IEq41"><alternatives><mml:math id="IEq41_Math"><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>m</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq41_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$c_1, \ldots , c_m$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq41.gif"/></alternatives></inline-formula>, each with capacity <italic>T</italic>. Recombiner boxes, inverters and transformers are not needed for this reduction, and neither are cable types, so there one of each, with capacity <italic>mT</italic>. All layers are fully connected except for the string layer as mentioned above. This graph has <inline-formula id="IEq42"><alternatives><mml:math id="IEq42_Math"><mml:mrow><mml:mi>m</mml:mi><mml:mi>T</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mi>T</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:math><tex-math id="IEq42_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$mT + 3m + T + 3$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq42.gif"/></alternatives></inline-formula> vertices and <inline-formula id="IEq43"><alternatives><mml:math id="IEq43_Math"><mml:mrow><mml:mi>m</mml:mi><mml:mi>T</mml:mi><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mi>m</mml:mi><mml:mi>T</mml:mi><mml:mo>+</mml:mo><mml:mi>m</mml:mi><mml:mo>+</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math><tex-math id="IEq43_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$mT + 3mT + m + 2$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq43.gif"/></alternatives></inline-formula> edges. Thus, the construction is possible in polynomial time since we may assume that <italic>T</italic> is polynomial in the size of the input.</p></sec><sec><p id="Par21">We show that the instance of <sc>3-Partition</sc> is a yes-instance if and only if the SoFaCLaP instance has a feasible solution. If the instance of <sc>3-Partition</sc> is a yes-instance, then we connect a Y-connector <inline-formula id="IEq44"><alternatives><mml:math id="IEq44_Math"><mml:msub><mml:mi>y</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><tex-math id="IEq44_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$y_i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq44.gif"/></alternatives></inline-formula> to a combiner box <inline-formula id="IEq45"><alternatives><mml:math id="IEq45_Math"><mml:msub><mml:mi>c</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:math><tex-math id="IEq45_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$c_j$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq45.gif"/></alternatives></inline-formula> if and only if <inline-formula id="IEq46"><alternatives><mml:math id="IEq46_Math"><mml:mrow><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>∈</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq46_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$s_i \in S_j$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq46.gif"/></alternatives></inline-formula>. The edges between the strings and the Y-connectors yield that <inline-formula id="IEq47"><alternatives><mml:math id="IEq47_Math"><mml:msub><mml:mi>y</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><tex-math id="IEq47_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$y_i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq47.gif"/></alternatives></inline-formula> has an outflow of exactly <inline-formula id="IEq48"><alternatives><mml:math id="IEq48_Math"><mml:mrow><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>&lt;</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>2</mml:mn><mml:mo>=</mml:mo><mml:mi mathvariant="normal">u</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq48_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$s_i &lt; {T}/{2} = \mathrm {u} (y_i)$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq48.gif"/></alternatives></inline-formula>. Since <inline-formula id="IEq49"><alternatives><mml:math id="IEq49_Math"><mml:mrow><mml:msub><mml:mo>∑</mml:mo><mml:mrow><mml:mi>s</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>S</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mi>s</mml:mi><mml:mo>=</mml:mo><mml:mi>T</mml:mi></mml:mrow></mml:math><tex-math id="IEq49_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\sum _{s \in S_j} s = T$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq49.gif"/></alternatives></inline-formula>, the capacity of <inline-formula id="IEq50"><alternatives><mml:math id="IEq50_Math"><mml:msub><mml:mi>c</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:math><tex-math id="IEq50_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$c_j$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq50.gif"/></alternatives></inline-formula> is not exceeded either. Thus, we obtain a feasible SoFaCLaP instance.</p></sec><sec><p id="Par22">On the other hand, let the constructed instance of SoFaCLaP be feasible. By means of <inline-formula id="IEq51"><alternatives><mml:math id="IEq51_Math"><mml:mrow><mml:mi>T</mml:mi><mml:mo stretchy="false">/</mml:mo><mml:mn>4</mml:mn><mml:mo>&lt;</mml:mo><mml:mi>s</mml:mi></mml:mrow></mml:math><tex-math id="IEq51_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${T}/{4} &lt; s$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq51.gif"/></alternatives></inline-formula>, it follows that each combiner box has at most three Y-connectors connected to it. If one combiner box had only two Y-connectors, another one would have four. Thus, each combiner box is connected to exactly three Y-connectors. Since the total capacity of all combiner boxes is exactly <italic>mT</italic>, the inflow at each combiner box equals <italic>T</italic>. Thus, the assignment of Y-connectors to combiner boxes gives an assignment of the elements of <italic>S</italic> to <italic>m</italic> triplets with the desired property. <inline-formula id="IEq52"><alternatives><mml:math id="IEq52_Math"><mml:mo>□</mml:mo></mml:math><tex-math id="IEq52_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\square$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq52.gif"/></alternatives></inline-formula></p></sec><sec><p id="Par23">We have shown that already finding a feasible solution is a difficult task, at least in the most general setting of SoFaCLaP. One might hope that the whole problem becomes a lot easier with additional simplifications. On the positive side, we suspect that finding a feasible solution is easy (Conjecture <xref rid="FPar4" ref-type="">1</xref>). On the negative side, it can be shown the optimization remains difficult (Theorem <xref rid="FPar3" ref-type="">2</xref>, proof omitted).</p></sec><sec id="FPar3"><title>Theorem 2</title><p id="Par24">It is strongly NP-hard to decide if an instance admits a solution with a value below a given threshold, even if the instance respects all of the following:</p></sec><sec><p id="Par25"><list list-type="bullet"><list-item><p id="Par26"><italic>Vertex positions are given by points in</italic> <inline-formula id="IEq53"><alternatives><mml:math id="IEq53_Math"><mml:msup><mml:mrow><mml:mi mathvariant="double-struck">Q</mml:mi></mml:mrow><mml:mn>2</mml:mn></mml:msup></mml:math><tex-math id="IEq53_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathbb {Q}^2$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq53.gif"/></alternatives></inline-formula><italic>and no two vertices have the same positions.</italic></p></list-item><list-item><p id="Par27"><italic>Edge lengths are given by the Euclidean distance of the endvertices.</italic></p></list-item><list-item><p id="Par28"><italic>All layers are fully connected.</italic></p></list-item><list-item><p id="Par29"><italic>There is only one cable type, which has unlimited capacity.</italic></p></list-item><list-item><p id="Par30"><italic>Lower vertex capacities do not apply.</italic></p></list-item></list></p></sec><sec id="FPar4"><title>Conjecture 1</title><p id="Par31">In the setting of Theorem <xref rid="FPar3" ref-type="">2</xref>, a feasible solution can be computed in polynomial time.</p></sec><sec><p id="Par32">These simplifications have multiple motivations: Euclidean coordinates and edge lengths are in line with real-world applications where vertices are placed in the plane. Fully connected layers occur when no connection is forbidden a priori by the solar farm planner (and on top of that, the construction in the proof of Theorem <xref rid="FPar1" ref-type="">1</xref> that forces a certain input to each Y-connector cannot be readily replicated). The remaining simplifications are rather a feature of the complexity proof, i.e., we do not need multiple cable types nor lower capacities to show NP-hardness. Nonetheless, they may be reasons for hardness themselves.</p></sec><sec id="Sec5"><title>Variants of the problem</title><p id="Par33">The order of the layers in the graph resembles a solar farm with central inverters. Solar farms can also be designed using string inverters (Mertens <xref ref-type="bibr" rid="CR21">2019</xref>), in which case <inline-formula id="IEq54"><alternatives><mml:math id="IEq54_Math"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>Y</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>C</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>R</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq54_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{S}, V_{Y}, V_{I}, V_{C}, V_{R}, V_{T}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq54.gif"/></alternatives></inline-formula> would be the order of the layers. The MILP formulation proposed in this paper can easily be adapted to the setting with string inverters.</p><p id="Par34">Strings can also be understood as having multiple connection points (<italic>outlets</italic>), out of which one is chosen for the cable layout. Each outlet may have different Y-connectors it can be connected to. The model above already covers this variant: For any pair of string and Y-connector, only the connection point closest to the Y-connector could possibly be used in an optimal solution. Therefore, all outlets of a string can be contracted into a single one (and therefore identified with the string itself). The edge lengths from the string to Y-connectors are then adjusted to reflect the actual distance between Y-connector and closest outlet. The synthetic benchmark instances proposed in this paper employ this variant using three connection points per string.</p><p id="Par35">The problem statement can naturally be extended to incorporate more potentially interesting aspects of solar farm layouting. Cable types can not only vary between the AC- and the DC-side but also between the layers. They may even vary between the edges, i. e. each edge may have its own set of cable types. This can for example be used to incorporate vertex installation costs or costs for different levels of utilization in relation to the capacity of a vertex.</p></sec><sec id="Sec6"><title>SoFaCLaP from a practical perspective</title><p id="Par36">We have mentioned that SoFaCLaP co-optimizes two aspects: picking a subset of potential intermediate vertices and finding a cable layout using vertices from that subset. A solar farm planner who wishes to use SoFaCLaP and any algorithmic approach has to specify the input, i.e., graph and cable types. For the graph, the planner has to decide on the (fixed) positions of all strings. They also have to provide possible locations for any intermediate device and the respective capacities. From those locations, the algorithmic approach will pick a suitable subset to be used in the cable layout. In their decisions, the planner has many degrees of freedom, which might not be obvious. Take, for example the edge set and the edge lengths. The planner can (but need not) choose to disallow certain connections from the graph for whichever reason. The edge lengths can (but need not) represent Euclidean lengths. One might choose to use the <inline-formula id="IEq55"><alternatives><mml:math id="IEq55_Math"><mml:msub><mml:mi>ℓ</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><tex-math id="IEq55_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\ell _1$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq55.gif"/></alternatives></inline-formula> metric [“Manhattan metric”, as in Luo et al. (<xref ref-type="bibr" rid="CR20">2021</xref>)] which only allows “horizontal” and “vertical” cable sections. Or the planner can assign arbitrary lengths to account for difficult terrain. This also includes a constant additive offset to edge lengths to account for necessary cables used inside the different devices.</p><p id="Par37">With these and many more degrees of freedom, SoFaCLaP is supposed to be adaptable to many different modelling decisions a solar farm planner might want to take.</p></sec></sec><sec id="Sec7"><title>A mixed-integer linear program</title><p id="Par38">SoFaCLaP can be formulated as a MILP using variables <inline-formula id="IEq56"><alternatives><mml:math id="IEq56_Math"><mml:mrow><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi mathvariant="italic">ij</mml:mi></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math><tex-math id="IEq56_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$f _{ij} \ge 0$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq56.gif"/></alternatives></inline-formula> for the flow on <inline-formula id="IEq57"><alternatives><mml:math id="IEq57_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:math><tex-math id="IEq57_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(i,j) \in E$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq57.gif"/></alternatives></inline-formula> and binary variables <inline-formula id="IEq58"><alternatives><mml:math id="IEq58_Math"><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi mathvariant="italic">ijk</mml:mi></mml:mrow></mml:msub></mml:math><tex-math id="IEq58_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$x _{ijk}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq58.gif"/></alternatives></inline-formula> stating whether cable type <inline-formula id="IEq59"><alternatives><mml:math id="IEq59_Math"><mml:mi>k</mml:mi></mml:math><tex-math id="IEq59_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$k$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq59.gif"/></alternatives></inline-formula> is used on edge (<italic>i</italic>, <italic>j</italic>). Here, the zero-capacity cable type is omitted. This way of modelling the cable types has been used for the Wind Farm Cabling Problem (Lehmann et al. <xref ref-type="bibr" rid="CR16">2017</xref>). The following formulation is based on the standard variant of SoFaCLaP with the implicit inclusion of string connection points as outlined in <xref rid="Sec5" ref-type="sec">Variants of the problem</xref>.</p><p id="Par39">The goal of SoFaCLaP is to minimize the total installation cost<disp-formula id="Equ3"><label>3</label><alternatives><mml:math display="block" id="Equ3_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mo movablelimits="true">min</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>∈</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi mathvariant="italic">ijk</mml:mi></mml:mrow></mml:msub><mml:mo>·</mml:mo><mml:mi>c</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>·</mml:mo><mml:mi mathvariant="normal">len</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mtext>.</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ3_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \min \sum _{(i,j) \in E} \sum _{k \in K} x _{ijk} \cdot c (k) \cdot \mathrm {len}((i,j))\text {.} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ3.gif"/></alternatives></disp-formula>The total flow leaving each string is the production of the string<disp-formula id="Equ4"><label>4</label><alternatives><mml:math display="block" id="Equ4_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi mathvariant="italic">ij</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mrow><mml:mo>∀</mml:mo><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mtext>,</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ4_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \sum _{(i,j) \in E} f _{ij}&amp;= 1&amp;\forall i \in V_{S} \text {,} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ4.gif"/></alternatives></disp-formula>and flow must be conserved at intermediate vertices<disp-formula id="Equ5"><label>5</label><alternatives><mml:math display="block" id="Equ5_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi mathvariant="italic">ij</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mo>,</mml:mo><mml:mi>l</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi mathvariant="italic">jl</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mrow><mml:mo>∀</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mi>V</mml:mi><mml:mo lspace="0.15em" rspace="0.15em" stretchy="false">\</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mo>∪</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mtext>.</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ5_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \sum _{(i,j) \in E} f _{ij}&amp;= \sum _{(j,l) \in E} f _{jl}&amp;\forall j \in V \setminus (V_{S} \cup V_{T})\text {.} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ5.gif"/></alternatives></disp-formula>The capacities at the vertices must be respected<disp-formula id="Equ6"><label>6</label><alternatives><mml:math display="block" id="Equ6_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi mathvariant="italic">ij</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>≤</mml:mo><mml:mi mathvariant="normal">u</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mrow><mml:mo>∀</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mi>V</mml:mi><mml:mo lspace="0.15em" rspace="0.15em" stretchy="false">\</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mtext>,</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ6_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \sum _{(i,j) \in E} f _{ij}&amp;\le \mathrm {u} (j)&amp;\forall j \in V \setminus V_{S} \text {,} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ6.gif"/></alternatives></disp-formula><disp-formula id="Equ7"><label>7</label><alternatives><mml:math display="block" id="Equ7_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi mathvariant="italic">ij</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>≥</mml:mo><mml:mi>ℓ</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo>·</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>∈</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi mathvariant="italic">ijk</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mrow><mml:mo>∀</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mtext>,</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ7_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \sum _{(i,j) \in E} f _{ij}&amp;\ge \mathrm {\ell } (j) \cdot \sum _{(i,j) \in E} \sum _{k \in K} x _{ijk}&amp;\forall j \in V_{I} \text {,} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ7.gif"/></alternatives></disp-formula>whereas lower capacities only apply if a vertex is indeed used.</p><p id="Par40">For all vertices except transformers, only one outgoing edge may have flow and thereby non-zero capacity<disp-formula id="Equ8"><label>8</label><alternatives><mml:math display="block" id="Equ8_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>∈</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi mathvariant="italic">ijk</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>≤</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mrow><mml:mo>∀</mml:mo><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mi>V</mml:mi><mml:mo lspace="0.15em" rspace="0.15em" stretchy="false">\</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mtext>,</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ8_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \sum _{(i,j) \in E} \sum _{k \in K} x _{ijk}&amp;\le 1&amp;\forall i \in V \setminus V_{T} \text {,} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ8.gif"/></alternatives></disp-formula>which implies that only one cable type is used per edge. This cable type must have sufficient capacity to hold the flow<disp-formula id="Equ9"><label>9</label><alternatives><mml:math display="block" id="Equ9_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi mathvariant="italic">ij</mml:mi></mml:mrow></mml:msub></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>≤</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mi>k</mml:mi><mml:mo>∈</mml:mo><mml:mi>K</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:mi mathvariant="italic">ijk</mml:mi></mml:mrow></mml:msub><mml:mo>·</mml:mo><mml:mi mathvariant="normal">cap</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>k</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow></mml:mtd><mml:mtd columnalign="right"><mml:mrow><mml:mo>∀</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi><mml:mtext>.</mml:mtext></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ9_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} f_{ij}&amp;\le \sum _{k \in K} x _{ijk} \cdot \mathrm {cap} (k) &amp;\forall (i,j) \in E \text {.} \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ9.gif"/></alternatives></disp-formula>In total, this linear program has <inline-formula id="IEq60"><alternatives><mml:math id="IEq60_Math"><mml:mrow><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mi>K</mml:mi><mml:mo stretchy="false">|</mml:mo><mml:mo>·</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">|</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><tex-math id="IEq60_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {O}(\vert K \vert \cdot \vert E \vert )$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq60.gif"/></alternatives></inline-formula> binary and <inline-formula id="IEq61"><alternatives><mml:math id="IEq61_Math"><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:math><tex-math id="IEq61_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\vert E \vert$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq61.gif"/></alternatives></inline-formula> real variables as well as <inline-formula id="IEq62"><alternatives><mml:math id="IEq62_Math"><mml:mrow><mml:mi mathvariant="script">O</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="false">|</mml:mo><mml:mo>+</mml:mo><mml:mo stretchy="false">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">|</mml:mo><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><tex-math id="IEq62_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {O}(\vert V \vert + \vert E \vert )$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq62.gif"/></alternatives></inline-formula> constraints.</p></sec><sec id="Sec8"><title>Simulations and evaluation</title><p id="Par41">An evaluation of the solution methods outlined in A mixed-integer linear program on example instances shall give the reader insights into the performance of the MILP and thereby establish it as a (first) solution method to SoFaCLaP. Since we have not been able to obtain suitable real-world instances<xref ref-type="fn" rid="Fn1">1</xref> to evaluate the MILP, we resort to generating synthetic instances as described in <xref rid="Sec9" ref-type="sec">Framework for benchmark generation</xref> and in <xref rid="Sec10" ref-type="sec">Generating benchmark instances</xref>. The benchmark instances use the GraphML format (Brandes et al. <xref ref-type="bibr" rid="CR5">2002</xref>) and are available from <ext-link xlink:href="http://www.doi.org/10.35097/676" ext-link-type="uri">http://www.doi.org/10.35097/676</ext-link>, where a thorough specification of the format can be found as well.</p><p id="Par42">If the benchmark instances are sufficiently variable to cover a wide range of plausible inputs to the solution approaches, the use of synthetic instances has multiple advantages. First, a larger number of different instances can be generated so that tendencies in the comparison of two approaches are less likely to be a result of statistical noise. Second, the solar farms in consideration can include more strings than any currently existing solar farms. Thus, the applicability of the algorithms for a future increase in solar farm sizes can already be investigated now.</p><sec id="Sec9"><title>Framework for benchmark generation</title><p id="Par43">We describe the general approach we propose for the generation of benchmark instances on a high level in this section. The next section is dedicated to breathing life into the framework by describing the process in more detailed steps with concrete values for the parameters. These values are based on real-world examples of devices used in solar farms as evidenced by Tables <xref rid="Tab1" ref-type="table">1</xref> and <xref rid="Tab2" ref-type="table">2</xref>.</p><p id="Par44">The first steps in the framework deal with placing the strings. For synthetic instances we opt for randomly sampling the strings with a minimum distance. Next, the location of vertices of higher layers are determined, starting at the Y-connectors. We let the number of vertices in a layer depend on the number of vertices in a previous layer. We assume fully connected layers, which leads to the maximum number of possible connections between layers. After the graph is determined, vertex capacities are set. We choose these randomly with bounds based on the minimum capacity necessary to connect all strings. Lastly, cable types are included which we derive from real-world photovoltaic cables.</p><p id="Par45">Users of the proposed framework may want to alter any intermediate step to realize certain additionally desired properties on the solar farm instances. For example, users could prespecify all the string positions or fix the number of vertices within a layer. They may want to change the sampling process, for example to have all recombiner boxes close to each other. The edge set can be thinned out if, for example, cables should not exceed a certain length. Users can define their own cable types.<table-wrap id="Tab1"><label>Table 1</label><caption xml:lang="en"><p>Design parameters for graph layer sizes</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" colspan="2"><p>Layer</p></th><th align="left" colspan="9"><p>Category</p></th></tr><tr><th align="left"><p>In consideration</p></th><th align="left"><p>Reference</p></th><th align="left" colspan="3"><p>Small</p></th><th align="left" colspan="3"><p>Medium</p></th><th align="left" colspan="3"><p>Large</p></th></tr></thead><tbody><tr><td align="left"><p><inline-formula id="IEq63"><alternatives><mml:math id="IEq63_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub></mml:math><tex-math id="IEq63_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{S}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq63.gif"/></alternatives></inline-formula></p></td><td align="left"><p>1</p></td><td char="." align="char"><p>120</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>180</p></td><td char="." align="char"><p>500</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>750</p></td><td char="." align="char"><p>1200</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>1500</p></td></tr><tr><td align="left"><p><inline-formula id="IEq64"><alternatives><mml:math id="IEq64_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>Y</mml:mi></mml:msub></mml:math><tex-math id="IEq64_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{Y}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq64.gif"/></alternatives></inline-formula></p></td><td align="left"><p><inline-formula id="IEq65"><alternatives><mml:math id="IEq65_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub></mml:math><tex-math id="IEq65_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{S}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq65.gif"/></alternatives></inline-formula></p></td><td char="." align="char"><p>1.5</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>3</p></td><td char="." align="char"><p>1.5</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>3</p></td><td char="." align="char"><p>1.5</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>3</p></td></tr><tr><td align="left"><p><inline-formula id="IEq66"><alternatives><mml:math id="IEq66_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>C</mml:mi></mml:msub></mml:math><tex-math id="IEq66_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{C}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq66.gif"/></alternatives></inline-formula></p></td><td align="left"><p><inline-formula id="IEq67"><alternatives><mml:math id="IEq67_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub></mml:math><tex-math id="IEq67_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{S}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq67.gif"/></alternatives></inline-formula><sup>a</sup>   </p></td><td char="." align="char"><p>10</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>20</p></td><td char="." align="char"><p>10</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>20</p></td><td char="." align="char"><p>10</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>20</p></td></tr><tr><td align="left"><p><inline-formula id="IEq68"><alternatives><mml:math id="IEq68_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>R</mml:mi></mml:msub></mml:math><tex-math id="IEq68_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{R}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq68.gif"/></alternatives></inline-formula></p></td><td align="left"><p><inline-formula id="IEq69"><alternatives><mml:math id="IEq69_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>C</mml:mi></mml:msub></mml:math><tex-math id="IEq69_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{C}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq69.gif"/></alternatives></inline-formula><sup>b</sup>   </p></td><td char="." align="char"><p>3</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>8</p></td><td char="." align="char"><p>3</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>10<sup>c</sup>  </p></td><td char="." align="char"><p>3</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>10<sup>c</sup>  </p></td></tr><tr><td align="left"><p><inline-formula id="IEq70"><alternatives><mml:math id="IEq70_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub></mml:math><tex-math id="IEq70_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{I}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq70.gif"/></alternatives></inline-formula></p></td><td align="left"><p><inline-formula id="IEq71"><alternatives><mml:math id="IEq71_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub></mml:math><tex-math id="IEq71_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{S}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq71.gif"/></alternatives></inline-formula></p></td><td char="." align="char"><p><inline-formula id="IEq72"><alternatives><mml:math id="IEq72_Math"><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq72_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\vert {V_{I}} \vert$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq72.gif"/></alternatives></inline-formula></p></td><td char="." align="char"><p>=</p></td><td char="." align="char"><p>1</p></td><td char="." align="char"><p>200</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>300</p></td><td char="." align="char"><p>200</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>300</p></td></tr><tr><td align="left"><p><inline-formula id="IEq73"><alternatives><mml:math id="IEq73_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub></mml:math><tex-math id="IEq73_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{T}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq73.gif"/></alternatives></inline-formula></p></td><td align="left"><p><inline-formula id="IEq74"><alternatives><mml:math id="IEq74_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>I</mml:mi></mml:msub></mml:math><tex-math id="IEq74_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V_{I}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq74.gif"/></alternatives></inline-formula></p></td><td char="." align="char"><p><inline-formula id="IEq75"><alternatives><mml:math id="IEq75_Math"><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq75_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\vert V_{T} \vert$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq75.gif"/></alternatives></inline-formula></p></td><td char="." align="char"><p>=</p></td><td char="." align="char"><p>1</p></td><td char="." align="char"><p>1</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>3<sup>d</sup>  </p></td><td char="." align="char"><p>1</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>3<sup>d</sup>  </p></td></tr></tbody></table><table-wrap-foot><p><sup>a</sup>In the example solar farm by ABB (ABB Ltd. <xref ref-type="bibr" rid="CR1">2019</xref>, Annex B), each combiner box connectes 13 or 14 strings. A combiner box by LS Electric has possible inputs of 12, 16, or 20 (LS ELECTRIC Co., Ltd. <xref ref-type="bibr" rid="CR19">2021</xref>). Combiner boxes by SMA connect up to 32 strings, but no recombiner boxes are used (SMA Solar Technology AG <xref ref-type="bibr" rid="CR24">2020</xref>)</p><p><inline-formula id="IEq76"><alternatives><mml:math id="IEq76_Math"><mml:msup><mml:mrow/><mml:mtext>b</mml:mtext></mml:msup></mml:math><tex-math id="IEq76_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$^{\text{b}}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq76.gif"/></alternatives></inline-formula>Based on the recombiner boxes in SolarBOS, Inc. (<xref ref-type="bibr" rid="CR25">2022</xref>)</p><p><sup>c</sup>10 or <inline-formula id="IEq77"><alternatives><mml:math id="IEq77_Math"><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mn>26</mml:mn><mml:mo>-</mml:mo><mml:mspace width="0.333333em"/><mml:mtext>ratio</mml:mtext><mml:mspace width="0.333333em"/><mml:msub><mml:mi>V</mml:mi><mml:mi>C</mml:mi></mml:msub><mml:mo>:</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math><tex-math id="IEq77_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$(26-\text { ratio } V_{C}: V_{S})$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq77.gif"/></alternatives></inline-formula>, whichever is lower, based on the idea that parallel connections of many strings in both combiner and recombiner boxes yields excessive amounts of electric current</p><p><sup>d</sup>An example of two inverters connected to a transformer can be found in Gajda (<xref ref-type="bibr" rid="CR9">2022</xref>)</p></table-wrap-foot></table-wrap><table-wrap id="Tab2"><label>Table 2</label><caption xml:lang="en"><p>Cable types used in simulations</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" colspan="2"><p>Cable type</p></th><th align="left" colspan="2"><p>Specifications as in HELUKABEL GmbH (<xref ref-type="bibr" rid="CR13">2021</xref>)</p></th></tr><tr><th align="left"><p>Cost <italic>c</italic></p></th><th align="left"><p>Capacity cap</p></th><th align="left"><p>Ampacity [A] at 60 °C</p></th><th align="left"><p>Copper Weight [kg per km]</p></th></tr></thead><tbody><tr><td char="." align="char"><p>4</p></td><td char="." align="char"><p>5</p></td><td char="." align="char"><p>55</p></td><td char="." align="char"><p>38.4</p></td></tr><tr><td char="." align="char"><p>34</p></td><td char="." align="char"><p>22</p></td><td char="." align="char"><p>218</p></td><td char="." align="char"><p>336</p></td></tr><tr><td char="." align="char"><p>120</p></td><td char="." align="char"><p>50</p></td><td char="." align="char"><p>488</p></td><td char="." align="char"><p>1152</p></td></tr><tr><td char="." align="char"><p>230</p></td><td char="." align="char"><p>80</p></td><td char="." align="char"><p>775</p></td><td char="." align="char"><p>2304</p></td></tr><tr><td char="." align="char"><p>750</p></td><td char="." align="char"><p>180</p></td><td align="left" colspan="2"><p>Extrapolated</p></td></tr><tr><td char="." align="char"><p>2300</p></td><td char="." align="char"><p>400</p></td><td align="left" colspan="2"><p>Extrapolated</p></td></tr></tbody></table></table-wrap></p></sec><sec id="Sec10"><title>Generating benchmark instances</title><p id="Par46">For our purposes, the framework introduced in the previous section is used as follows. Benchmark instances are generated in three categories: <italic>Small</italic> (120–180 strings per instance), <italic>Medium</italic> (500–750 strings), and <italic>Large</italic> (1200–1500 strings). We describe the process of generating an instance: First, a rectangle is fixed that simulates the area of the solar farm. One of the corners is defined as the origin giving rise to a coordinate system. The (virtual) unit of length is irrelevant since SoFaCLaP solution values scale with the underlying unit of length. Next, an angle <inline-formula id="IEq82"><alternatives><mml:math id="IEq82_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq82_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq82.gif"/></alternatives></inline-formula> for the orientation of the strings in relation to the coordinate system is chosen randomly. The total number of strings is drawn from the intervals above and, one after another, the strings are placed in the rectangle: A random point <italic>P</italic> is sampled from the rectangle serving as one of the connection points of the string. For the purpose of describing the process, we refer to this point as the <italic>base</italic> of the string. If <italic>P</italic> respects a globally specified minimum distance from the bases of all previously successfully sampled strings, the connection points are defined. On a ray starting at <italic>P</italic> with angle <inline-formula id="IEq83"><alternatives><mml:math id="IEq83_Math"><mml:mi>α</mml:mi></mml:math><tex-math id="IEq83_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\alpha$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq83.gif"/></alternatives></inline-formula> to the coordinate system’s x-axis two more connection points are placed equidistantly, with the distance being the same for all strings. If, however, <italic>P</italic> is too close to another base, a new base <italic>P</italic> is sampled. If the process of placing a string fails too often, the whole instance is discarded and a new rectangle is chosen.</p><p id="Par47">With all the strings placed, the higher layers of vertices are randomly placed, starting with the Y-connectors. For each layer, a ratio according to Table <xref rid="Tab1" ref-type="table">1</xref> is chosen randomly and the number of vertices on the next layer is defined as <inline-formula id="IEq84"><alternatives><mml:math id="IEq84_Math"><mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi mathvariant="normal">next</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo>⌈</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mi mathvariant="normal">reference</mml:mi></mml:msub><mml:mo stretchy="false">/</mml:mo><mml:mtext>ratio</mml:mtext><mml:mo>⌉</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq84_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V _{\mathrm {next}} = \lceil {V _{\mathrm {reference}}}/ {\text {ratio}}\rceil$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq84.gif"/></alternatives></inline-formula>. The ratios are chosen in a way to ensure decreasing sizes of layers. For the <italic>small</italic> instances, the number of transformers and inverters is fixed as 1. Y-connectors and combiner boxes are placed in close proximity to string connection points. Recombiner boxes are placed close to combiner boxes. Inverters and transformers are placed on random points in the rectangle, respecting minimum distances to the string bases as well as previously placed inverters and transformers. The reasoning is that strings, inverters and transformers are themselves bigger components and need to be more easily accessible for maintenance.</p><p id="Par48">Picking (upper and lower) capacity values for the different layers can be a delicate issue from an algorithmic point of view: With very tight capacities, the design questions of picking one position for a, say, combiner box over another becomes easy: all possible positions have to be used. Very loose capacities mitigate the algorithmic difficulty of picking a suitable subset of, say, strings to be assigned to a specific Y-connector. We deem the assumption fair that all vertices of a layer have the same capacities since planners presumably would not design solar farms with two different versions of, say, inverters. Given a layer <inline-formula id="IEq85"><alternatives><mml:math id="IEq85_Math"><mml:msub><mml:mi>V</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><tex-math id="IEq85_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V _i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq85.gif"/></alternatives></inline-formula> a capacity of at least <inline-formula id="IEq86"><alternatives><mml:math id="IEq86_Math"><mml:mrow><mml:msub><mml:mi mathvariant="normal">lb</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mrow><mml:mo>⌈</mml:mo><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow><mml:mo>⌉</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq86_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {lb}_i :=\lceil {\vert V_{S} \vert }/{\vert V _i \vert }\rceil$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq86.gif"/></alternatives></inline-formula> is required. For each layer, a random integer between <inline-formula id="IEq87"><alternatives><mml:math id="IEq87_Math"><mml:msub><mml:mi mathvariant="normal">lb</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math><tex-math id="IEq87_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {lb}_i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq87.gif"/></alternatives></inline-formula> and <inline-formula id="IEq88"><alternatives><mml:math id="IEq88_Math"><mml:mrow><mml:mi>λ</mml:mi><mml:mo>·</mml:mo><mml:msub><mml:mi mathvariant="normal">lb</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math><tex-math id="IEq88_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\lambda \cdot \mathrm {lb}_i$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq88.gif"/></alternatives></inline-formula> is chosen, where <inline-formula id="IEq89"><alternatives><mml:math id="IEq89_Math"><mml:mrow><mml:mi>λ</mml:mi><mml:mo>=</mml:mo><mml:mn>1.2</mml:mn></mml:mrow></mml:math><tex-math id="IEq89_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\lambda = 1.2$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq89.gif"/></alternatives></inline-formula> for inverters and <inline-formula id="IEq90"><alternatives><mml:math id="IEq90_Math"><mml:mrow><mml:mi>λ</mml:mi><mml:mo>=</mml:mo><mml:mn>1.5</mml:mn></mml:mrow></mml:math><tex-math id="IEq90_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\lambda = 1.5$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq90.gif"/></alternatives></inline-formula> for all other layers. The smaller value for inverters is selected with the idea in mind that solar farm planners will not overly deviate the capacities of inverters from the capacity best suited for the intended use. For recombiner boxes and inverters only, the capacity will, however, be at least twice the capacity of the previous layer to ensure that two fully-used vertices of the previous layer can be connected. The randomly chosen lower capacity for inverters is at least 0.5 and at most 0.8 times the inverters’ upper capacity.</p><p id="Par49">The edge set is assumed to be complete, i.e., equality holds in Eq. (<xref rid="Equ2" ref-type="disp-formula">2</xref>). We have no reason to prohibit specific edges (although solar farm planners might). Thus, we leave it to the algorithms to pick the most suitable edges from the complete set.</p><p id="Par50">The cable types for the simulations as shown in Table <xref rid="Tab2" ref-type="table">2</xref> are based on the photovoltaics cable SOLARFLEX-X PV1-F by HELUKABEL (HELUKABEL GmbH <xref ref-type="bibr" rid="CR13">2021</xref>). Four sizes are considered, the forth one being the biggest size available. The rated ampacity is approximately translated into a capacity on the amount of strings, where a current of 10 A per string is assumed (ABB Ltd <xref ref-type="bibr" rid="CR1">2019</xref>, p. 121). Since cost quotations are not readily available, we assumed that the costs are in essence proportional to the amount of copper used in a cable. The exact unit for the costs is irrelevant since the optimization function in SoFaCLaP can be scaled arbitrarily. For aesthetical reasons, we opted for somewhat round values in the bigger cable types. No influence on the performance of algorithms is expected from those changes. These four cable types are not big enough to be used in the largest benchmark instances. Thus, we included two artificial cable types to conduct meaningful experiments on the biggest instances. These cable types were extrapolated from the smaller cables types, roughly following the motto “Doubling the capacities yields triple the cost.”<fig id="Fig2"><label>Fig. 2</label><caption xml:lang="en"><p>A toy example of a solar farm, in which all vertex capacities are sufficient but their interaction implies infeasibility. Due to 30 strings, each inverter needs an inflow of 10 and each transformer an inflow of 15. But with only one outgoing edge per vertex allowed, inverters and transformers cannot be connected</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_200_Fig2_HTML.png" id="MO11"/></fig></p><p id="Par51">Some of the benchmark instances generated as outlined above may be infeasible. Since capacities are chosen in a way that the total capacity of a layer is at least the number of strings and since the edge set is complete, infeasibility can only arise from the interaction of the sizes and capacities of the layers as a whole. A toy example of such a constellation can be seen in Fig. <xref rid="Fig2" ref-type="fig">2</xref>. We purposefully keep such instances because it may be a feature of algorithms developed for SoFaCLaP to be able to detect infeasibility (see also “<xref rid="Sec12" ref-type="sec">Results: optimality and (in-)feasibility</xref>”).</p></sec><sec id="Sec11"><title>Simulation setup</title><p id="Par52">The MILP formulation from <xref rid="Sec7" ref-type="sec">A mixed-integer linear program</xref> is translated into C<inline-formula id="IEq91"><alternatives><mml:math id="IEq91_Math"><mml:mrow><mml:mo>+</mml:mo><mml:mo>+</mml:mo></mml:mrow></mml:math><tex-math id="IEq91_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${{\textbf {++}}}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq91.gif"/></alternatives></inline-formula>14 code. The code uses the Open Graph Drawing Framework (Catalpa release) (Chimani et al. <xref ref-type="bibr" rid="CR6">2013</xref>) for parsing the benchmark instances and the C<inline-formula id="IEq92"><alternatives><mml:math id="IEq92_Math"><mml:mrow><mml:mo>+</mml:mo><mml:mo>+</mml:mo></mml:mrow></mml:math><tex-math id="IEq92_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${{\textbf {++}}}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq92.gif"/></alternatives></inline-formula>-API provided by Gurobi (Gurobi Optimization, Inc. <xref ref-type="bibr" rid="CR12">2018</xref>). For compilation, GCC 10.3.0 is used with the -Ofast -march=native flags. All simulations are run on a 64-bit architecture with four 12-core AMD CPUs each with 2.1 GHz with the openSUSE Leap 15.3 operating system. The MILP formulation is solved by Gurobi 9.5.0 in single-threaded mode with a maximum running time of one day per instance, with 40 instances running simultaneously.</p><p id="Par53">For the simulations, 80 randomly generated instances of each of the three categories <italic>Small</italic>, <italic>Medium</italic>, and <italic>Large</italic> are considered. An overview of the characteristics of these 240 instances is shown in Table <xref rid="Tab3" ref-type="table">3</xref>.<table-wrap id="Tab3"><label>Table 3</label><caption xml:lang="en"><p>Characteristics of instances used in simulations</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><p>Category</p></th><th align="left" colspan="3"><p><inline-formula id="IEq93"><alternatives><mml:math id="IEq93_Math"><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq93_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\vert V_{S} \vert$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq93.gif"/></alternatives></inline-formula></p></th><th align="left" colspan="3"><p><inline-formula id="IEq94"><alternatives><mml:math id="IEq94_Math"><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:math><tex-math id="IEq94_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\vert V \vert$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq94.gif"/></alternatives></inline-formula></p></th><th align="left" colspan="3"><p><inline-formula id="IEq95"><alternatives><mml:math id="IEq95_Math"><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="false">|</mml:mo></mml:mrow></mml:math><tex-math id="IEq95_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\vert E \vert$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq95.gif"/></alternatives></inline-formula></p></th></tr><tr><th align="left"/><th align="left"><p>min</p></th><th align="left"><p>median</p></th><th align="left"><p>max</p></th><th align="left"><p>min</p></th><th align="left"><p>median</p></th><th align="left"><p>max</p></th><th align="left"><p>min</p></th><th align="left"><p>median</p></th><th align="left"><p>max</p></th></tr></thead><tbody><tr><td align="left"><p>Small</p></td><td char="." align="char"><p>120</p></td><td char="." align="char"><p>145</p></td><td char="." align="char"><p>180</p></td><td char="." align="char"><p>176</p></td><td char="." align="char"><p>224.5</p></td><td char="." align="char"><p>305</p></td><td char="." align="char"><p>5566</p></td><td char="." align="char"><p>10528</p></td><td char="." align="char"><p>20515</p></td></tr><tr><td align="left"><p>Medium</p></td><td char="." align="char"><p>502</p></td><td char="." align="char"><p>632</p></td><td char="." align="char"><p>750</p></td><td char="." align="char"><p>781</p></td><td char="." align="char"><p>966.5</p></td><td char="." align="char"><p>1234</p></td><td char="." align="char"><p>108654</p></td><td char="." align="char"><p>190792</p></td><td char="." align="char"><p>345969</p></td></tr><tr><td align="left"><p>Large</p></td><td char="." align="char"><p>1200</p></td><td char="." align="char"><p>1248</p></td><td char="." align="char"><p>1500</p></td><td char="." align="char"><p>1726</p></td><td char="." align="char"><p>1920</p></td><td char="." align="char"><p>2459</p></td><td char="." align="char"><p>538923</p></td><td char="." align="char"><p>732858</p></td><td char="." align="char"><p>1369140</p></td></tr></tbody></table></table-wrap></p><p id="Par54">The ranges for the number of strings are almost fully used. It stands out that the median of number of strings in the <italic>large</italic> instances is much smaller than 1350, which is what one would naïvely expect. A possible reason is that the process of placing a large number of strings, inverters and transformers, each of which observe a minimum distance to each other, failed too often. In that case, the instances would be discarded and a new number of strings would be drawn randomly. A possible remedy is to enlarge the initial rectangle for the solar farms for the large instances.</p><p id="Par55">The number of vertices is linear in the number of strings with a small coefficient. This is as expected from the ratios shown in Table <xref rid="Tab1" ref-type="table">1</xref>. The number of edges grows fast with over 1.3 million edges for instances with up to 1500 strings. From a theoretical perspective, a fast increase is expected: Layers are fully connected and the number of vertices per layer is linear in the number of strings. Thus, the number of edges grows quadratically with the number of strings.</p></sec><sec id="Sec12"><title>Results: optimality and (in-)feasibility</title><p id="Par56">In our setting, Gurobi terminates with one of four optimization states: Ideally, an instance is solved to (proven) optimality (Status: <italic>optimal</italic>). Secondly, Gurobi may find a feasible solution but fail to prove that it is optimal (Status: <italic>feasible</italic>). In that case, the best proven lower bound (<inline-formula id="IEq102"><alternatives><mml:math id="IEq102_Math"><mml:mi mathvariant="normal">lb</mml:mi></mml:math><tex-math id="IEq102_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {lb}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq102.gif"/></alternatives></inline-formula>) does not match the solution value (<inline-formula id="IEq103"><alternatives><mml:math id="IEq103_Math"><mml:mi mathvariant="normal">ub</mml:mi></mml:math><tex-math id="IEq103_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathrm {ub}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq103.gif"/></alternatives></inline-formula>), and the feasible solution may or may not be optimal. Thirdly, Gurobi may be able to prove that an instance does not admit any feasible solution (Status: <italic>infeasible</italic>). Lastly, Gurobi may not find any feasible solution but fail to prove infeasibility. In that case, the instance may or may not be feasible (Status: <italic>unknown</italic>).</p><p id="Par57">In the following, we want to investigate how often Gurobi terminates in each of those states across the different categories of instances to see what we can learn about the applicability of the MILP formulation and Gurobi to solve SoFaCLaP.</p><p id="Par58">The upper part of Table <xref rid="Tab4" ref-type="table">4</xref> shows how often Gurobi terminates in the different states at the end of the maximum running time of one day. Nearly all of the small instances are solved to optimality within one day. A solution is considered optimal once the MIP gap<xref ref-type="fn" rid="Fn2">2</xref> is below the optimality tolerance of 0.0001%. Since the number of variables and constraints in the MILP formulation grow linearly with the number of edges, Gurobi can most probably not uphold the performance on bigger instances.
<table-wrap id="Tab4"><label>Table 4</label><caption xml:lang="en"><p>Amount of instances per optimization status for different stages of MILP simulations</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left"><p>Category</p></th><th align="left"><p>Total</p></th><th align="left"><p>Optimal</p></th><th align="left"><p>Feasible</p></th><th align="left"><p>Infeasible</p></th><th align="left"><p>Unknown</p></th></tr></thead><tbody><tr><td align="left" colspan="6"><p>MILP (<xref rid="Sec7" ref-type="sec">A mixed-integer linear program</xref>), one day</p></td></tr><tr><td align="left"><p> Small</p></td><td char="." align="char"><p>80</p></td><td char="." align="char"><p>79</p></td><td char="." align="char"><p>1</p></td><td char="." align="char"><p>0</p></td><td char="." align="char"><p>0</p></td></tr><tr><td align="left"><p> Medium</p></td><td char="." align="char"><p>80</p></td><td char="." align="char"><p>16</p></td><td char="." align="char"><p>48</p></td><td char="." align="char"><p>12</p></td><td char="." align="char"><p>4</p></td></tr><tr><td align="left"><p> Large</p></td><td char="." align="char"><p>80</p></td><td char="." align="char"><p>0</p></td><td char="." align="char"><p>50</p></td><td char="." align="char"><p>5</p></td><td char="." align="char"><p>25</p></td></tr><tr><td align="left" colspan="6"><p>MILP (<xref rid="Sec7" ref-type="sec">A mixed-integer linear program</xref>), one cable type, 1 day</p></td></tr><tr><td align="left"><p> Small</p></td><td char="." align="char"><p>0</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>–</p></td></tr><tr><td align="left"><p> Medium</p></td><td char="." align="char"><p>4</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>0</p></td><td char="." align="char"><p>2</p></td><td char="." align="char"><p>2</p></td></tr><tr><td align="left"><p> Large</p></td><td char="." align="char"><p>25</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>14</p></td><td char="." align="char"><p>5</p></td><td char="." align="char"><p>6</p></td></tr><tr><td align="left" colspan="6"><p>MILP, one cable type, additional constraints (Eq. <xref rid="Equ10" ref-type="disp-formula">10</xref>)</p></td></tr><tr><td align="left"><p> Small</p></td><td char="." align="char"><p>0</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>–</p></td></tr><tr><td align="left"><p> Medium</p></td><td char="." align="char"><p>2</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>0</p></td><td char="." align="char"><p>1</p></td><td char="." align="char"><p>1</p></td></tr><tr><td align="left"><p> Large</p></td><td char="." align="char"><p>6</p></td><td char="." align="char"><p>–</p></td><td char="." align="char"><p>0</p></td><td char="." align="char"><p>1</p></td><td char="." align="char"><p>5</p></td></tr></tbody></table><table-wrap-foot><p>The specifications for the experiments are in the main text body</p></table-wrap-foot></table-wrap></p><p id="Par59">Indeed, for the medium instances, the number of instances that are solved to optimality decreases by a big margin compared to the small instances, but still one in five instances is solved optimally. About one in seven instances are shown to be infeasible. The fact that Gurobi does not find any feasible solution on 4 out of 80 instances within one day (optimization status: unknown) makes us suspect that those instances are infeasible. On instances of those sizes one would expect that Gurobi would find a feasible solution within one day if a solution existed. We come back to those “unknown” instances later in this section.</p><p id="Par60">As for the biggest instances, Gurobi is not able to solve any instance to optimality. For more than one in four instances, Gurobi can neither find an optimal solution nor prove infeasibility. We speculate that allowing Gurobi more time or simplifying the model can give further insights into the true status of these instances.</p><p id="Par61">Thus, we run two additional sets of simulations on the remaining “unknown” instances. The first set is intended to find feasible solutions. We suspect any then remaining unknown instance to be infeasible. On those instances, we use a more restricted but (in the context of infeasibility) equivalent MILP formulation which we believe helps Gurobi to prove infeasibility. We describe the two sets of simulations in more detail and see what we can learn about the instances of unknown status.</p><p id="Par62">To make Gurobi’s life (supposedly) easier on the remaining instances of <italic>unknown</italic> status, we allow only one cable type. This greatly reduces the number of binary variables at the start of the optimization. If the capacity of the cable type is set to a value higher than the maximum vertex capacity, the simplified instance is feasible if and only if the original instance is, since the biggest cable capacity exceeds the biggest vertex capacity in all instances in question here. Again, we give Gurobi a maximum running time of one day per instance in single-threaded mode. The outcome of these simulations is shown in the middle part of Table . Gurobi can prove infeasibility on two additional medium and on five additional large instances. Gurobi also finds a first feasible solution on 14 out of 25 large instances. Yet, two medium and six large instances remain unknown.</p><p id="Par63">Given the amount of help we gave Gurobi to find feasible solutions, we believe that the remaining instances are in fact infeasible. To facilitate Gurobi’s proof of infeasibility, we again change the MILP formulation. Since the capacities within a layer are equal and layers are fully connected, we observe that any feasible solution can be transformed into other feasible solutions by a permutation of the vertices of a layer. In order to prove infeasibility, Gurobi needs to outrule all these possibilities. Presumably, this can be facilitated by imposing a fixed order on the vertices of each layer, in which the inflow into the vertices decreases. In formulae, fix a layer <inline-formula id="IEq104"><alternatives><mml:math id="IEq104_Math"><mml:msup><mml:mi>V</mml:mi><mml:mo>′</mml:mo></mml:msup></mml:math><tex-math id="IEq104_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V ^\prime$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq104.gif"/></alternatives></inline-formula> (other than the strings) and enumerate the vertices inside this layer as <inline-formula id="IEq105"><alternatives><mml:math id="IEq105_Math"><mml:mrow><mml:msup><mml:mi>V</mml:mi><mml:mo>′</mml:mo></mml:msup><mml:mo>=</mml:mo><mml:mrow><mml:mo stretchy="false">{</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>k</mml:mi></mml:msub><mml:mo stretchy="false">}</mml:mo></mml:mrow></mml:mrow></mml:math><tex-math id="IEq105_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V ^\prime = \{v_1, \ldots , v_k\}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq105.gif"/></alternatives></inline-formula>. Then, add the constraints<disp-formula id="Equ10"><label>10</label><alternatives><mml:math display="block" id="Equ10_Math"><mml:mrow><mml:mtable><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mrow><mml:mo stretchy="false">|</mml:mo></mml:mrow><mml:msub><mml:mi>V</mml:mi><mml:mi>S</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="false">|</mml:mo><mml:mo>≥</mml:mo></mml:mrow><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi>u</mml:mi><mml:msub><mml:mi>v</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mo>…</mml:mo><mml:mo>≥</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>k</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:munder><mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mi>u</mml:mi><mml:msub><mml:mi>v</mml:mi><mml:mi>k</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mo>≥</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math><tex-math id="Equ10_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{aligned} \vert V_{S} \vert \ge \sum _{(u, v_1) \in E} f _{uv_1} \ge \ldots \ge \sum _{(u, v_k) \in E} f _{uv_k} \ge 0 \end{aligned}$$\end{document}</tex-math><graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_Equ10.gif"/></alternatives></disp-formula>for all layers <inline-formula id="IEq106"><alternatives><mml:math id="IEq106_Math"><mml:msup><mml:mi>V</mml:mi><mml:mo>′</mml:mo></mml:msup></mml:math><tex-math id="IEq106_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$V ^\prime$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq106.gif"/></alternatives></inline-formula>. Additionally, we set the target function to a constant, so that Gurobi terminates once it finds a feasible solution. With this formulation, we allow Gurobi four threads per instance and lift the time limit. Surprisingly, these changes do not help Gurobi much. Even with a total computation time over all threads per instance of more than six weeks, only two additional instances are proven infeasible (cf. lower part of Table <xref rid="Tab4" ref-type="table">4</xref>). At the time of writing, the simulations are still running.</p><p id="Par64">We conclude from these investigations on the optimization status with which Gurobi terminates that Gurobi is very well suited for solving small instances and obtaining feasible solutions on quite a number of instances representing medium and large solar farms. We also note that Gurobi is able to prove infeasibility quite often in reasonable time (with a bit of help), even though our trick with the additional constraints from Eq. (<xref rid="Equ10" ref-type="disp-formula">10</xref>) proved less useful than hoped for. For some large instances, Gurobi cannot find a feasible solution within one day even though these instances are in fact feasible. While allowing Gurobi more time is always an option, one could think about other approaches to find a feasible solution (cf. Conjecture <xref rid="FPar4" ref-type="">1</xref>), give it to Gurobi as a warmstart and see what Gurobi can do from there.</p></sec><sec id="Sec13"><title>Results: running time</title><p id="Par65">We take another look into the instances that are solved to optimality concerning the time Gurobi needs to reach this state. 79 out of 80 small instances are solved to optimality. Gurobi reaches this result within half a minute on 55 instances and within 5 min on 78 instances. The longest proof of optimality on the small instances needs just under 10 min. We suspect that Gurobi has no difficulties on the small instances, since the number of potentially non-zero binary variables can be greatly reduced by combining the constraints: For string edges it is never beneficial to use another than the smallest cable type. Also, the biggest cable type is never used on small instances since the second biggest suffices. More sophisticatedly, the small number of strings and therefore small number of vertices in further layers limits the number of cable types that can be used to due the vertex capacities. For example, consider a solar farm with 180 strings and 60 Y-connectors. By the formulae outlined in <xref rid="Sec10" ref-type="sec">Generating benchmark instances</xref>, Y-connectors can only have a capacity of 3 or 4. In both cases, the smallest cable type also suffices for the edges between Y-connectors and combiner boxes. For all these reasons, we believe Gurobi is able to cut off many suboptimal solutions very easily, which results in short running times.</p><p id="Par66">One medium instance is solved to optimality within 1 h (within 20 min actually) and seven more within 4 h. The longest time for a proof of optimality here is 18 h. Clearly, with more running time, the number of instances solved to optimality would increase further. Unfortunately, it cannot be known how long Gurobi needs. So it is more insightful to look into the worst-case deviation of a best solution from the (unknown) optimal solution value. For this, we go back to the MIP gap in the following section.</p></sec><sec id="Sec14"><title>Results: solution quality</title><p id="Par67"><fig id="Fig3"><label>Fig. 3</label><caption xml:lang="en"><p>MIP gaps sorted in ascending order for medium (<italic>on the left</italic>) and large instances (<italic>on the right</italic>). Depicted are 64 medium and 50 large instances, including those solved to optimality. The upper figures show the gaps for all instances, the lower figures are zoomed in for better view</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_200_Fig3_HTML.png" id="MO13"/></fig><fig id="Fig4"><label>Fig. 4</label><caption xml:lang="en"><p>The MIP gap as a function of the number of edges in medium (<italic>left</italic>) and large instances (<italic>right</italic>). Depicted are 64 medium and 50 large instances, including those solved to optimality. Be aware of the differently scaled y-axes</p></caption><graphic specific-use="web" mime-subtype="PNG" xlink:href="MediaObjects/42162_2022_200_Fig4_HTML.png" id="MO14"/></fig></p><p id="Par68">We look into the quality of the solutions Gurobi has found within one day using the original MILP formulation. By the upper part of Table , the instances in consideration are all with status <italic>optimal</italic> or <italic>feasible</italic>. These are 80 small, 64 medium and 50 large instances. There is not much to say about the small instances; they are almost all solved to optimality. The remaining instance has 180 strings (the maximum) and 11749 edges. On this instance, Gurobi terminates with a MIP gap of 0.0161%. That means between the best solution found is at most 0.0161% worse than the optimal solution.</p><p id="Par69">In the other two categories, there are a lot more feasible but not optimal instances. Figure depicts the gaps sorted increasingly for the medium and large instances. Note that these instances include all instances for which Gurobi has found a solution, whether these solutions have been proven to be optimal or not. All but one medium instance are solved with a gap of less than 5%, that means that the best solution found by Gurobi is at most 5% worse than the optimal solution. A gap of less than 1% has been computed for 53 out of 64 instances and a gap of less than 0.1% for 29 instances. On the large instances, the gap remains bigger than 10% on twelve instances. A gap of less than 5% has been proven for 30 instances and of less than 1% for 17 instances. The smallest gap on the large instances is at approximately 0.13%.</p><p id="Par70">One may reasonably expect that the bigger the instances, the more difficult it is for Gurobi to prove optimality or infeasibility. While this is certainly true when comparing medium with large instances (evidence shown in Fig. <xref rid="Fig3" ref-type="fig">3</xref> and Table <xref rid="Tab4" ref-type="table">4</xref>), it is not clear when only somewhat similarly sized instances are considered, e. g. only the medium instances. Since the number of provably infeasible and of “unknown” instances is very small, we will not address that relation in the context of infeasibility. Any observation on such a small data set might be pure coincidence. Concerning the proof of optimality, however, we depict the MIP gaps as a function of the number of edges for the aforementioned 64 medium and 50 large instances in Fig. <xref rid="Fig4" ref-type="fig">4</xref>. For the medium instances it stands out is that the smallest instance in terms of edges has the second highest gap and that the three biggest instances have very small gaps, including the fifth lowest. Looking at the bulk of the instances, no tendency between MIP gap and number of edges is apparent. In the large instances, the gaps are more spread but also no pattern can be seen. With these pieces of evidence, we conclude that the number of edges cannot solely explain the different performance of Gurobi within the categories of instances. Presumably, the interaction of layer sizes with vertex and cable capacities also plays a role here.</p><p id="Par71">As a side note: Fig. <xref rid="Fig4" ref-type="fig">4</xref> shows only a small number of instances at the upper end of the edge set sizes. We have made a similar observation concerning the number of vertices of large instances in the discussion of Table <xref rid="Tab3" ref-type="table">3</xref> in <xref rid="Sec11" ref-type="sec">Simulation Setup</xref>. We believe that the problem that many of the bigger instances in the category <italic>large</italic> are discarded in the process of placing strings, inverters, and transformers also persists for the medium instances (and maybe even for the small instances).</p><sec id="Sec15"><title>Comparison to gaps from a similar optimization problem</title><p id="Par72">Having small MIP gaps provides certainty that the best solution found is close to the optimal. As we have seen, Gurobi delivers this certainty on a vast amount of instances across all categories. One might suspect that Gurobi is just very good in general at proving such small gaps. We look into simulations using Gurobi for a somewhat similar optimization problem to see if that is the case.</p><p id="Par73">As we have mentioned in <xref rid="Sec3" ref-type="sec">Contribution</xref>, a similar MILP formulation has been used for computing cable layouts of wind farms. The difference lies in the layered structure of solar farms including vertex capacities and the tree structure enforced by Eq. (<xref rid="Equ8" ref-type="disp-formula">8</xref>).  [Gritzbach et al. (<xref ref-type="bibr" rid="CR11">2019</xref>), ArXiv version, Fig. 6] report MIP gaps for their MILP simulations on the synthetic benchmark instances proposed in Lehmann et al. (<xref ref-type="bibr" rid="CR16">2017</xref>). These benchmark instances each supposedly have a number of edges linear in the number of vertices, since an approach employing k-nearest neighbours is used to define the edge set. To the contrary, the edge sets of the solar farm instances proposed here grow quadratically in the number of vertices. One set of wind farm instances (originally denoted by <inline-formula id="IEq107"><alternatives><mml:math id="IEq107_Math"><mml:msub><mml:mi mathvariant="script">N</mml:mi><mml:mn>3</mml:mn></mml:msub></mml:math><tex-math id="IEq107_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {N} _3$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq107.gif"/></alternatives></inline-formula>) has between 80 and 180 turbines per instance and is therefore a bit smaller but still comparable to our small instances. Another set of wind farms (denoted by <inline-formula id="IEq108"><alternatives><mml:math id="IEq108_Math"><mml:msub><mml:mi mathvariant="script">N</mml:mi><mml:mn>4</mml:mn></mml:msub></mml:math><tex-math id="IEq108_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\mathcal {N} _4$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq108.gif"/></alternatives></inline-formula>) has between 200 and 499 turbines. These wind farms are a lot smaller than our medium instances. The MIP gaps reported by Gritzbach et al. for these wind farm benchmark sets are roughly between 25% and 30% with no outliers after a running time of one day per instance. In comparison, all but one small solar farm have been solved to optimality and all but one medium solar farm have a MIP gap below 5%. Even for the large solar farms, our MIP gaps look better, at least as long Gurobi finds a feasible solution. To be fair, Gritzbach et al. have used Gurobi 8.0.0, while we use Gurobi 9.5.0. Still, this cannot explain the remarkable difference in the MIP gaps. The reason for the low MIP gaps probably lies within the structural properties of SoFaCLaP and the corresponding MILP formulation. Most notably, the layered structure of the graph yields MILP constraints that only involve a local part of the graph.</p></sec></sec><sec id="Sec16"><title>Parting notes about the evaluation</title><p id="Par74">The goal of the extensive evaluation of Gurobi’s performance on synthetic instances was to establish the MILP as a first solution approach to SoFaCLaP. The performance characteristics we have reported can serve as a baseline for future evaluations of other algorithmic methods, be it improvements to the MILP itself or any other way of solving SoFaCLaP. In <xref rid="Sec16" ref-type="sec">Conclusion</xref>, we give some hints on how SoFaCLaP can be approached alternatively.</p></sec></sec><sec id="Sec17" sec-type="conclusions"><title>Conclusion</title><p id="Par75">The Solar Farm Cable Layout Problem is, to the best of our knowledge, the first graph-theoretic model of the optimization problem to find a cost-optimal cable layout from strings to transformers in a solar farm while also deciding which of several positions for intermediate vertices such as combiner boxes are best. This model can not only be easily adapted to consider solar farms with string inverters instead of central inverters. It also allows the inclusion of further aspects for the optimization such as vertex installation costs or further constraints such as prohibiting the use of mutually exclusive candidate positions. We introduce a MILP formulation to solve SoFaCLaP and propose a process to generate synthetic benchmark instances. This process builds instances modularly and customizations can be included at various points. We populate this process with input parameters based on real-world solar farms and electrical equipment to obtain three categories of benchmark instances covering solar farms with between 120 and 1500 strings.</p><p id="Par76">The simulations on the MILP formulation from <xref rid="Sec7" ref-type="sec">A mixed-integer linear program</xref> using our synthetic benchmark instances show that Gurobi is able to efficiently solve small- and medium-sized solar farm instances; almost all small and many medium instances are solved to optimality within one day. For the larger instances, one day is not quite enough on some instances to find feasible solutions. But when Gurobi does find solutions, these are for the most part already quite acceptable in terms of the MIP gap.</p><p id="Par77">Moving forward, we see two main directions. From a practical perspective, the vast amount of customization in the problem formulation and in the process of generating benchmark instances can be exploited to investigate different aspects of optimizing the layout of solar farms. From an algorithmic perspective, Gurobi could use some help to find feasible solutions. Solutions from any heuristic approach could be passed on to Gurobi as a warmstart solution. Inspiration for algorithmic approaches can be found in similar optimization problems: Network flows in many variations are a very classical and well-studied problem in theoretical computer science. Equation (<xref rid="Equ8" ref-type="disp-formula">8</xref>) enforces a tree structure, so the Steiner Tree Problem could be a different point of attack. There a given subset of vertices (think: strings) of a directed graph need to be connected to a specified vertex (here: grid point beyond the transformers) using a directed tree incorporating a subset of intermediate vertices. The layers in SoFaCLaP already give a sense of direction. A similar problem is the Multi-Level Facility Location Problem, in which in a layered graph lower-level vertices need to be assigned to higher-level vertices. Any algorithmic approach can of course also stand on its own. To evaluate these, we have established the MILP as a possible baseline, which is one of the main purposes of this work.</p></sec></body><back><ack><title>Acknowledgements</title><sec><p>The authors would like to thank Robin Grab for giving most valuable insights into the finer details of solar farms, Torsten Ueckerdt for fruitful discussions on graph theory and algorithms, Dorothea Wagner for proofreading parts of this work, and an anonymous reviewer for a very helpful hint on literature previously unknown to the authors.</p></sec><sec id="FPar5"><title>About this supplement</title><p id="Par78">This article has been published as part of Energy Informatics Volume 5 Supplement 1, 2022: Proceedings of the 11th DACH+ Conference on Energy Informatics. The full contents of the supplement are available online at <ext-link xlink:href="https://energyinformatics.springeropen.com/articles/supplements/volume-5-supplement-1" ext-link-type="uri">https://energyinformatics.springeropen.com/articles/supplements/volume-5-supplement-1</ext-link>.</p></sec></ack><sec sec-type="author-contribution"><title>Author contributions</title><p>SG: conceptualization, validation, formal analysis, investigation, resources, data curation, writing—original draft, review and editing, visualization. DS: methodology, software, investigation, writing—original draft, review and editing. MW: conceptualization, validation, resources, writing—review and editing. All authors read and approved the final manuscript.</p></sec><sec><title>Funding</title><p>This research was funded by the Helmholtz Association under the program “Energy System Design” and by the German Research Foundation (DFG) as part of the Research Training Group GRK 2153: Energy Status Data—Informatics Methods for its Collection, Analysis and Exploitation.</p></sec><sec sec-type="data-availability"><title>Availability of data and materials</title><p>The benchmark instances introduced in this work are available in the RADAR4KIT repository, <ext-link xlink:href="http://www.doi.org/10.35097/676" ext-link-type="uri">http://www.doi.org/10.35097/676</ext-link>. The dataset supporting the conclusions of this article is available in the RADAR4KIT repository, <ext-link xlink:href="http://doi.org/10.35097/683" ext-link-type="uri">http://doi.org/10.35097/683</ext-link>.</p></sec><sec sec-type="ethics-statement"><title>Declarations</title><sec id="FPar6" sec-type="COI-statement"><title>Competing interests</title><p id="Par79">The authors declare that they have no competing interests.</p></sec></sec><ref-list id="Bib1"><title>References</title><ref-list><ref id="CR1"><mixed-citation publication-type="other">ABB Ltd.: Photovoltaic Plants. (2019). Retrieved on January 20, 2022. <ext-link xlink:href="https://library.abb.com/d/9AKK107492A3277" ext-link-type="uri">https://library.abb.com/d/9AKK107492A3277</ext-link></mixed-citation></ref><ref id="CR2"><mixed-citation publication-type="other">Alpiq Holding AG: Società Agricola Solar Farm 2. Retrieved on January 24, 2022. <ext-link xlink:href="https://www.alpiq.com/power-generation/new-renewable-energy-sources/solar-energy/societa-agricola-solar-farm-2/" ext-link-type="uri">https://www.alpiq.com/power-generation/new-renewable-energy-sources/solar-energy/societa-agricola-solar-farm-2/</ext-link></mixed-citation></ref><ref id="CR3"><mixed-citation publication-type="other">Bischoff M, Ewe H, Plociennik K, Schüle I (2014) Multi-objective planning of large-scale photovoltaic power plants. In: Helber S, Breitner M, Rösch D, Schön C, Graf von der Schulenburg J-M, Sibbertsen P, Steinbach M, Weber S, Wolter A (eds) Operations research proceedings 2012. Springer, Cham, pp 333–338</mixed-citation></ref><ref id="CR4"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bollipo</surname><given-names>RB</given-names></name><name><surname>Mikkili</surname><given-names>S</given-names></name><name><surname>Bonthagorla</surname><given-names>PK</given-names></name></person-group><article-title xml:lang="en">Critical review on pv mppt techniques: classical, intelligent and optimisation</article-title><source>IET Renew Power Gener</source><year>2020</year><volume>14</volume><issue>9</issue><fpage>1433</fpage><lpage>1452</lpage><pub-id pub-id-type="doi">10.1049/iet-rpg.2019.1163</pub-id></mixed-citation></ref><ref id="CR5"><mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Brandes</surname><given-names>U</given-names></name><name><surname>Eiglsperger</surname><given-names>M</given-names></name><name><surname>Herman</surname><given-names>I</given-names></name><name><surname>Himsolt</surname><given-names>M</given-names></name><name><surname>Marshall</surname><given-names>MS</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Mutzel</surname><given-names>P</given-names></name><name><surname>Jünger</surname><given-names>M</given-names></name><name><surname>Leipert</surname><given-names>S</given-names></name></person-group><article-title xml:lang="en">Graphml progress report structural layer proposal</article-title><source>Graph Drawing</source><year>2002</year><publisher-loc>Berlin</publisher-loc><publisher-name>Springer</publisher-name><fpage>501</fpage><lpage>512</lpage><pub-id pub-id-type="doi">10.1007/3-540-45848-4_59</pub-id></mixed-citation></ref><ref id="CR6"><mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Chimani</surname><given-names>M</given-names></name><name><surname>Gutwenger</surname><given-names>C</given-names></name><name><surname>Jünger</surname><given-names>M</given-names></name><name><surname>Klau</surname><given-names>GW</given-names></name><name><surname>Klein</surname><given-names>K</given-names></name><name><surname>Mutzel</surname><given-names>P</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Tamassia</surname><given-names>R</given-names></name></person-group><article-title xml:lang="en">The open graph drawing framework (OGDF)</article-title><source>Handbook of graph drawing and visualization</source><year>2013</year><publisher-loc>Boca Raton</publisher-loc><publisher-name>CRC Press</publisher-name><fpage>543</fpage><lpage>569</lpage></mixed-citation></ref><ref id="CR7"><mixed-citation publication-type="other">Dutta S, Overbye TJ (2011) A clustering based wind farm collector system cable layout design. In: Power and Energy Conference at Illinois (PECI), IEEE, pp. 1–6</mixed-citation></ref><ref id="CR8"><mixed-citation publication-type="other">Every E (2022) Using Y Connectors in String Inverter Systems. Retrieved on January 24. <ext-link xlink:href="https://solectria.com/blog/using-y-connectors-in-string-inverter-systems-part-i/" ext-link-type="uri">https://solectria.com/blog/using-y-connectors-in-string-inverter-systems-part-i/</ext-link></mixed-citation></ref><ref id="CR9"><mixed-citation publication-type="other">Gajda JW (2022) Solar Farms: Design &amp; Construction. Retrieved on February 1. <ext-link xlink:href="https://standards.ieee.org/wp-content/uploads/import/documents/presentations/nesc_workshop__solar_farms-design_construction.pdf" ext-link-type="uri">https://standards.ieee.org/wp-content/uploads/import/documents/presentations/nesc_workshop__solar_farms-design_construction.pdf</ext-link></mixed-citation></ref><ref id="CR10"><mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Garey</surname><given-names>MR</given-names></name><name><surname>Johnson</surname><given-names>DS</given-names></name></person-group><source>Computers and Intractability: a Guide to the Theory of NP-completeness. A series of books in the mathematical sciences</source><year>1979</year><publisher-loc>New York</publisher-loc><publisher-name>W. H. Freeman &amp; Co.</publisher-name><pub-id pub-id-type="other" assigning-authority="Zentralblatt MATH">0411.68039</pub-id></mixed-citation></ref><ref id="CR11"><mixed-citation publication-type="other">Gritzbach S, Ueckerdt T, Wagner D, Wegner F, Wolf M (2019) Engineering Negative Cycle Canceling for Wind Farm Cabling. In: Bender, M.A., Svensson, O., Herman, G. (eds.) 27th Annual European Symposium on Algorithms (ESA 2019). Leibniz International Proceedings in Informatics (LIPIcs), vol. 144, pp. 55:1–55:16. Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik, Dagstuhl. ArXiv version available at https://arxiv.org/abs/1908.02129. <ext-link xlink:href="http://drops.dagstuhl.de/opus/volltexte/2019/11176" ext-link-type="uri">http://drops.dagstuhl.de/opus/volltexte/2019/11176</ext-link></mixed-citation></ref><ref id="CR12"><mixed-citation publication-type="other">Gurobi Optimization, Inc.: Gurobi Optimizer Reference Manual. (2018). Gurobi Optimization, Inc. <ext-link xlink:href="http://www.gurobi.com" ext-link-type="uri">http://www.gurobi.com</ext-link></mixed-citation></ref><ref id="CR13"><mixed-citation publication-type="other">HELUKABEL GmbH: Cables and Cable Systems for Photovoltaic Installations. Retrieved on December 11, 2021. <ext-link xlink:href="https://www.helukabel.com/media/publication/de/brochures/pv_20/PV_BROCHURE_Photovoltaik_EN%7e1.pdf" ext-link-type="uri">https://www.helukabel.com/media/publication/de/brochures/pv_20/PV_BROCHURE_Photovoltaik_EN~1.pdf</ext-link></mixed-citation></ref><ref id="CR14"><mixed-citation publication-type="other">IRENA: Renewable power generation costs in 2020. Technical report, International Renewable Energy Agency, Abu Dhabi (June 2021). Retrieved on January 24, (2022). <ext-link xlink:href="https://www.irena.org/publications/2021/Jun/Renewable-Power-Costs-in-2020" ext-link-type="uri">https://www.irena.org/publications/2021/Jun/Renewable-Power-Costs-in-2020</ext-link></mixed-citation></ref><ref id="CR15"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kirchartz</surname><given-names>T</given-names></name><name><surname>Rau</surname><given-names>U</given-names></name></person-group><article-title xml:lang="en">What makes a good solar cell?</article-title><source>Adv Energy Mater</source><year>2018</year><volume>8</volume><issue>28</issue><fpage>1703385</fpage><pub-id pub-id-type="doi">10.1002/aenm.201703385</pub-id></mixed-citation></ref><ref id="CR16"><mixed-citation publication-type="other">Lehmann S, Rutter I, Wagner D, Wegner F (2017) A simulated-annealing-based approach for wind farm cabling. In: Proceedings of the Eighth International Conference on Future Energy Systems. e-Energy ’17, pp. 203–215. ACM, New York</mixed-citation></ref><ref id="CR17"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Liu</surname><given-names>T</given-names></name><name><surname>Yang</surname><given-names>X</given-names></name><name><surname>Chen</surname><given-names>W</given-names></name><name><surname>Li</surname><given-names>Y</given-names></name><name><surname>Xuan</surname><given-names>Y</given-names></name><name><surname>Huang</surname><given-names>L</given-names></name><name><surname>Hao</surname><given-names>X</given-names></name></person-group><article-title xml:lang="en">Design and implementation of high efficiency control scheme of dual active bridge based 10 kv/1 mw solid state transformer for pv application</article-title><source>IEEE Trans Power Electron</source><year>2019</year><volume>34</volume><issue>5</issue><fpage>4223</fpage><lpage>4238</lpage><pub-id pub-id-type="doi">10.1109/TPEL.2018.2864657</pub-id></mixed-citation></ref><ref id="CR18"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ljubić</surname><given-names>I</given-names></name></person-group><article-title xml:lang="en">Solving steiner trees: recent advances, challenges, and perspectives</article-title><source>Networks</source><year>2021</year><volume>77</volume><issue>2</issue><fpage>177</fpage><lpage>204</lpage><pub-id pub-id-type="other" assigning-authority="American Mathematical Society">4264482</pub-id><pub-id pub-id-type="doi">10.1002/net.22005</pub-id></mixed-citation></ref><ref id="CR19"><mixed-citation publication-type="other">LS ELECTRIC Co., Ltd.: Photovoltaic Combiner Box. (2021). Retrieved on January 20, 2022. <ext-link xlink:href="https://www.ls-electric.com/" ext-link-type="uri">https://www.ls-electric.com/</ext-link></mixed-citation></ref><ref id="CR20"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Luo</surname><given-names>Z</given-names></name><name><surname>Qin</surname><given-names>H</given-names></name><name><surname>Cheng</surname><given-names>T</given-names></name><name><surname>Wu</surname><given-names>Q</given-names></name><name><surname>Lim</surname><given-names>A</given-names></name></person-group><article-title xml:lang="en">A branch-and-price-and-cut algorithm for the cable-routing problem in solar power plants</article-title><source>INFORMS J Comput</source><year>2021</year><volume>33</volume><issue>2</issue><fpage>452</fpage><lpage>476</lpage><pub-id pub-id-type="other" assigning-authority="Zentralblatt MATH">1466.90020</pub-id></mixed-citation></ref><ref id="CR21"><mixed-citation publication-type="book"><person-group person-group-type="author"><name><surname>Mertens</surname><given-names>K</given-names></name></person-group><source>Photovoltaics: fundamentals, technology, and practice</source><year>2019</year><edition>2</edition><publisher-loc>Chichester, West Sussex</publisher-loc><publisher-name>Wiley</publisher-name></mixed-citation></ref><ref id="CR22"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ortiz-Astorquiza</surname><given-names>C</given-names></name><name><surname>Contreras</surname><given-names>I</given-names></name><name><surname>Laporte</surname><given-names>G</given-names></name></person-group><article-title xml:lang="en">Multi-level facility location problems</article-title><source>Eur J Oper Res</source><year>2018</year><volume>267</volume><issue>3</issue><fpage>791</fpage><lpage>805</lpage><pub-id pub-id-type="other" assigning-authority="American Mathematical Society">3760804</pub-id><pub-id pub-id-type="doi">10.1016/j.ejor.2017.10.019</pub-id></mixed-citation></ref><ref id="CR23"><mixed-citation publication-type="other">Sanjay P (2022) With 2,245 MW of Commissioned Solar Projects, World’s Largest Solar Park Is Now at Bhadla. Retrieved on January 25. <ext-link xlink:href="https://mercomindia.com/world-largest-solar-park-bhadla/" ext-link-type="uri">https://mercomindia.com/world-largest-solar-park-bhadla/</ext-link></mixed-citation></ref><ref id="CR24"><mixed-citation publication-type="other">SMA Solar Technology AG: SMA String-Combiner. (2020). Retrieved on January 20, 2022. <ext-link xlink:href="https://files.sma.de/downloads/DC-CMB-U-DEN1834-V16web.pdf" ext-link-type="uri">https://files.sma.de/downloads/DC-CMB-U-DEN1834-V16web.pdf</ext-link></mixed-citation></ref><ref id="CR25"><mixed-citation publication-type="other">SolarBOS, Inc.: Standard Recombiners. Retrieved on January 20, 2022. <ext-link xlink:href="http://www.solarbos.com/Standard-Recombiners" ext-link-type="uri">http://www.solarbos.com/Standard-Recombiners</ext-link></mixed-citation></ref><ref id="CR26"><mixed-citation publication-type="other">SolarPower Europe: Global market outlook for solar power 2020–2024. Technical report (2020). Retrieved on January 31, (2022). <ext-link xlink:href="https://www.solarpowereurope.org/global-market-outlook-2020-2024/" ext-link-type="uri">https://www.solarpowereurope.org/global-market-outlook-2020-2024/</ext-link></mixed-citation></ref><ref id="CR27"><mixed-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tavana</surname><given-names>M</given-names></name><name><surname>Santos Arteaga</surname><given-names>FJ</given-names></name><name><surname>Mohammadi</surname><given-names>S</given-names></name><name><surname>Alimohammadi</surname><given-names>M</given-names></name></person-group><article-title xml:lang="en">A fuzzy multi-criteria spatial decision support system for solar farm location planning</article-title><source>Energy Strategy Rev</source><year>2017</year><volume>18</volume><fpage>93</fpage><lpage>105</lpage><pub-id pub-id-type="doi">10.1016/j.esr.2017.09.003</pub-id></mixed-citation></ref></ref-list></ref-list><fn-group><fn id="Fn1"><label>1</label><p id="Par80">As alluded to in <xref rid="Sec6" ref-type="sec">SoFaCLaP from a practical perspective</xref>, it does not suffice to merely have the positions of the strings and other devices in an existing solar farm. We rather need all potential positions of devices. This represents an intermediate step in the planning process which is, understandibly, not publicly available.</p></fn><fn id="Fn2"><label>2</label><p id="Par81">Gurobi can bound the optimal value from above by the best incumbent solution (value of ub) and from below by more sophisticated considerations (lb). The MIP Gap is defined as <inline-formula id="IEq109"><alternatives><mml:math id="IEq109_Math"><mml:mrow><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mi mathvariant="normal">ub</mml:mi><mml:mo>-</mml:mo><mml:mi mathvariant="normal">lb</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo stretchy="false">/</mml:mo><mml:mi mathvariant="normal">lb</mml:mi></mml:mrow></mml:math><tex-math id="IEq109_TeX">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym}
				\usepackage{amsfonts}
				\usepackage{amssymb}
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$${(\mathrm {ub}-\mathrm {lb})}/{\mathrm {lb}}$$\end{document}</tex-math><inline-graphic specific-use="web" mime-subtype="GIF" xlink:href="42162_2022_200_Article_IEq109.gif"/></alternatives></inline-formula>.</p></fn></fn-group><notes notes-type="Misc"><title>Publisher’s Note</title><p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></notes></back></article></records><facets><facet name="subject"><facet-value count="1">Computer Science</facet-value><facet-value count="1">Information Systems and Communication Service</facet-value></facet><facet name="keyword"><facet-value count="1">Benchmark generation</facet-value><facet-value count="1">Cable layout</facet-value><facet-value count="1">Graph</facet-value><facet-value count="1">Mixed-integer linear program</facet-value><facet-value count="1">Solar farm</facet-value></facet><facet name="pub"><facet-value count="1">Energy Informatics</facet-value></facet><facet name="year"><facet-value count="1">2022</facet-value></facet><facet name="country"><facet-value count="1">Germany</facet-value></facet><facet name="type"><facet-value count="1">Journal</facet-value></facet></facets></response>
